
==================== FINAL INTERFACE ====================
2019-01-06 15:41:15.024477 UTC

interface sedel-0.1.0.0-DuOee9DhvYx7Duo7SFFYX4:SEDEL 8044
  interface hash: 133885d38c5428c9c7c8064144fb8a6d
  ABI hash: ae8540d395a566d93ce5eafc1d26dbce
  export-list hash: cde98b0e3ba1bca232c7de4beeb98b83
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 123183a1382f674acc5fcbd68e2e074c
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  SEDEL.driver
  SEDEL.evalFile
  SEDEL.readAndEval
  SEDEL.render
module dependencies: SEDEL.Common SEDEL.Environment
                     SEDEL.Parser.Parser SEDEL.PrettyPrint SEDEL.Source.Desugar
                     SEDEL.Source.Subtyping SEDEL.Source.Syntax SEDEL.Source.TypeCheck
                     SEDEL.Target.Eval SEDEL.Target.Syntax SEDEL.Util
package dependencies: StateVar-1.1.1.1 array-0.5.2.0 async-2.2.1
                      base-4.11.1.0 base-orphans-0.7 bifunctors-5.5.3 binary-0.8.5.1
                      bytestring-0.10.8.2 case-insensitive-1.2.0.11 comonad-5.0.4
                      containers-0.5.11.0 contravariant-1.4.1 deepseq-1.4.3.0
                      distributive-0.5.3 exceptions-0.10.0 ghc-boot-th-8.4.4
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.2 megaparsec-6.5.0 mtl-2.2.2
                      parser-combinators-1.0.0 pretty-1.1.3.6 prettyprinter-1.2.1
                      primitive-0.6.3.0 profunctors-5.2.2 protolude-0.2.2
                      scientific-0.3.6.2 stm-2.4.5.1 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.1 transformers-0.5.5.0
                      unbound-generics-0.3.4
orphans: sedel-0.1.0.0-DuOee9DhvYx7Duo7SFFYX4:SEDEL.PrettyPrint
         sedel-0.1.0.0-DuOee9DhvYx7Duo7SFFYX4:SEDEL.Source.Syntax
         transformers-0.5.5.0:Control.Monad.Trans.Error
         stm-2.4.5.1:Control.Monad.STM
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         ghc-boot-th-8.4.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.4:GHC.LanguageExtensions.Type
                         megaparsec-6.5.0:Text.Megaparsec.Error
                         megaparsec-6.5.0:Text.Megaparsec.Pos
                         megaparsec-6.5.0:Text.Megaparsec.State
                         megaparsec-6.5.0:Text.Megaparsec.Stream
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         prettyprinter-1.2.1:Data.Text.Prettyprint.Doc.Internal
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         sedel-0.1.0.0-DuOee9DhvYx7Duo7SFFYX4:SEDEL.Common
                         sedel-0.1.0.0-DuOee9DhvYx7Duo7SFFYX4:SEDEL.Source.Syntax
                         sedel-0.1.0.0-DuOee9DhvYx7Duo7SFFYX4:SEDEL.Target.Syntax
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         unbound-generics-0.3.4:Unbound.Generics.LocallyNameless.Bind
                         unbound-generics-0.3.4:Unbound.Generics.LocallyNameless.Embed
                         unbound-generics-0.3.4:Unbound.Generics.LocallyNameless.Name
                         unbound-generics-0.3.4:Unbound.Generics.LocallyNameless.Rebind
                         unbound-generics-0.3.4:Unbound.Generics.LocallyNameless.Rec
                         unbound-generics-0.3.4:Unbound.Generics.LocallyNameless.Shift
import  -/  base-4.11.1.0:Control.Exception 3d8e6cda20877f889f07bc7c0f5cac36
import  -/  base-4.11.1.0:Control.Exception.Base 6b3335161fe9c47efeac02d92d6dc212
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Exception e1b7fe1dbd1d0e3fb049e1163c71a5e8
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  prettyprinter-1.2.1:Data.Text.Prettyprint.Doc 04e8924fa6b26857d25f7e89f331b3ec
import  -/  prettyprinter-1.2.1:Data.Text.Prettyprint.Doc.Internal 4dbff1ffd6a8a023b5e8586c0275223e
import  -/  prettyprinter-1.2.1:Data.Text.Prettyprint.Doc.Symbols.Ascii e965189d3854891aaef2f95b81655ee5
import  -/  protolude-0.2.2:Protolude ec8c9f1921240ba85c2826100dc947ec
import  -/  protolude-0.2.2:Protolude.Conv f9e28a671aebbc793053124ca66ad7d6
import  -/  SEDEL.Environment 922798dbc6501cc1e753d0bf02e2ee18
  exports: c9353cb55df34f88c28e943082ce9774
  Ctx 825b90165b54a7ba48eb0d624fdc3801
  emptyCtx ed45857acc7f11e30b03d4ce5c13f8fa
  runTcMonad 3e2155c8d3f35adae5e9df499bcceff7
import  -/  SEDEL.Parser.Parser a5867fff13a1fefb9cdb380b1eab2670
  exports: 7ff276fc44ebebc8fa0c170780ae9850
  parseModule f4d149547bded9d007f88645bf9b6c6e
import  -/  SEDEL.PrettyPrint 04afb2ace10474c84b6cd648c0d199ec
  exports: 050e7ed02319209630907c4ce89dba15
  FDoc 9a25b03352f79b7c02ebdfabcf4e40ed
  pprint 412c2e1d3aa1d3e3f6acf6eef6625471
import  -/  SEDEL.Source.Syntax c6851d369824d5b2d3a7e5400a3e8895
  exports: cabfe3b04d2f999f33a8aa4c6138d737
  Module ee48d31af8cdf4c66155ef3d8df4f23b
  SType 25c2500e15597d4f4006aa39bdab089a
import  -/  SEDEL.Source.TypeCheck 26ba061c2148e7061f003c49085e1237
  exports: 7176b4c25c689ae5fa59e84532dbce30
  tcModule 66951b1c59dde2946472b9fc0fd23528
import  -/  SEDEL.Target.Eval ca5192a4f2fbf42bb6af223817016f55
  exports: b814df76acc04a6dfaba8c97fb721d2c
  evaluate d679c76497a3fb28228b96e349041101
import  -/  text-1.2.3.1:Data.Text e8581f8e8ebc78d94a3747f354f0ee37
import  -/  text-1.2.3.1:Data.Text.IO 6578edad0284033fac24a3795732fcf5
import  -/  text-1.2.3.1:Data.Text.Internal 4893d0339f20e05978e1af2720305fa2
e9ab7de88c8c2f3bde8550ad42ecb897
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module SEDEL.$trModule3 SEDEL.$trModule1) -}
ce331cd667884bdadf423d935e2b849b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.$trModule2) -}
5a7a8f58b2ba821fa5d64be035bdd0b1
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SEDEL"#) -}
aeaa3ded5ad03aae44495a7ff1cf9b49
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.$trModule4) -}
0be93a3f0628d5d4cc160beb5c527c73
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("sedel-0.1.0.0-DuOee9DhvYx7Duo7SFFYX4"#) -}
67a606b2488e3a824651c3b73c40f60b
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
2d9a17c31178e79e405d194ce980420a
  $wrender ::
    SEDEL.Source.Syntax.SType
    -> Data.Text.Internal.Text
    -> (# Data.Text.Prettyprint.Doc.Internal.Doc
            SEDEL.PrettyPrint.FAnn,
          Data.Text.Prettyprint.Doc.Internal.Doc SEDEL.PrettyPrint.FAnn #)
  {- Arity: 2, Strictness: <L,U><L,1*U(U,U,U)>, Inline: [0],
     Unfolding: (\ (ww :: SEDEL.Source.Syntax.SType)
                   (ww1 :: Data.Text.Internal.Text) ->
                 (# SEDEL.render5,
                    Data.Text.Prettyprint.Doc.Internal.Cat
                      @ SEDEL.PrettyPrint.FAnn
                      (Data.Text.Prettyprint.Doc.Internal.line @ SEDEL.PrettyPrint.FAnn)
                      (Data.Text.Prettyprint.Doc.Internal.Cat
                         @ SEDEL.PrettyPrint.FAnn
                         (Data.Text.Prettyprint.Doc.Internal.Cat
                            @ SEDEL.PrettyPrint.FAnn
                            (Data.Text.Prettyprint.Doc.Symbols.Ascii.colon
                               @ SEDEL.PrettyPrint.FAnn)
                            (Data.Text.Prettyprint.Doc.Internal.Cat
                               @ SEDEL.PrettyPrint.FAnn
                               (Data.Text.Prettyprint.Doc.Internal.line1 @ SEDEL.PrettyPrint.FAnn)
                               ((SEDEL.PrettyPrint.$w$cppr7
                                   @ (Unbound.Generics.LocallyNameless.LFresh.LFreshMT
                                        Data.Functor.Identity.Identity)
                                   SEDEL.PrettyPrint.$s$fLFreshLFreshMT
                                   ww)
                                  `cast`
                                (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0] <Data.Functor.Identity.Identity>_N <SEDEL.PrettyPrint.FDoc>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                           <*>_N
                                                                                                                                                           <Data.Set.Internal.Set
                                                                                                                                                              Unbound.Generics.LocallyNameless.Name.AnyName>_R
                                                                                                                                                           <Data.Functor.Identity.Identity>_R
                                                                                                                                                           <SEDEL.PrettyPrint.FDoc>_N)
                                  (Data.Set.Internal.Tip
                                     @ Unbound.Generics.LocallyNameless.Name.AnyName))
                                 `cast`
                               (Data.Functor.Identity.N:Identity[0] <SEDEL.PrettyPrint.FDoc>_R)))
                         (Data.Text.Prettyprint.Doc.Internal.Cat
                            @ SEDEL.PrettyPrint.FAnn
                            (Data.Text.Prettyprint.Doc.Internal.line @ SEDEL.PrettyPrint.FAnn)
                            (Data.Text.Prettyprint.Doc.Internal.Cat
                               @ SEDEL.PrettyPrint.FAnn
                               (Data.Text.Prettyprint.Doc.Internal.line @ SEDEL.PrettyPrint.FAnn)
                               (Data.Text.Prettyprint.Doc.Internal.Cat
                                  @ SEDEL.PrettyPrint.FAnn
                                  SEDEL.render3
                                  (Data.Text.Prettyprint.Doc.Internal.Cat
                                     @ SEDEL.PrettyPrint.FAnn
                                     (Data.Text.Prettyprint.Doc.Internal.line
                                        @ SEDEL.PrettyPrint.FAnn)
                                     (Data.Text.Prettyprint.Doc.Internal.Cat
                                        @ SEDEL.PrettyPrint.FAnn
                                        SEDEL.render1
                                        (Data.Text.Prettyprint.Doc.Internal.Cat
                                           @ SEDEL.PrettyPrint.FAnn
                                           (Data.Text.Prettyprint.Doc.Internal.line1
                                              @ SEDEL.PrettyPrint.FAnn)
                                           (Data.Text.Prettyprint.Doc.Internal.$fPrettyText_$cpretty1
                                              @ SEDEL.PrettyPrint.FAnn
                                              ww1)))))))) #)) -}
fa811e3b02c62796a6acabb907909a26
  type Result =
    Data.Either.Either
      SEDEL.PrettyPrint.FDoc
      (SEDEL.Source.Syntax.SType, Data.Text.Internal.Text)
bda026f79b8a97035df1b3397b638efa
  driver ::
    SEDEL.Environment.Ctx
    -> SEDEL.Source.Syntax.Module -> GHC.Types.IO SEDEL.Result
  {- Arity: 3, Strictness: <L,U><L,1*U(1*U,1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                SEDEL.driver1
                  `cast`
                (<SEDEL.Environment.Ctx>_R
                 ->_R <SEDEL.Source.Syntax.Module>_R
                 ->_R Sym (GHC.Types.N:IO[0] <SEDEL.Result>_R)) -}
ed5fc8028e2f3ddf6d2afcdd0a603828
  driver1 ::
    SEDEL.Environment.Ctx
    -> SEDEL.Source.Syntax.Module
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, SEDEL.Result #)
  {- Arity: 3, Strictness: <L,U><L,1*U(1*U,1*U)><S,U>,
     Unfolding: (\ (ctx :: SEDEL.Environment.Ctx)
                   (abt :: SEDEL.Source.Syntax.Module)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (((SEDEL.Source.TypeCheck.tcModule abt)
                          `cast`
                        (Unbound.Generics.LocallyNameless.Fresh.N:FreshMT[0] <Control.Monad.Trans.Reader.ReaderT
                                                                                SEDEL.Environment.Ctx
                                                                                (Control.Monad.Trans.Except.ExceptT
                                                                                   SEDEL.Environment.Err
                                                                                   GHC.Types.IO)>_N <(SEDEL.Source.Syntax.SType,
                                                                                                      SEDEL.Target.Syntax.UExpr)>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                                                                          <GHC.Integer.Type.Integer>_N
                                                                                                                                          <Control.Monad.Trans.Reader.ReaderT
                                                                                                                                             SEDEL.Environment.Ctx
                                                                                                                                             (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                SEDEL.Environment.Err
                                                                                                                                                GHC.Types.IO)>_R
                                                                                                                                          <(SEDEL.Source.Syntax.SType,
                                                                                                                                            SEDEL.Target.Syntax.UExpr)>_N)
                          Unbound.Generics.LocallyNameless.Fresh.runFreshM1)
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <SEDEL.Environment.Ctx>_R
                            <Control.Monad.Trans.Except.ExceptT
                               SEDEL.Environment.Err GHC.Types.IO>_R
                            <((SEDEL.Source.Syntax.SType, SEDEL.Target.Syntax.UExpr),
                              GHC.Integer.Type.Integer)>_N)
                         ctx)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <SEDEL.Environment.Err>_N
                           <GHC.Types.IO>_R
                           <((SEDEL.Source.Syntax.SType, SEDEL.Target.Syntax.UExpr),
                             GHC.Integer.Type.Integer)>_N ; GHC.Types.N:IO[0]
                                                                <Data.Either.Either
                                                                   SEDEL.Environment.Err
                                                                   ((SEDEL.Source.Syntax.SType,
                                                                     SEDEL.Target.Syntax.UExpr),
                                                                    GHC.Integer.Type.Integer)>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1
                   -> SEDEL.driver2
                        ipv
                        (Data.Either.Left
                           @ SEDEL.Environment.Err
                           @ (SEDEL.Source.Syntax.SType, SEDEL.Target.Syntax.UExpr)
                           e1)
                   Data.Either.Right x
                   -> SEDEL.driver2
                        ipv
                        (Data.Either.Right
                           @ SEDEL.Environment.Err
                           @ (SEDEL.Source.Syntax.SType, SEDEL.Target.Syntax.UExpr)
                           (case x of wild1 { (,) a1 ds2 -> a1 })) } }) -}
5d5ff3b2ba5f04d4b7f034e46ae706b3
  driver2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> Data.Either.Either
         SEDEL.Environment.Err
         (SEDEL.Source.Syntax.SType, SEDEL.Target.Syntax.UExpr)
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, SEDEL.Result #)
  {- Arity: 2, Strictness: <S,U><S,1*U>,
     Unfolding: (\ (ipv :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                   (ipv1 :: Data.Either.Either
                              SEDEL.Environment.Err
                              (SEDEL.Source.Syntax.SType, SEDEL.Target.Syntax.UExpr))[OneShot] ->
                 case ipv1 of wild {
                   Data.Either.Left er
                   -> (# ipv,
                         Data.Either.Left
                           @ SEDEL.PrettyPrint.FDoc
                           @ (SEDEL.Source.Syntax.SType, Data.Text.Internal.Text)
                           (case er of ww { SEDEL.Environment.Err ww1 ww2 ->
                            ((SEDEL.Environment.$w$cppr
                                @ (Unbound.Generics.LocallyNameless.LFresh.LFreshMT
                                     Data.Functor.Identity.Identity)
                                SEDEL.PrettyPrint.$s$fLFreshLFreshMT
                                ww1
                                ww2)
                               `cast`
                             (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0] <Data.Functor.Identity.Identity>_N <SEDEL.PrettyPrint.FDoc>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                        <*>_N
                                                                                                                                                        <Data.Set.Internal.Set
                                                                                                                                                           Unbound.Generics.LocallyNameless.Name.AnyName>_R
                                                                                                                                                        <Data.Functor.Identity.Identity>_R
                                                                                                                                                        <SEDEL.PrettyPrint.FDoc>_N)
                               (Data.Set.Internal.Tip
                                  @ Unbound.Generics.LocallyNameless.Name.AnyName))
                              `cast`
                            (Data.Functor.Identity.N:Identity[0]
                                 <SEDEL.PrettyPrint.FDoc>_R) }) #)
                   Data.Either.Right ds
                   -> case ds of wild1 { (,) typ tar ->
                      case ((SEDEL.Target.Eval.eval
                               (Data.Map.Internal.Tip
                                  @ SEDEL.Target.Syntax.UName
                                  @ SEDEL.Target.Eval.Thunk)
                               tar)
                              `cast`
                            (Unbound.Generics.LocallyNameless.Fresh.N:FreshMT[0] <Control.Monad.Trans.Except.ExceptT
                                                                                    GHC.Base.String
                                                                                    GHC.Types.IO>_N <SEDEL.Target.Eval.Value>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                                                                      <GHC.Integer.Type.Integer>_N
                                                                                                                                      <Control.Monad.Trans.Except.ExceptT
                                                                                                                                         GHC.Base.String
                                                                                                                                         GHC.Types.IO>_R
                                                                                                                                      <SEDEL.Target.Eval.Value>_N)
                              Unbound.Generics.LocallyNameless.Fresh.runFreshM1)
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <[GHC.Types.Char]>_N
                                <GHC.Types.IO>_R
                                <(SEDEL.Target.Eval.Value,
                                  GHC.Integer.Type.Integer)>_N ; GHC.Types.N:IO[0]
                                                                     <Data.Either.Either
                                                                        [GHC.Types.Char]
                                                                        (SEDEL.Target.Eval.Value,
                                                                         GHC.Integer.Type.Integer)>_R)
                             ipv of ds1 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild2 {
                        Data.Either.Left e1
                        -> (# ipv2,
                              Data.Either.Left
                                @ (Data.Text.Prettyprint.Doc.Internal.Doc SEDEL.PrettyPrint.FAnn)
                                @ (SEDEL.Source.Syntax.SType, Data.Text.Internal.Text)
                                (Data.Text.Prettyprint.Doc.Internal.$fIsStringDoc_$cfromString
                                   @ SEDEL.PrettyPrint.FAnn
                                   e1) #)
                        Data.Either.Right x
                        -> (# ipv2,
                              Data.Either.Right
                                @ SEDEL.PrettyPrint.FDoc
                                @ (SEDEL.Source.Syntax.SType, Data.Text.Internal.Text)
                                (typ,
                                 case x of wild3 { (,) a1 ds2 ->
                                 case SEDEL.Target.Eval.$fShowValue_$cshow a1 of dt { DEFAULT ->
                                 case GHC.Magic.runRW#
                                        @ ('GHC.Types.TupleRep
                                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             Data.Text.Internal.Text #)
                                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                         case GHC.Prim.newByteArray#
                                                @ GHC.Prim.RealWorld
                                                10#
                                                s1 of ds4 { (#,#) ipv4 ipv5 ->
                                         SEDEL.$wouter
                                           ipv5
                                           4#
                                           dt
                                           0#
                                           ipv4 }) of ds4 { (#,#) ipv4 ipv5 ->
                                 ipv5 } } }) #) } } } }) -}
4226709172f15354283f7413a4a645d2
  evalFile ::
    GHC.IO.FilePath
    -> GHC.Types.IO
         ((SEDEL.PrettyPrint.FDoc, GHC.Base.Maybe SEDEL.PrettyPrint.FDoc),
          GHC.Types.Bool)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                SEDEL.evalFile1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <((SEDEL.PrettyPrint.FDoc, GHC.Base.Maybe SEDEL.PrettyPrint.FDoc),
                                 GHC.Types.Bool)>_R)) -}
9d4efa1199658542db8a1fbe23082c50
  evalFile1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((SEDEL.PrettyPrint.FDoc, GHC.Base.Maybe SEDEL.PrettyPrint.FDoc),
           GHC.Types.Bool) #)
  {- Arity: 2, Strictness: <L,U><S,U> -}
88b927b80bef87985bed4e70eb9378b6
  readAndEval ::
    GHC.IO.FilePath -> GHC.Types.IO SEDEL.PrettyPrint.FDoc
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                SEDEL.readAndEval1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0] <SEDEL.PrettyPrint.FDoc>_R)) -}
ea06a455d839c6a2750a94b5673785c2
  readAndEval1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, SEDEL.PrettyPrint.FDoc #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (path :: GHC.IO.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.catch#
                        @ (Data.Either.Either
                             GHC.Exception.SomeException Data.Text.Internal.Text)
                        @ GHC.Exception.SomeException
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.IO.Handle.FD.openFile1
                                path
                                GHC.IO.IOMode.ReadMode
                                s1 of ds1 { (#,#) ipv ipv1 ->
                         case Data.Text.IO.getContents2 ipv1 ipv of ds2 { (#,#) ipv2 ipv3 ->
                         (# ipv2,
                            Data.Either.Right
                              @ GHC.Exception.SomeException
                              @ Data.Text.Internal.Text
                              ipv3 #) } })
                        SEDEL.readAndEval6
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left err
                   -> (# ipv,
                         Data.Text.Prettyprint.Doc.Internal.Cat
                           @ SEDEL.PrettyPrint.FAnn
                           SEDEL.readAndEval4
                           (Data.Text.Prettyprint.Doc.Internal.Cat
                              @ SEDEL.PrettyPrint.FAnn
                              (Data.Text.Prettyprint.Doc.Internal.line1 @ SEDEL.PrettyPrint.FAnn)
                              (case err of wild1 { GHC.Exception.SomeException e $dException e1 ->
                               case GHC.Show.showsPrec
                                      @ e
                                      (GHC.Exception.$p2Exception @ e $dException)
                                      GHC.Exception.$fExceptionArithException1
                                      e1
                                      (GHC.Types.[] @ GHC.Types.Char) of dt { DEFAULT ->
                               case GHC.Magic.runRW#
                                      @ ('GHC.Types.TupleRep
                                           '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                      @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.Text.Internal.Text #)
                                      (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ GHC.Prim.RealWorld
                                              10#
                                              s1 of ds2 { (#,#) ipv2 ipv3 ->
                                       SEDEL.$wouter
                                         ipv3
                                         4#
                                         dt
                                         0#
                                         ipv2 }) of ds2 { (#,#) ipv2 ipv3 ->
                               case ipv3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                               Data.Text.Prettyprint.Doc.Internal.$w$cpretty
                                 @ SEDEL.PrettyPrint.FAnn
                                 ww1
                                 ww2
                                 ww3 } } } })) #)
                   Data.Either.Right contents
                   -> case SEDEL.Parser.Parser.parseModule
                             (case contents of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                              let {
                                end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                              } in
                              letrec {
                                $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                  {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                = \ (ww :: GHC.Prim.Int#) ->
                                  case GHC.Prim.>=# ww end of lwild {
                                    DEFAULT
                                    -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                                       case GHC.Prim.geWord# r# 55296## of lwild1 {
                                         DEFAULT
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                              ($wunfold (GHC.Prim.+# ww 1#))
                                         1#
                                         -> case GHC.Prim.leWord# r# 56319## of lwild2 {
                                              DEFAULT
                                              -> GHC.Types.:
                                                   @ GHC.Types.Char
                                                   (GHC.Types.C#
                                                      (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                   ($wunfold (GHC.Prim.+# ww 1#))
                                              1#
                                              -> case GHC.Prim.indexWord16Array#
                                                        dt
                                                        (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                                 GHC.Types.:
                                                   @ GHC.Types.Char
                                                   (GHC.Types.C#
                                                      (GHC.Prim.chr#
                                                         (GHC.Prim.+#
                                                            (GHC.Prim.+#
                                                               (GHC.Prim.uncheckedIShiftL#
                                                                  (GHC.Prim.-#
                                                                     (GHC.Prim.word2Int# r#)
                                                                     55296#)
                                                                  10#)
                                                               (GHC.Prim.-#
                                                                  (GHC.Prim.word2Int# r#1)
                                                                  56320#))
                                                            65536#)))
                                                   ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                                    1# -> GHC.Types.[] @ GHC.Types.Char }
                              } in
                              $wunfold dt1 }) of wild1 {
                        Data.Either.Left err
                        -> (# ipv,
                              Data.Text.Prettyprint.Doc.Internal.Cat
                                @ SEDEL.PrettyPrint.FAnn
                                SEDEL.readAndEval2
                                (Data.Text.Prettyprint.Doc.Internal.Cat
                                   @ SEDEL.PrettyPrint.FAnn
                                   (Data.Text.Prettyprint.Doc.Internal.line1
                                      @ SEDEL.PrettyPrint.FAnn)
                                   (Data.Text.Prettyprint.Doc.Internal.$fIsStringDoc_$cfromString
                                      @ SEDEL.PrettyPrint.FAnn
                                      err)) #)
                        Data.Either.Right abt
                        -> case SEDEL.driver1
                                  SEDEL.Environment.emptyCtx
                                  abt
                                  ipv of ds2 { (#,#) ipv2 ipv3 ->
                           case ipv3 of wild2 {
                             Data.Either.Left err -> (# ipv2, err #)
                             Data.Either.Right r -> (# ipv2, SEDEL.render r #) } } } } }) -}
ac31c50f4d435f48a8b6b778f1fe4ff1
  readAndEval2 ::
    Data.Text.Prettyprint.Doc.Internal.Doc SEDEL.PrettyPrint.FAnn
  {- Unfolding: (Data.Text.Prettyprint.Doc.Internal.$fIsStringDoc_$cfromString
                   @ SEDEL.PrettyPrint.FAnn
                   (GHC.CString.unpackCString# SEDEL.readAndEval3)) -}
883a96fb4d1cd28ace79f64451da3cdb
  readAndEval3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Syntax error"#) -}
a21d8c2ef74246de4a79854d6107307b
  readAndEval4 ::
    Data.Text.Prettyprint.Doc.Internal.Doc SEDEL.PrettyPrint.FAnn
  {- Unfolding: (Data.Text.Prettyprint.Doc.Internal.$fIsStringDoc_$cfromString
                   @ SEDEL.PrettyPrint.FAnn
                   (GHC.CString.unpackCString# SEDEL.readAndEval5)) -}
efb737c2880fcf2c9645878541b083c1
  readAndEval5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Load file error"#) -}
30b6b44e87a2367fd56247cdd4421139
  readAndEval6 ::
    GHC.Exception.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Data.Text.Internal.Text #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta1,
                    Data.Either.Left
                      @ GHC.Exception.SomeException
                      @ Data.Text.Internal.Text
                      e1 #)) -}
7463413d0eb42e2bf7c51765a62884ef
  render ::
    (SEDEL.Source.Syntax.SType, Data.Text.Internal.Text)
    -> SEDEL.PrettyPrint.FDoc
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U,U,U))>m7, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (SEDEL.Source.Syntax.SType, Data.Text.Internal.Text)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case SEDEL.$wrender ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 Data.Text.Prettyprint.Doc.Internal.Cat
                   @ SEDEL.PrettyPrint.FAnn
                   ww4
                   ww5 } }) -}
c089cbcabb17951bf5bd59abdbe330da
  render1 ::
    Data.Text.Prettyprint.Doc.Internal.Doc SEDEL.PrettyPrint.FAnn
  {- Unfolding: (Data.Text.Prettyprint.Doc.Internal.$fIsStringDoc_$cfromString
                   @ SEDEL.PrettyPrint.FAnn
                   (GHC.CString.unpackCString# SEDEL.render2)) -}
ef85379a2b5eac7eac3981248337affb
  render2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=>"#) -}
d787290b64d7691bfd52067d8e3c1143
  render3 ::
    Data.Text.Prettyprint.Doc.Internal.Doc SEDEL.PrettyPrint.FAnn
  {- Unfolding: (Data.Text.Prettyprint.Doc.Internal.$fIsStringDoc_$cfromString
                   @ SEDEL.PrettyPrint.FAnn
                   (GHC.CString.unpackCString# SEDEL.render4)) -}
8a6beb960783666faa2b0d6a73d6a9d6
  render4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Evaluation result"#) -}
dc2e273eb929cf9f40618c0dfe06c763
  render5 ::
    Data.Text.Prettyprint.Doc.Internal.Doc SEDEL.PrettyPrint.FAnn
  {- Unfolding: (Data.Text.Prettyprint.Doc.Internal.$fIsStringDoc_$cfromString
                   @ SEDEL.PrettyPrint.FAnn
                   (GHC.CString.unpackCString# SEDEL.render6)) -}
f05a952b73872c44111bdc9544ca54fd
  render6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Typing result"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

