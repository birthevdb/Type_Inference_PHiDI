
==================== FINAL INTERFACE ====================
2019-03-27 11:18:52.035226 UTC

interface sedel-0.1.0.0-AhY9khA6pZOExbzZW5SwDc:SEDEL.PrettyPrint [orphan module] 8063
  interface hash: 91b9f978ddf912ccb3cae00bf515a355
  ABI hash: f1989f434297afaffeb0400ac83369d8
  export-list hash: fc8e469d5c6860b5918a12f67da268d9
  orphan hash: 0693775dc5dd91eda7a8b0e4fa599457
  flag hash: bbf1d09a6f244c80e539913bf0a7bed3
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  SEDEL.PrettyPrint.pprint
  SEDEL.PrettyPrint.D{SEDEL.PrettyPrint.DD SEDEL.PrettyPrint.DS}
  SEDEL.PrettyPrint.FDoc
  SEDEL.PrettyPrint.FPretty{SEDEL.PrettyPrint.ppr}
module dependencies: SEDEL.Common SEDEL.Source.Syntax
package dependencies: array-0.5.3.0 async-2.2.1 base-4.12.0.0
                      base-orphans-0.8 bifunctors-5.5.3 binary-0.8.6.0
                      bytestring-0.10.8.2 comonad-5.0.4 containers-0.6.0.1
                      deepseq-1.4.4.0 distributive-0.6 exceptions-0.10.0
                      ghc-boot-th-8.6.3 ghc-prim-0.5.3 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 megaparsec-7.0.4 mtl-2.2.2
                      parser-combinators-1.0.1 pretty-1.1.3.6 prettyprinter-1.2.1
                      profunctors-5.3 protolude-0.2.3 stm-2.5.0.0 tagged-0.8.6
                      template-haskell-2.14.0.0 text-1.2.3.1 transformers-0.5.5.0
                      unbound-generics-0.4.0
orphans: sedel-0.1.0.0-AhY9khA6pZOExbzZW5SwDc:SEDEL.Source.Syntax
         transformers-0.5.5.0:Control.Monad.Trans.Error
         stm-2.5.0.0:Control.Monad.STM
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         ghc-boot-th-8.6.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.3:GHC.LanguageExtensions.Type
                         megaparsec-7.0.4:Text.Megaparsec.Error
                         megaparsec-7.0.4:Text.Megaparsec.Pos
                         megaparsec-7.0.4:Text.Megaparsec.State
                         megaparsec-7.0.4:Text.Megaparsec.Stream
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         prettyprinter-1.2.1:Data.Text.Prettyprint.Doc.Internal
                         sedel-0.1.0.0-AhY9khA6pZOExbzZW5SwDc:SEDEL.Common
                         sedel-0.1.0.0-AhY9khA6pZOExbzZW5SwDc:SEDEL.Source.Syntax
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         unbound-generics-0.4.0:Unbound.Generics.LocallyNameless.Bind
                         unbound-generics-0.4.0:Unbound.Generics.LocallyNameless.Embed
                         unbound-generics-0.4.0:Unbound.Generics.LocallyNameless.Ignore
                         unbound-generics-0.4.0:Unbound.Generics.LocallyNameless.Name
                         unbound-generics-0.4.0:Unbound.Generics.LocallyNameless.Rebind
                         unbound-generics-0.4.0:Unbound.Generics.LocallyNameless.Rec
                         unbound-generics-0.4.0:Unbound.Generics.LocallyNameless.Shift
import  -/  base-4.12.0.0:Data.Functor 22aac80fdb6c7b7f60b4aaab86afee64
import  -/  base-4.12.0.0:Data.List ce2c69da408fdc014383cede9e1f9adf
import  -/  base-4.12.0.0:Data.OldList c2cab40fed7d27b5e717779f9a3c09ea
import  -/  base-4.12.0.0:Data.Traversable 257e9f3b6739f5bfbaaf0ac0abb0ddc5
import  -/  base-4.12.0.0:Data.Tuple c92a835d04b6c075a7031d4e28e53c71
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.List 734a72beb76d276fb4a0ba2689a5711f
import  -/  megaparsec-7.0.4:Text.Megaparsec b1d8d167d8e2d184f840d7f8cf436244
import  -/  megaparsec-7.0.4:Text.Megaparsec.Pos 571c263c2d6d71cb16ac08411e89b660
import  -/  prettyprinter-1.2.1:Data.Text.Prettyprint.Doc 37bebc045f3a0cb8e8977c181970ecaf
import  -/  prettyprinter-1.2.1:Data.Text.Prettyprint.Doc.Internal 12d379fe6b8bbcab8bffc2d86df0e72f
import  -/  prettyprinter-1.2.1:Data.Text.Prettyprint.Doc.Symbols.Ascii 91602a77e9f9b3606b529aea701ac155
import  -/  protolude-0.2.3:Protolude f69a0445642f255f4ede68732259560a
import  -/  SEDEL.Common dd957746dc264eb9e0f081197e6a170a
  exports: 2f8960fc3866b3ed3935cca8fdf4af32
  Add 7b5689630bb805d45c2d9b7c91a94aa7
  Arith ba6e6ee2769ab90fc6f8bfe05c457547
  ArithOp 0aaa00a153eb626e5d21bd1750de97e0
  Comp 95be31892a65ce02162c0359b2fd7836
  CompOp bd4dc882484487a657a98a54325b8d8c
  Div 9d90e9fa046956310d732e8eb846ddaa
  Equ be009671f59de591c88946764f695cd4
  Gt be31fcc4422ad1046b7cadef42d4a00a
  LAnd 76e1d65d2c4efb84dfc892b6876887fc
  LOr 3d9fb39352f5a35a5a2f3fb33be00346
  Logical 5f88c0dcda3f0bb8a2151f64e886bf39
  LogicalOp 5c34a69eb46fb1dc1aa1cd93ac73660a
  Lt d3b4077c262575c1c54e4e55843feca5
  Mul dbcecb52257f0e0de6cdb3f840d576b0
  Neq 2a26dcc2307ec55211eb17750235a9c5
  Operation 0aaa00a153eb626e5d21bd1750de97e0
  Sub 10f07d4be3387d45df0fd4398e7b0df1
import  -/  SEDEL.Source.Syntax 2df5c51304ce3d5073c843cca574c67e
  exports: d4d2fd645eff9adcf509b28019caf96b
  And 858cda1fbe6f64a52489f771e0708139
  App 2c964fefc28aabf42ed9dbe40c3accd3
  Arr 22416be279c31386e9cc95e9c9b2de68
  BoolT 9eb5ff7582ee586b5677d133bc3c5a82
  BoolV d7377f24937105ba95ef7593def4f4bf
  BotT e9fc1220c215208a25f3ef509fa1d4c0
  DForall 3b7d6b5afb57e716755254c1449edcb0
  DRec 67d90dc5830827b93ce062be4b2fee0f
  DRec' 4cfdae78935e00e853289c18a1ad3519
  Expr 76520494bd75ab62670e86072668ba13
  If 004baac8f2ab270853994d5c063473ee
  Join a4919cbd9c43f86a7e132f12d2cdc38f
  KArrow ab6b07ec960f55f29ed70160815055d1
  Kind 76520494bd75ab62670e86072668ba13
  Lam 89716123ec809e2cc8bdc155ae4f4668
  Let eef6e727cd3f41679ad959a78238d920
  LitV bd5053bd7f79e6c004652065acad3370
  Meet b52f57d57eb5f073ea5cb7b7cef99237
  Merge bfed41bbda08db4fffae7c43cde3fe30
  NumT adf11e6708e5e8a7ec46f283d84a97ad
  Pos e1abba9e1a944fd21252fe9a5857484c
  PrimOp 75d0f502551fe7e315ae75fc195bd1b1
  Proj 6a5a97deaf11de74c15ccfb48a027d1d
  SRecT 9b864ff12762d70109c77b1f5eea4c3a
  SType a5fd2e9b5e852c36afadad4c1a615a65
  SType 76520494bd75ab62670e86072668ba13
  Scheme 76520494bd75ab62670e86072668ba13
  Star fd95d747935c5574b8df46154b9b35c7
  TUni 9eb22e5d95f0de04502f16ea4eb97bf9
  TVar 3e45bba34d2b60ad4b6a831b8a2e52f8
  Top 072bc63b13d03508f9113d1a45bc6153
  TopT 1b95963f14ca91731abc40c7b31bb3cf
  Var 6d082d2f0a5af10d8ab316bafa598eed
import  -/  unbound-generics-0.4.0:Unbound.Generics.LocallyNameless 36704d4dbfb3fb22f46cde363ae796f2
import  -/  unbound-generics-0.4.0:Unbound.Generics.LocallyNameless.Embed f74cff3aea20e9a2f5e6bfc539a9689b
import  -/  unbound-generics-0.4.0:Unbound.Generics.LocallyNameless.LFresh 7a8ae21a433faccc530c0e3a85d0c972
import  -/  unbound-generics-0.4.0:Unbound.Generics.LocallyNameless.Operations d0c219408974b95413509bf76023577c
b3792b8f3b952cae1eba0f731312b4ce
  $fFPrettyArithOp :: SEDEL.PrettyPrint.FPretty SEDEL.Common.ArithOp
  DFunId
  {- Arity: 3,
     Strictness: <L,A><S(S(LLLC(S)L)LLL),1*U(1*U(A,A,A,1*C1(U),A),A,A,A)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                SEDEL.PrettyPrint.$fFPrettyArithOp_$cppr
                  `cast`
                (Sym (SEDEL.PrettyPrint.N:FPretty[0] <SEDEL.Common.ArithOp>_N)) -}
2c3fd6faa52ceaa30eb2ae0583cae9b8
  $fFPrettyArithOp1 ::
    Data.Text.Prettyprint.Doc.Internal.Doc SEDEL.PrettyPrint.FAnn
  {- Unfolding: (Data.Text.Prettyprint.Doc.Internal.$fIsStringDoc_$cfromString
                   @ SEDEL.PrettyPrint.FAnn
                   (GHC.CString.unpackCString#
                      SEDEL.PrettyPrint.$fFPrettyArithOp2)) -}
8fac0bedb60e01f4349f0fe93b8396a1
  $fFPrettyArithOp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/"#) -}
4f3c9b3f57c8d02ade1ff2a2d4834cd5
  $fFPrettyArithOp3 ::
    Data.Text.Prettyprint.Doc.Internal.Doc SEDEL.PrettyPrint.FAnn
  {- Unfolding: (Data.Text.Prettyprint.Doc.Internal.$fIsStringDoc_$cfromString
                   @ SEDEL.PrettyPrint.FAnn
                   (GHC.CString.unpackCString#
                      SEDEL.PrettyPrint.$fFPrettyArithOp4)) -}
1368c3fb7139dd91b54129685a99031b
  $fFPrettyArithOp4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("*"#) -}
506d6cc7d3adaea95b8ce9953e3ca3c5
  $fFPrettyArithOp5 ::
    Data.Text.Prettyprint.Doc.Internal.Doc SEDEL.PrettyPrint.FAnn
  {- Unfolding: (Data.Text.Prettyprint.Doc.Internal.$fIsStringDoc_$cfromString
                   @ SEDEL.PrettyPrint.FAnn
                   (GHC.CString.unpackCString#
                      SEDEL.PrettyPrint.$fFPrettyArithOp6)) -}
7e35281ffe23025ba9c25203c1f4d05e
  $fFPrettyArithOp6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("-"#) -}
fe1140c47bcf379788249dc43c0de42c
  $fFPrettyArithOp7 ::
    Data.Text.Prettyprint.Doc.Internal.Doc SEDEL.PrettyPrint.FAnn
  {- Unfolding: (Data.Text.Prettyprint.Doc.Internal.$fIsStringDoc_$cfromString
                   @ SEDEL.PrettyPrint.FAnn
                   (GHC.CString.unpackCString#
                      SEDEL.PrettyPrint.$fFPrettyArithOp8)) -}
32944c8f7a32c262889e66fb9a9d6ed5
  $fFPrettyArithOp8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("+"#) -}
2ed2ed8697816e00cdad8e63fbcba933
  $fFPrettyArithOp_$cppr ::
    (GHC.Base.Applicative m,
     Unbound.Generics.LocallyNameless.LFresh.LFresh m) =>
    SEDEL.Common.ArithOp -> m SEDEL.PrettyPrint.FDoc
  {- Arity: 3,
     Strictness: <L,A><S(S(LLLC(S)L)LLL),1*U(1*U(A,A,A,1*C1(U),A),A,A,A)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Applicative m)
                   (w1 :: Unbound.Generics.LocallyNameless.LFresh.LFresh m)
                   (w2 :: SEDEL.Common.ArithOp) ->
                 case w1 of ww { Unbound.Generics.LocallyNameless.LFresh.C:LFresh ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 SEDEL.PrettyPrint.$w$cppr @ m ww9 w2 } }) -}
b3792b8f3b952cae1eba0f731312b4ce
  $fFPrettyCompOp :: SEDEL.PrettyPrint.FPretty SEDEL.Common.CompOp
  DFunId
  {- Arity: 3,
     Strictness: <L,A><S(S(LLLC(S)L)LLL),1*U(1*U(A,A,A,1*C1(U),A),A,A,A)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                SEDEL.PrettyPrint.$fFPrettyCompOp_$cppr
                  `cast`
                (Sym (SEDEL.PrettyPrint.N:FPretty[0] <SEDEL.Common.CompOp>_N)) -}
022becc9f837c8840242ca056e45b6ee
  $fFPrettyCompOp1 ::
    Data.Text.Prettyprint.Doc.Internal.Doc SEDEL.PrettyPrint.FAnn
  {- Unfolding: (Data.Text.Prettyprint.Doc.Internal.$fIsStringDoc_$cfromString
                   @ SEDEL.PrettyPrint.FAnn
                   (GHC.CString.unpackCString# SEDEL.PrettyPrint.$fFPrettyCompOp2)) -}
7e06822f0c90bbc5bd6b219d9d9cb8ef
  $fFPrettyCompOp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("!="#) -}
a981c7bad562788df3ee27eb32e2eebd
  $fFPrettyCompOp3 ::
    Data.Text.Prettyprint.Doc.Internal.Doc SEDEL.PrettyPrint.FAnn
  {- Unfolding: (Data.Text.Prettyprint.Doc.Internal.$fIsStringDoc_$cfromString
                   @ SEDEL.PrettyPrint.FAnn
                   (GHC.CString.unpackCString# SEDEL.PrettyPrint.$fFPrettyCompOp4)) -}
c256f92bfb7f0e6f9926403bbfea696f
  $fFPrettyCompOp4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=="#) -}
040ad07d9e34a9dc68d64aae4426e33c
  $fFPrettyCompOp5 ::
    Data.Text.Prettyprint.Doc.Internal.Doc SEDEL.PrettyPrint.FAnn
  {- Unfolding: (Data.Text.Prettyprint.Doc.Internal.$fIsStringDoc_$cfromString
                   @ SEDEL.PrettyPrint.FAnn
                   (GHC.CString.unpackCString# SEDEL.PrettyPrint.$fFPrettyCompOp6)) -}
394afbcbd41623bee1d6e171e7490750
  $fFPrettyCompOp6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (">"#) -}
f5a9f6be49a8a096e50ef055e49e8e65
  $fFPrettyCompOp7 ::
    Data.Text.Prettyprint.Doc.Internal.Doc SEDEL.PrettyPrint.FAnn
  {- Unfolding: (Data.Text.Prettyprint.Doc.Internal.$fIsStringDoc_$cfromString
                   @ SEDEL.PrettyPrint.FAnn
                   (GHC.CString.unpackCString# SEDEL.PrettyPrint.$fFPrettyCompOp8)) -}
3b008c8c7672abcd7133e8826460f825
  $fFPrettyCompOp8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<"#) -}
5ebf845a708b5b8f22dcca251b4fb714
  $fFPrettyCompOp_$cppr ::
    (GHC.Base.Applicative m,
     Unbound.Generics.LocallyNameless.LFresh.LFresh m) =>
    SEDEL.Common.CompOp -> m SEDEL.PrettyPrint.FDoc
  {- Arity: 3,
     Strictness: <L,A><S(S(LLLC(S)L)LLL),1*U(1*U(A,A,A,1*C1(U),A),A,A,A)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Applicative m)
                   (w1 :: Unbound.Generics.LocallyNameless.LFresh.LFresh m)
                   (w2 :: SEDEL.Common.CompOp) ->
                 case w1 of ww { Unbound.Generics.LocallyNameless.LFresh.C:LFresh ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 SEDEL.PrettyPrint.$w$cppr1 @ m ww9 w2 } }) -}
b3792b8f3b952cae1eba0f731312b4ce
  $fFPrettyD :: SEDEL.PrettyPrint.FPretty SEDEL.PrettyPrint.D
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(U(U,U,U,U,U),U,U,U)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                SEDEL.PrettyPrint.$fFPrettyD_$cppr
                  `cast`
                (Sym (SEDEL.PrettyPrint.N:FPretty[0] <SEDEL.PrettyPrint.D>_N)) -}
b3792b8f3b952cae1eba0f731312b4ce
  $fFPrettyD_$cppr ::
    (GHC.Base.Applicative m,
     Unbound.Generics.LocallyNameless.LFresh.LFresh m) =>
    SEDEL.PrettyPrint.D -> m SEDEL.PrettyPrint.FDoc
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(U(U,U,U,U,U),U,U,U)><S,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Applicative m)
                   (w1 :: Unbound.Generics.LocallyNameless.LFresh.LFresh m)
                   (w2 :: SEDEL.PrettyPrint.D) ->
                 SEDEL.PrettyPrint.$w$cppr2 @ m w1 w2) -}
b3792b8f3b952cae1eba0f731312b4ce
  $fFPrettyExpr :: SEDEL.PrettyPrint.FPretty SEDEL.Source.Syntax.Expr
  DFunId
  {- Arity: 2,
     Strictness: <L,A><L,U(U(A,C(C1(U)),A,C(U),A),C(C1(U)),C(C1(U)),A)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                SEDEL.PrettyPrint.$fFPrettyExpr_$cppr
                  `cast`
                (Sym (SEDEL.PrettyPrint.N:FPretty[0]
                          <SEDEL.Source.Syntax.Expr>_N)) -}
c56221fa5650b1473c7ff3442a9ac4cf
  $fFPrettyExpr_$cppr ::
    (GHC.Base.Applicative m,
     Unbound.Generics.LocallyNameless.LFresh.LFresh m) =>
    SEDEL.Source.Syntax.Expr -> m SEDEL.PrettyPrint.FDoc
  {- Arity: 2,
     Strictness: <L,A><L,U(U(A,C(C1(U)),A,C(U),A),C(C1(U)),C(C1(U)),A)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, True)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Applicative m)
                   (w1 :: Unbound.Generics.LocallyNameless.LFresh.LFresh m) ->
                 SEDEL.PrettyPrint.$w$cppr3 @ m w1) -}
b3792b8f3b952cae1eba0f731312b4ce
  $fFPrettyKind :: SEDEL.PrettyPrint.FPretty SEDEL.Source.Syntax.Kind
  DFunId
  {- Arity: 3,
     Strictness: <L,A><S(SLLL),1*U(1*U(A,C(C1(U)),A,C(U),A),A,A,A)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                SEDEL.PrettyPrint.$fFPrettyKind_$cppr
                  `cast`
                (Sym (SEDEL.PrettyPrint.N:FPretty[0]
                          <SEDEL.Source.Syntax.Kind>_N)) -}
afdcd74a9992ac82c87b73b6ac38e5d9
  $fFPrettyKind_$cppr ::
    (GHC.Base.Applicative m,
     Unbound.Generics.LocallyNameless.LFresh.LFresh m) =>
    SEDEL.Source.Syntax.Kind -> m SEDEL.PrettyPrint.FDoc
  {- Arity: 3,
     Strictness: <L,A><S(SLLL),1*U(1*U(A,C(C1(U)),A,C(U),A),A,A,A)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Applicative m)
                   (w1 :: Unbound.Generics.LocallyNameless.LFresh.LFresh m)
                   (w2 :: SEDEL.Source.Syntax.Kind) ->
                 case w1 of ww { Unbound.Generics.LocallyNameless.LFresh.C:LFresh ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 SEDEL.PrettyPrint.$w$cppr4 @ m ww7 ww9 w2 } }) -}
b3792b8f3b952cae1eba0f731312b4ce
  $fFPrettyLogicalOp ::
    SEDEL.PrettyPrint.FPretty SEDEL.Common.LogicalOp
  DFunId
  {- Arity: 3,
     Strictness: <L,A><S(S(LLLC(S)L)LLL),1*U(1*U(A,A,A,1*C1(U),A),A,A,A)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                SEDEL.PrettyPrint.$fFPrettyLogicalOp_$cppr
                  `cast`
                (Sym (SEDEL.PrettyPrint.N:FPretty[0]
                          <SEDEL.Common.LogicalOp>_N)) -}
d0191c1fbca97122f698672fa20473c2
  $fFPrettyLogicalOp1 ::
    Data.Text.Prettyprint.Doc.Internal.Doc SEDEL.PrettyPrint.FAnn
  {- Unfolding: (Data.Text.Prettyprint.Doc.Internal.$fIsStringDoc_$cfromString
                   @ SEDEL.PrettyPrint.FAnn
                   (GHC.CString.unpackCString#
                      SEDEL.PrettyPrint.$fFPrettyLogicalOp2)) -}
f0f7bd03c7617f978464d50dbbb1477a
  $fFPrettyLogicalOp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("||"#) -}
d6b7261b2061d18860170d06c365fab5
  $fFPrettyLogicalOp3 ::
    Data.Text.Prettyprint.Doc.Internal.Doc SEDEL.PrettyPrint.FAnn
  {- Unfolding: (Data.Text.Prettyprint.Doc.Internal.$fIsStringDoc_$cfromString
                   @ SEDEL.PrettyPrint.FAnn
                   (GHC.CString.unpackCString#
                      SEDEL.PrettyPrint.$fFPrettyLogicalOp4)) -}
d90ca62aa4db5c7c8270ffd6113cf1e5
  $fFPrettyLogicalOp4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("&&"#) -}
1836952b7bdf833c44b87ea2f8fe41dd
  $fFPrettyLogicalOp_$cppr ::
    (GHC.Base.Applicative m,
     Unbound.Generics.LocallyNameless.LFresh.LFresh m) =>
    SEDEL.Common.LogicalOp -> m SEDEL.PrettyPrint.FDoc
  {- Arity: 3,
     Strictness: <L,A><S(S(LLLC(S)L)LLL),1*U(1*U(A,A,A,1*C1(U),A),A,A,A)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Applicative m)
                   (w1 :: Unbound.Generics.LocallyNameless.LFresh.LFresh m)
                   (w2 :: SEDEL.Common.LogicalOp) ->
                 case w1 of ww { Unbound.Generics.LocallyNameless.LFresh.C:LFresh ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 SEDEL.PrettyPrint.$w$cppr5 @ m ww9 w2 } }) -}
b3792b8f3b952cae1eba0f731312b4ce
  $fFPrettyOperation ::
    SEDEL.PrettyPrint.FPretty SEDEL.Common.Operation
  DFunId
  {- Arity: 3,
     Strictness: <L,A><S(S(LLLC(S)L)LLL),1*U(1*U(A,A,A,1*C1(U),A),A,A,A)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                SEDEL.PrettyPrint.$fFPrettyOperation_$cppr
                  `cast`
                (Sym (SEDEL.PrettyPrint.N:FPretty[0]
                          <SEDEL.Common.Operation>_N)) -}
5827926a2141162f098702aa532f31f1
  $fFPrettyOperation_$cppr ::
    (GHC.Base.Applicative m,
     Unbound.Generics.LocallyNameless.LFresh.LFresh m) =>
    SEDEL.Common.Operation -> m SEDEL.PrettyPrint.FDoc
  {- Arity: 3,
     Strictness: <L,A><S(S(LLLC(S)L)LLL),1*U(1*U(A,A,A,1*C1(U),A),A,A,A)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Applicative m)
                   (w1 :: Unbound.Generics.LocallyNameless.LFresh.LFresh m)
                   (w2 :: SEDEL.Common.Operation) ->
                 case w1 of ww { Unbound.Generics.LocallyNameless.LFresh.C:LFresh ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 SEDEL.PrettyPrint.$w$cppr6 @ m ww9 w2 } }) -}
b3792b8f3b952cae1eba0f731312b4ce
  $fFPrettySType ::
    SEDEL.PrettyPrint.FPretty SEDEL.Source.Syntax.SType
  DFunId
  {- Arity: 3,
     Strictness: <L,A><S(SLLL),1*U(1*U(A,C(C1(U)),A,C(U),A),A,A,A)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                SEDEL.PrettyPrint.$fFPrettySType_$cppr
                  `cast`
                (Sym (SEDEL.PrettyPrint.N:FPretty[0]
                          <SEDEL.Source.Syntax.SType>_N)) -}
cdca44adecff66916efe25396c64796c
  $fFPrettySType_$cppr ::
    (GHC.Base.Applicative m,
     Unbound.Generics.LocallyNameless.LFresh.LFresh m) =>
    SEDEL.Source.Syntax.SType -> m SEDEL.PrettyPrint.FDoc
  {- Arity: 3,
     Strictness: <L,A><S(SLLL),1*U(1*U(A,C(C1(U)),A,C(U),A),A,A,A)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Applicative m)
                   (w1 :: Unbound.Generics.LocallyNameless.LFresh.LFresh m)
                   (w2 :: SEDEL.Source.Syntax.SType) ->
                 case w1 of ww { Unbound.Generics.LocallyNameless.LFresh.C:LFresh ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 SEDEL.PrettyPrint.$w$cppr7 @ m ww7 ww9 w2 } }) -}
b3792b8f3b952cae1eba0f731312b4ce
  $fFPrettyScheme ::
    SEDEL.PrettyPrint.FPretty SEDEL.Source.Syntax.Scheme
  DFunId
  {- Arity: 3,
     Strictness: <L,A><S(SLLL),1*U(1*U(A,C(C1(U)),A,C(U),A),C(C1(U)),C(C1(U)),A)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                SEDEL.PrettyPrint.$fFPrettyScheme_$cppr
                  `cast`
                (Sym (SEDEL.PrettyPrint.N:FPretty[0]
                          <SEDEL.Source.Syntax.Scheme>_N)) -}
a91aabf96b0f9e608981844bcecad958
  $fFPrettyScheme_$cppr ::
    (GHC.Base.Applicative m,
     Unbound.Generics.LocallyNameless.LFresh.LFresh m) =>
    SEDEL.Source.Syntax.Scheme -> m SEDEL.PrettyPrint.FDoc
  {- Arity: 3,
     Strictness: <L,A><S(SLLL),1*U(1*U(A,C(C1(U)),A,C(U),A),C(C1(U)),C(C1(U)),A)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Applicative m)
                   (w1 :: Unbound.Generics.LocallyNameless.LFresh.LFresh m)
                   (w2 :: SEDEL.Source.Syntax.Scheme) ->
                 case w1 of ww { Unbound.Generics.LocallyNameless.LFresh.C:LFresh ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 SEDEL.PrettyPrint.$w$cppr8 @ m ww7 ww9 ww2 ww3 w2 } }) -}
b3792b8f3b952cae1eba0f731312b4ce
  $fFPretty[] :: SEDEL.PrettyPrint.FPretty [SEDEL.PrettyPrint.D]
  DFunId
  {- Arity: 3,
     Strictness: <S(S(C(C(S))L)LLLLL),1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A)><L,U(U(U(U,U,U,U,U,U),U,U,U,U),U,U,U)><L,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                SEDEL.PrettyPrint.$fFPretty[]_$cppr
                  `cast`
                (Sym (SEDEL.PrettyPrint.N:FPretty[0] <[SEDEL.PrettyPrint.D]>_N)) -}
b3792b8f3b952cae1eba0f731312b4ce
  $fFPretty[]_$cppr ::
    (GHC.Base.Applicative m,
     Unbound.Generics.LocallyNameless.LFresh.LFresh m) =>
    [SEDEL.PrettyPrint.D] -> m SEDEL.PrettyPrint.FDoc
  {- Arity: 3,
     Strictness: <S(S(C(C(S))L)LLLLL),1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A)><L,U(U(U(U,U,U,U,U,U),U,U,U,U),U,U,U)><L,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Applicative m)
                   (w1 :: Unbound.Generics.LocallyNameless.LFresh.LFresh m)
                   (w2 :: [SEDEL.PrettyPrint.D]) ->
                 case w of ww { GHC.Base.C:Applicative ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww1 of ww7 { GHC.Base.C:Functor ww8 ww9 ->
                 SEDEL.PrettyPrint.$w$cppr9 @ m ww8 w1 w2 } }) -}
2892c08a8315c72378617c6a897c7fb2
  $fPrettySourcePos ::
    Data.Text.Prettyprint.Doc.Internal.Pretty
      Text.Megaparsec.Pos.SourcePos
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Text.Megaparsec.Pos.SourcePos
                  SEDEL.PrettyPrint.$fPrettySourcePos_$cpretty
                  SEDEL.PrettyPrint.$fPrettySourcePos_$cprettyList -}
040fdf69f77bc81024486c655eeddbeb
  $fPrettySourcePos_$cpretty ::
    Text.Megaparsec.Pos.SourcePos
    -> Data.Text.Prettyprint.Doc.Internal.Doc ann
  {- Arity: 1, Strictness: <S,1*U(A,U,U)>m7,
     Unfolding: InlineRule (1, True, False)
                (\ @ ann (ds :: Text.Megaparsec.Pos.SourcePos) ->
                 case ds of wild { Text.Megaparsec.Pos.SourcePos ds1 dt dt1 ->
                 Data.Text.Prettyprint.Doc.Internal.Cat
                   @ ann
                   (Data.Text.Prettyprint.Doc.Internal.$w$cpretty5 @ ann dt)
                   (Data.Text.Prettyprint.Doc.Internal.Cat
                      @ ann
                      (Data.Text.Prettyprint.Doc.Symbols.Ascii.colon @ ann)
                      (Data.Text.Prettyprint.Doc.Internal.Cat
                         @ ann
                         (Data.Text.Prettyprint.Doc.Internal.$w$cpretty5 @ ann dt1)
                         (Data.Text.Prettyprint.Doc.Symbols.Ascii.colon @ ann))) }) -}
a80da18ff6dcc4111a3059790eff5c2a
  $fPrettySourcePos_$cprettyList ::
    [Text.Megaparsec.Pos.SourcePos]
    -> Data.Text.Prettyprint.Doc.Internal.Doc ann
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ ann (x4 :: [Text.Megaparsec.Pos.SourcePos]) ->
                 Data.Text.Prettyprint.Doc.Internal.list
                   @ ann
                   (GHC.Base.build
                      @ (Data.Text.Prettyprint.Doc.Internal.Doc ann)
                      (\ @ b1
                         (c :: Data.Text.Prettyprint.Doc.Internal.Doc ann
                               -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ Text.Megaparsec.Pos.SourcePos
                         @ b1
                         (GHC.Base.mapFB
                            @ (Data.Text.Prettyprint.Doc.Internal.Doc ann)
                            @ b1
                            @ Text.Megaparsec.Pos.SourcePos
                            c
                            (SEDEL.PrettyPrint.$fPrettySourcePos_$cpretty @ ann))
                         n
                         x4))) -}
d39d7ee6ea002e3f67f2b89826819e40
  $s$fApplicativeLFreshMT ::
    GHC.Base.Applicative
      (Unbound.Generics.LocallyNameless.LFresh.LFreshMT
         Data.Functor.Identity.Identity)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Unbound.Generics.LocallyNameless.LFresh.LFreshMT
                       Data.Functor.Identity.Identity)
                  SEDEL.PrettyPrint.$s$fApplicativeLFreshMT_$s$fFunctorLFreshMT
                  (\ @ a
                     (x4 :: a)
                     (ds :: Data.Set.Internal.Set
                              Unbound.Generics.LocallyNameless.Name.AnyName) ->
                   x4)
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R (<Data.Set.Internal.Set
                            Unbound.Generics.LocallyNameless.Name.AnyName>_R
                         ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                       <a>_R)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                           <*>_N
                                                           <Data.Set.Internal.Set
                                                              Unbound.Generics.LocallyNameless.Name.AnyName>_R
                                                           <Data.Functor.Identity.Identity>_R
                                                           <a>_N) ; Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <a>_N))
                  (SEDEL.PrettyPrint.$s$fApplicativeLFreshMT_$s$fApplicativeReaderT_$c<*>
                     @ (Data.Set.Internal.Set
                          Unbound.Generics.LocallyNameless.Name.AnyName))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <a
                                                                                                                   -> b>_N
                   ->_R Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <a>_N
                   ->_R Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <b>_N)
                  (\ @ a @ b @ c ->
                   Control.Monad.Trans.Reader.$fApplicativeReaderT_$cliftA2
                     @ Data.Functor.Identity.Identity
                     @ (Data.Set.Internal.Set
                          Unbound.Generics.LocallyNameless.Name.AnyName)
                     Data.Functor.Identity.$fApplicativeIdentity
                     @ a
                     @ b
                     @ c)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <a>_N
                   ->_R Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <b>_N
                   ->_R Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <c>_N)
                  (SEDEL.PrettyPrint.$s$fApplicativeLFreshMT_$s$fApplicativeReaderT_$c*>
                     @ (Data.Set.Internal.Set
                          Unbound.Generics.LocallyNameless.Name.AnyName))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <a>_N
                   ->_R Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <b>_N
                   ->_R Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <b>_N)
                  (SEDEL.PrettyPrint.$s$fApplicativeLFreshMT_$s$fApplicativeReaderT_$c<*
                     @ (Data.Set.Internal.Set
                          Unbound.Generics.LocallyNameless.Name.AnyName))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <a>_N
                   ->_R Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <b>_N
                   ->_R Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <a>_N) -}
4f18baa2a32e23f26664f794386ce844
  $s$fApplicativeLFreshMT_$s$fApplicativeReaderT_$c*> ::
    Control.Monad.Trans.Reader.ReaderT
      r Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.Reader.ReaderT
         r Data.Functor.Identity.Identity b
    -> Control.Monad.Trans.Reader.ReaderT
         r Data.Functor.Identity.Identity b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                (\ @ r
                   @ a
                   @ b
                   (u :: Control.Monad.Trans.Reader.ReaderT
                           r Data.Functor.Identity.Identity a)
                   (v :: Control.Monad.Trans.Reader.ReaderT
                           r Data.Functor.Identity.Identity b)
                   (r1 :: r) ->
                 v `cast`
                 (Control.Monad.Trans.Reader.N:ReaderT[0]
                      <*>_N <r>_R <Data.Functor.Identity.Identity>_R <b>_N)
                   r1)
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT
                    r Data.Functor.Identity.Identity a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r Data.Functor.Identity.Identity b>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N <r>_R <Data.Functor.Identity.Identity>_R <b>_N)) -}
f5565f0a01128b7dee7c8a0c0e69d036
  $s$fApplicativeLFreshMT_$s$fApplicativeReaderT_$c<* ::
    Control.Monad.Trans.Reader.ReaderT
      r Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.Reader.ReaderT
         r Data.Functor.Identity.Identity b
    -> Control.Monad.Trans.Reader.ReaderT
         r Data.Functor.Identity.Identity a
  {- Arity: 3, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                (\ @ r
                   @ a
                   @ b
                   (u :: Control.Monad.Trans.Reader.ReaderT
                           r Data.Functor.Identity.Identity a)
                   (v :: Control.Monad.Trans.Reader.ReaderT
                           r Data.Functor.Identity.Identity b)
                   (r1 :: r) ->
                 u `cast`
                 (Control.Monad.Trans.Reader.N:ReaderT[0]
                      <*>_N <r>_R <Data.Functor.Identity.Identity>_R <a>_N)
                   r1)
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT
                    r Data.Functor.Identity.Identity a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r Data.Functor.Identity.Identity b>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N <r>_R <Data.Functor.Identity.Identity>_R <a>_N)) -}
52b2771cc3af9c244121615bfea23da5
  $s$fApplicativeLFreshMT_$s$fApplicativeReaderT_$c<*> ::
    Control.Monad.Trans.Reader.ReaderT
      r Data.Functor.Identity.Identity (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT
         r Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.Reader.ReaderT
         r Data.Functor.Identity.Identity b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,1*C1(U)><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f :: Control.Monad.Trans.Reader.ReaderT
                           r Data.Functor.Identity.Identity (a -> b))
                   (v :: Control.Monad.Trans.Reader.ReaderT
                           r Data.Functor.Identity.Identity a)
                   (r1 :: r) ->
                 (f `cast`
                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                       <*>_N <r>_R <Data.Functor.Identity.Identity>_R <a -> b>_N)
                    r1)
                   `cast`
                 (Data.Functor.Identity.N:Identity[0]
                      (Sym (Data.Functor.Identity.N:Identity[0] <a>_R)
                       ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R)))
                   (v `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <*>_N <r>_R <Data.Functor.Identity.Identity>_R <a>_N)
                      r1))
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT
                    r Data.Functor.Identity.Identity (a -> b)>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r Data.Functor.Identity.Identity a>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N <r>_R <Data.Functor.Identity.Identity>_R <b>_N)) -}
24e83ff715553bc0a00bc921439a0bdf
  $s$fApplicativeLFreshMT_$s$fFunctorLFreshMT ::
    GHC.Base.Functor
      (Unbound.Generics.LocallyNameless.LFresh.LFreshMT
         Data.Functor.Identity.Identity)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Unbound.Generics.LocallyNameless.LFresh.LFreshMT
                       Data.Functor.Identity.Identity)
                  (SEDEL.PrettyPrint.$s$fApplicativeLFreshMT_$s$fFunctorReaderT_$cfmap
                     @ (Data.Set.Internal.Set
                          Unbound.Generics.LocallyNameless.Name.AnyName))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <a>_N
                   ->_R Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <b>_N)
                  (SEDEL.PrettyPrint.$s$fApplicativeLFreshMT_$s$fFunctorReaderT_$c<$
                     @ (Data.Set.Internal.Set
                          Unbound.Generics.LocallyNameless.Name.AnyName))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <b>_N
                   ->_R Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <a>_N) -}
eee3eee4ed86f53ba316790cd81a2313
  $s$fApplicativeLFreshMT_$s$fFunctorReaderT_$c<$ ::
    a
    -> Control.Monad.Trans.Reader.ReaderT
         r Data.Functor.Identity.Identity b
    -> Control.Monad.Trans.Reader.ReaderT
         r Data.Functor.Identity.Identity a
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,A><L,A>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                (\ @ r
                   @ a
                   @ b
                   (x4 :: a)
                   (v :: Control.Monad.Trans.Reader.ReaderT
                           r Data.Functor.Identity.Identity b)
                   (x5 :: r) ->
                 x4)
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r Data.Functor.Identity.Identity b>_R
                 ->_R (<r>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <a>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N
                                                        <r>_R
                                                        <Data.Functor.Identity.Identity>_R
                                                        <a>_N)) -}
50ca2edeb30846be6c479145ce993fe4
  $s$fApplicativeLFreshMT_$s$fFunctorReaderT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT
         r Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.Reader.ReaderT
         r Data.Functor.Identity.Identity b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ r @ a @ b (f :: a -> b) ->
                 Control.Monad.Trans.Reader.mapReaderT
                   @ *
                   @ *
                   @ Data.Functor.Identity.Identity
                   @ a
                   @ Data.Functor.Identity.Identity
                   @ b
                   @ r
                   f `cast`
                   (Sym (Data.Functor.Identity.N:Identity[0] <a>_R)
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))) -}
e4c682ae5035a5ba9a25dc8fc3bde13e
  $s$fLFreshLFreshMT ::
    Unbound.Generics.LocallyNameless.LFresh.LFresh
      (Unbound.Generics.LocallyNameless.LFresh.LFreshMT
         Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Unbound.Generics.LocallyNameless.LFresh.LFreshMT
                       Data.Functor.Identity.Identity)
                  SEDEL.PrettyPrint.$s$fLFreshLFreshMT_$s$fMonadLFreshMT
                  (Unbound.Generics.LocallyNameless.LFresh.$fLFreshLFreshMT1
                     @ Data.Functor.Identity.Identity
                     Data.Functor.Identity.$fMonadIdentity)
                    `cast`
                  (forall (a :: <*>_N).
                   <Data.Typeable.Internal.Typeable a>_R
                   ->_R <Unbound.Generics.LocallyNameless.Name.Name a>_R
                   ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <Data.Set.Internal.Set
                                    Unbound.Generics.LocallyNameless.Name.AnyName>_R
                                 <Data.Functor.Identity.Identity>_R
                                 <Unbound.Generics.LocallyNameless.Name.Name
                                    a>_N) ; Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <Unbound.Generics.LocallyNameless.Name.Name
                                                                                                                                              a>_N)
                  (Unbound.Generics.LocallyNameless.LFresh.$fLFreshLFreshMT_$cavoid
                     @ Data.Functor.Identity.Identity
                     Data.Functor.Identity.$fMonadIdentity)
                  (Data.Functor.Identity.$fApplicativeIdentity3
                     @ (Data.Set.Internal.Set
                          Unbound.Generics.LocallyNameless.Name.AnyName))
                    `cast`
                  ((<Data.Set.Internal.Set
                       Unbound.Generics.LocallyNameless.Name.AnyName>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                  <Data.Set.Internal.Set
                                     Unbound.Generics.LocallyNameless.Name.AnyName>_R)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                    <*>_N
                                                                                                    <Data.Set.Internal.Set
                                                                                                       Unbound.Generics.LocallyNameless.Name.AnyName>_R
                                                                                                    <Data.Functor.Identity.Identity>_R
                                                                                                    <Data.Set.Internal.Set
                                                                                                       Unbound.Generics.LocallyNameless.Name.AnyName>_N) ; Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <Data.Set.Internal.Set
                                                                                                                                                                                                                                                             Unbound.Generics.LocallyNameless.Name.AnyName>_N)) -}
e8eaec353aed284c2fcc60619ba192d0
  $s$fLFreshLFreshMT_$cavoid ::
    [Unbound.Generics.LocallyNameless.Name.AnyName]
    -> Unbound.Generics.LocallyNameless.LFresh.LFreshMT
         Data.Functor.Identity.Identity a
    -> Unbound.Generics.LocallyNameless.LFresh.LFreshMT
         Data.Functor.Identity.Identity a
  {- Arity: 1, Strictness: <L,1*U>, Inline: [2],
     Unfolding: InlineRule (1, True, True)
                (Unbound.Generics.LocallyNameless.LFresh.$w$cavoid
                   @ Data.Functor.Identity.Identity) -}
7fb693730eb493f3222d6958d73dbf52
  $s$fLFreshLFreshMT_$s$fMonadLFreshMT ::
    GHC.Base.Monad
      (Unbound.Generics.LocallyNameless.LFresh.LFreshMT
         Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Unbound.Generics.LocallyNameless.LFresh.LFreshMT
                       Data.Functor.Identity.Identity)
                  SEDEL.PrettyPrint.$s$fApplicativeLFreshMT
                  (SEDEL.PrettyPrint.$s$fLFreshLFreshMT_$s$fMonadReaderT_$c>>=
                     @ (Data.Set.Internal.Set
                          Unbound.Generics.LocallyNameless.Name.AnyName))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <a>_N
                   ->_R (<a>_R
                         ->_R Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <b>_N)
                   ->_R Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <b>_N)
                  (SEDEL.PrettyPrint.$s$fApplicativeLFreshMT_$s$fApplicativeReaderT_$c*>
                     @ (Data.Set.Internal.Set
                          Unbound.Generics.LocallyNameless.Name.AnyName))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <a>_N
                   ->_R Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <b>_N
                   ->_R Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <b>_N)
                  (\ @ a
                     (eta :: a)
                     (ds :: Data.Set.Internal.Set
                              Unbound.Generics.LocallyNameless.Name.AnyName) ->
                   eta)
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R (<Data.Set.Internal.Set
                            Unbound.Generics.LocallyNameless.Name.AnyName>_R
                         ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                       <a>_R)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                           <*>_N
                                                           <Data.Set.Internal.Set
                                                              Unbound.Generics.LocallyNameless.Name.AnyName>_R
                                                           <Data.Functor.Identity.Identity>_R
                                                           <a>_N) ; Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <a>_N))
                  (SEDEL.PrettyPrint.$s$fLFreshLFreshMT_$s$fMonadReaderT_$cfail
                     @ (Data.Set.Internal.Set
                          Unbound.Generics.LocallyNameless.Name.AnyName))
                    `cast`
                  (forall (a :: <*>_N).
                   <[GHC.Types.Char]>_R
                   ->_R Sym (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0]) <Data.Functor.Identity.Identity>_N <a>_N) -}
ac940bac568525265b7c0de4e619a09c
  $s$fLFreshLFreshMT_$s$fMonadReaderT_$c>>= ::
    Control.Monad.Trans.Reader.ReaderT
      r Data.Functor.Identity.Identity a
    -> (a
        -> Control.Monad.Trans.Reader.ReaderT
             r Data.Functor.Identity.Identity b)
    -> Control.Monad.Trans.Reader.ReaderT
         r Data.Functor.Identity.Identity b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(C(S)),1*C1(C1(U))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT
                            r Data.Functor.Identity.Identity a)
                   (k :: a
                         -> Control.Monad.Trans.Reader.ReaderT
                              r Data.Functor.Identity.Identity b)
                   (r1 :: r) ->
                 (k (m1
                       `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <*>_N <r>_R <Data.Functor.Identity.Identity>_R <a>_N)
                       r1)
                      `cast`
                    (Data.Functor.Identity.N:Identity[0] <a>_R))
                   `cast`
                 (Control.Monad.Trans.Reader.N:ReaderT[0]
                      <*>_N <r>_R <Data.Functor.Identity.Identity>_R <b>_N)
                   r1)
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT
                    r Data.Functor.Identity.Identity a>_R
                 ->_R <a
                       -> Control.Monad.Trans.Reader.ReaderT
                            r Data.Functor.Identity.Identity b>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N <r>_R <Data.Functor.Identity.Identity>_R <b>_N)) -}
380ddffdbcb483431a132ef86703b227
  $s$fLFreshLFreshMT_$s$fMonadReaderT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Reader.ReaderT
         r Data.Functor.Identity.Identity a
  {- Arity: 2, Strictness: <B,U><B,A>x, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a (msg :: GHC.Base.String) ->
                 let {
                   m1 :: Data.Functor.Identity.Identity a {- Strictness: x -}
                   = GHC.Err.errorWithoutStackTrace
                       @ 'GHC.Types.LiftedRep
                       @ (Data.Functor.Identity.Identity a)
                       msg
                 } in
                 (\ (ds :: r) -> m1)
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N <r>_R <Data.Functor.Identity.Identity>_R <a>_N))) -}
a0351ed1f1fdf10c643c7270f910a77e
  $tc'DD :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1916616660179219491##
                   8674661021375851973##
                   SEDEL.PrettyPrint.$trModule
                   SEDEL.PrettyPrint.$tc'DD2
                   1#
                   SEDEL.PrettyPrint.$tc'DD1) -}
13b2709a4a231ccefd36d466f26934e1
  $tc'DD1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d3caffac42149085e02b39dcd4e67a02
  $tc'DD2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.PrettyPrint.$tc'DD3) -}
0d5c87b8e3d6c446faf4eadc9ddaa28c
  $tc'DD3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DD"#) -}
774c1d963dd1d9fb31fc34baf4161c9d
  $tc'DS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1615616655558323512##
                   8217989678923129811##
                   SEDEL.PrettyPrint.$trModule
                   SEDEL.PrettyPrint.$tc'DS2
                   0#
                   SEDEL.PrettyPrint.$tc'DS1) -}
2feaea7a22dd1d932eb549c67f732d88
  $tc'DS1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5701ba613a8bad4668f452df13bb6760
  $tc'DS2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.PrettyPrint.$tc'DS3) -}
8a227fe1bf7eda10e45f389f15214f9d
  $tc'DS3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DS"#) -}
d3ca9d00cecc75632193f948457686ae
  $tc'FAnn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14005866391062239149##
                   6097249703418127312##
                   SEDEL.PrettyPrint.$trModule
                   SEDEL.PrettyPrint.$tc'FAnn2
                   0#
                   SEDEL.PrettyPrint.$tc'FAnn1) -}
78a34f6c8bf80c50603deb87ebe88632
  $tc'FAnn1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
d6b30bda4e1013e315e713f6f1b6e455
  $tc'FAnn2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.PrettyPrint.$tc'FAnn3) -}
62d874031751f977d201a5993fda5914
  $tc'FAnn3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FAnn"#) -}
67f479e9dc6155e989262671cc50dc42
  $tcD :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   77494953105138188##
                   7697363953726631382##
                   SEDEL.PrettyPrint.$trModule
                   SEDEL.PrettyPrint.$tcD1
                   0#
                   GHC.Types.krep$*) -}
4cd6ba76b67c0f32063e56b5bc9e93df
  $tcD1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.PrettyPrint.$tcD2) -}
8198079e31944540b143bd943ff9e038
  $tcD2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("D"#) -}
92ad4ccad648e0bc34ad7442c67df9b4
  $tcFAnn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12367278494318958274##
                   11553843964331259981##
                   SEDEL.PrettyPrint.$trModule
                   SEDEL.PrettyPrint.$tcFAnn1
                   0#
                   GHC.Types.krep$*) -}
cd3bb6ab244027e1f156d938b90af9c0
  $tcFAnn1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.PrettyPrint.$tcFAnn2) -}
13a433bdd1b40ab595e3d924ac477307
  $tcFAnn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FAnn"#) -}
7a47999445d61aa9158c2f0267c3b060
  $tcFPretty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13608540993701063418##
                   7879154438436558074##
                   SEDEL.PrettyPrint.$trModule
                   SEDEL.PrettyPrint.$tcFPretty2
                   0#
                   SEDEL.PrettyPrint.$tcFPretty1) -}
e307362c0d77aa5af08f20c17eeedb0b
  $tcFPretty1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
43ad58df7706a8cc4a4716d6af22e924
  $tcFPretty2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.PrettyPrint.$tcFPretty3) -}
9a0cfcdbccd196c9c1408e731978f9e6
  $tcFPretty3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FPretty"#) -}
3604fe0ef11473c9bce1059e5b87b3de
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   SEDEL.PrettyPrint.$trModule3
                   SEDEL.PrettyPrint.$trModule1) -}
81afeda48101b37a00225133bc84dda8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.PrettyPrint.$trModule2) -}
793b350ff84efd85c88e7b51c4221d5e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SEDEL.PrettyPrint"#) -}
076bae66c3d0eef66a99ff0f99d2c8e0
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.PrettyPrint.$trModule4) -}
263dab5b5d59210bc88a4aede72f6029
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("sedel-0.1.0.0-AhY9khA6pZOExbzZW5SwDc"#) -}
06d476c8f795e1c8639481bb9b0c8740
  $w$cppr ::
    (forall a. a -> m a)
    -> SEDEL.Common.ArithOp -> m SEDEL.PrettyPrint.FDoc
  {- Arity: 2, Strictness: <C(S),1*C1(U)><S,1*U>, Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (ww :: forall a. a -> m a)
                   (w :: SEDEL.Common.ArithOp) ->
                 case w of wild {
                   SEDEL.Common.Add
                   -> ww @ SEDEL.PrettyPrint.FDoc SEDEL.PrettyPrint.$fFPrettyArithOp7
                   SEDEL.Common.Sub
                   -> ww @ SEDEL.PrettyPrint.FDoc SEDEL.PrettyPrint.$fFPrettyArithOp5
                   SEDEL.Common.Mul
                   -> ww @ SEDEL.PrettyPrint.FDoc SEDEL.PrettyPrint.$fFPrettyArithOp3
                   SEDEL.Common.Div
                   -> ww
                        @ SEDEL.PrettyPrint.FDoc
                        SEDEL.PrettyPrint.$fFPrettyArithOp1 }) -}
928099388478dfa587af5f65885c8679
  $w$cppr1 ::
    (forall a. a -> m a)
    -> SEDEL.Common.CompOp -> m SEDEL.PrettyPrint.FDoc
  {- Arity: 2, Strictness: <C(S),1*C1(U)><S,1*U>, Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (ww :: forall a. a -> m a)
                   (w :: SEDEL.Common.CompOp) ->
                 case w of wild {
                   SEDEL.Common.Lt
                   -> ww @ SEDEL.PrettyPrint.FDoc SEDEL.PrettyPrint.$fFPrettyCompOp7
                   SEDEL.Common.Gt
                   -> ww @ SEDEL.PrettyPrint.FDoc SEDEL.PrettyPrint.$fFPrettyCompOp5
                   SEDEL.Common.Equ
                   -> ww @ SEDEL.PrettyPrint.FDoc SEDEL.PrettyPrint.$fFPrettyCompOp3
                   SEDEL.Common.Neq
                   -> ww
                        @ SEDEL.PrettyPrint.FDoc
                        SEDEL.PrettyPrint.$fFPrettyCompOp1 }) -}
b3792b8f3b952cae1eba0f731312b4ce
  $w$cppr2 ::
    Unbound.Generics.LocallyNameless.LFresh.LFresh m =>
    SEDEL.PrettyPrint.D -> m SEDEL.PrettyPrint.FDoc
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(U,U,U,U,U),U,U,U)><S,1*U>, Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (w :: Unbound.Generics.LocallyNameless.LFresh.LFresh m)
                   (w1 :: SEDEL.PrettyPrint.D) ->
                 case w1 of wild {
                   SEDEL.PrettyPrint.DS s
                   -> GHC.Base.return
                        @ m
                        (Unbound.Generics.LocallyNameless.LFresh.$p1LFresh @ m w)
                        @ SEDEL.PrettyPrint.FDoc
                        s
                   SEDEL.PrettyPrint.DD a $dFPretty d
                   -> $dFPretty `cast` (SEDEL.PrettyPrint.N:FPretty[0] <a>_N)
                        @ m
                        (GHC.Base.$p1Monad
                           @ m
                           (Unbound.Generics.LocallyNameless.LFresh.$p1LFresh @ m w))
                        w
                        d }) -}
d31e30f84c6dc1101a188207c7121d1a
  $w$cppr3 ::
    Unbound.Generics.LocallyNameless.LFresh.LFresh m =>
    SEDEL.Source.Syntax.Expr -> m SEDEL.PrettyPrint.FDoc
  {- Arity: 1,
     Strictness: <L,U(U(A,C(C1(U)),A,C(U),A),C(C1(U)),C(C1(U)),A)>,
     Inline: [2] -}
226b14d1cb40424090665dc61d1a7e66
  $w$cppr4 ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. a -> m a)
    -> SEDEL.Source.Syntax.Kind
    -> m SEDEL.PrettyPrint.FDoc
  {- Arity: 3, Strictness: <L,C(C1(U))><L,C(U)><S,1*U>,
     Inline: [2] -}
f5fd138242f9825b3e75b24007d4ad51
  $w$cppr5 ::
    (forall a. a -> m a)
    -> SEDEL.Common.LogicalOp -> m SEDEL.PrettyPrint.FDoc
  {- Arity: 2, Strictness: <C(S),1*C1(U)><S,1*U>, Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (ww :: forall a. a -> m a)
                   (w :: SEDEL.Common.LogicalOp) ->
                 case w of wild {
                   SEDEL.Common.LAnd
                   -> ww
                        @ SEDEL.PrettyPrint.FDoc
                        SEDEL.PrettyPrint.$fFPrettyLogicalOp3
                   SEDEL.Common.LOr
                   -> ww
                        @ SEDEL.PrettyPrint.FDoc
                        SEDEL.PrettyPrint.$fFPrettyLogicalOp1 }) -}
555043bd00ef97ca0fae394a6c94ea9d
  $w$cppr6 ::
    (forall a. a -> m a)
    -> SEDEL.Common.Operation -> m SEDEL.PrettyPrint.FDoc
  {- Arity: 2, Strictness: <C(S),1*C1(U)><S,1*U>, Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (ww :: forall a. a -> m a)
                   (w :: SEDEL.Common.Operation) ->
                 case w of wild {
                   SEDEL.Common.Arith a -> SEDEL.PrettyPrint.$w$cppr @ m ww a
                   SEDEL.Common.Comp a -> SEDEL.PrettyPrint.$w$cppr1 @ m ww a
                   SEDEL.Common.Logical a -> SEDEL.PrettyPrint.$w$cppr5 @ m ww a }) -}
b16ee53d872a7319a7b5bf8ff0ca8bbd
  $w$cppr7 ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. a -> m a)
    -> SEDEL.Source.Syntax.SType
    -> m SEDEL.PrettyPrint.FDoc
  {- Arity: 3, Strictness: <L,C(C1(U))><L,C(U)><S,1*U>,
     Inline: [2] -}
6c5f41217ba7eb66b12e31489cb40f37
  $w$cppr8 ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. a -> m a)
    -> (forall a.
        Data.Typeable.Internal.Typeable a =>
        Unbound.Generics.LocallyNameless.Name.Name a
        -> m (Unbound.Generics.LocallyNameless.Name.Name a))
    -> (forall a.
        [Unbound.Generics.LocallyNameless.Name.AnyName] -> m a -> m a)
    -> SEDEL.Source.Syntax.Scheme
    -> m SEDEL.PrettyPrint.FDoc
  {- Arity: 5,
     Strictness: <L,C(C1(U))><L,C(U)><L,C(C1(U))><L,C(C1(U))><S,1*U>,
     Inline: [2] -}
b3792b8f3b952cae1eba0f731312b4ce
  $w$cppr9 ::
    (forall a b. (a -> b) -> m a -> m b)
    -> Unbound.Generics.LocallyNameless.LFresh.LFresh m =>
       [SEDEL.PrettyPrint.D]
       -> m (Data.Text.Prettyprint.Doc.Internal.Doc
               SEDEL.PrettyPrint.FAnn)
  {- Arity: 3,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U(U(U(U,U,U,U,U,U),U,U,U,U),U,U,U)><L,1*U>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (ww :: forall a b. (a -> b) -> m a -> m b)
                   (w :: Unbound.Generics.LocallyNameless.LFresh.LFresh m)
                   (w1 :: [SEDEL.PrettyPrint.D]) ->
                 ww
                   @ [Data.Text.Prettyprint.Doc.Internal.Doc SEDEL.PrettyPrint.FAnn]
                   @ (Data.Text.Prettyprint.Doc.Internal.Doc SEDEL.PrettyPrint.FAnn)
                   (Data.Text.Prettyprint.Doc.Internal.sep @ SEDEL.PrettyPrint.FAnn)
                   (let {
                      $dMonad :: GHC.Base.Monad m
                      = Unbound.Generics.LocallyNameless.LFresh.$p1LFresh @ m w
                    } in
                    let {
                      $dApplicative :: GHC.Base.Applicative m
                      = GHC.Base.$p1Monad @ m $dMonad
                    } in
                    let {
                      z :: m [SEDEL.PrettyPrint.FDoc]
                      = GHC.Base.pure
                          @ m
                          $dApplicative
                          @ [SEDEL.PrettyPrint.FDoc]
                          (GHC.Types.[] @ SEDEL.PrettyPrint.FDoc)
                    } in
                    letrec {
                      go :: [SEDEL.PrettyPrint.D] -> m [SEDEL.PrettyPrint.FDoc]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [SEDEL.PrettyPrint.D]) ->
                        case ds of wild {
                          [] -> z
                          : y ys
                          -> GHC.Base.liftA2
                               @ m
                               $dApplicative
                               @ SEDEL.PrettyPrint.FDoc
                               @ [SEDEL.PrettyPrint.FDoc]
                               @ [SEDEL.PrettyPrint.FDoc]
                               (GHC.Types.: @ SEDEL.PrettyPrint.FDoc)
                               (SEDEL.PrettyPrint.$w$cppr2 @ m w y)
                               (go ys) }
                    } in
                    go w1)) -}
b3792b8f3b952cae1eba0f731312b4ce
  data D
    = DS SEDEL.PrettyPrint.FDoc
    | forall a. SEDEL.PrettyPrint.FPretty a => DD a
9526b59e8458efbe0f1cfd0f69107aa0
  data FAnn = FAnn
1e788f59dec27773220cefea739ec59d
  type FDoc =
    Data.Text.Prettyprint.Doc.Internal.Doc SEDEL.PrettyPrint.FAnn
b3792b8f3b952cae1eba0f731312b4ce
  class FPretty p where
    ppr :: (GHC.Base.Applicative m,
            Unbound.Generics.LocallyNameless.LFresh.LFresh m) =>
           p -> m SEDEL.PrettyPrint.FDoc
    {-# MINIMAL ppr #-}
b1c89e02bc179b33c976cabe8ccabe5c
  pprint ::
    SEDEL.PrettyPrint.FPretty a => a -> SEDEL.PrettyPrint.FDoc
  {- Arity: 1, Strictness: <L,1*C1(C1(C(U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dFPretty :: SEDEL.PrettyPrint.FPretty a) ->
                 let {
                   g :: a
                        -> Unbound.Generics.LocallyNameless.LFresh.LFreshM
                             SEDEL.PrettyPrint.FDoc
                   = $dFPretty `cast` (SEDEL.PrettyPrint.N:FPretty[0] <a>_N)
                       @ (Unbound.Generics.LocallyNameless.LFresh.LFreshMT
                            Data.Functor.Identity.Identity)
                       SEDEL.PrettyPrint.$s$fApplicativeLFreshMT
                       SEDEL.PrettyPrint.$s$fLFreshLFreshMT
                 } in
                 (\ (x4 :: a) ->
                  (g x4)
                    `cast`
                  (Unbound.Generics.LocallyNameless.LFresh.N:LFreshMT[0] <Data.Functor.Identity.Identity>_N <SEDEL.PrettyPrint.FDoc>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                             <*>_N
                                                                                                                                             <Data.Set.Internal.Set
                                                                                                                                                Unbound.Generics.LocallyNameless.Name.AnyName>_R
                                                                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                                                                             <SEDEL.PrettyPrint.FDoc>_N)
                    (Data.Set.Internal.Tip
                       @ Unbound.Generics.LocallyNameless.Name.AnyName))
                   `cast`
                 (<a>_R
                  ->_R Data.Functor.Identity.N:Identity[0]
                           <SEDEL.PrettyPrint.FDoc>_R)) -}
instance SEDEL.PrettyPrint.FPretty [SEDEL.Common.ArithOp]
  = SEDEL.PrettyPrint.$fFPrettyArithOp
instance SEDEL.PrettyPrint.FPretty [SEDEL.Common.CompOp]
  = SEDEL.PrettyPrint.$fFPrettyCompOp
instance SEDEL.PrettyPrint.FPretty [SEDEL.PrettyPrint.D]
  = SEDEL.PrettyPrint.$fFPrettyD
instance SEDEL.PrettyPrint.FPretty [SEDEL.Source.Syntax.Expr]
  = SEDEL.PrettyPrint.$fFPrettyExpr
instance SEDEL.PrettyPrint.FPretty [SEDEL.Source.Syntax.Kind]
  = SEDEL.PrettyPrint.$fFPrettyKind
instance SEDEL.PrettyPrint.FPretty [SEDEL.Common.LogicalOp]
  = SEDEL.PrettyPrint.$fFPrettyLogicalOp
instance SEDEL.PrettyPrint.FPretty [SEDEL.Common.Operation]
  = SEDEL.PrettyPrint.$fFPrettyOperation
instance SEDEL.PrettyPrint.FPretty [SEDEL.Source.Syntax.SType]
  = SEDEL.PrettyPrint.$fFPrettySType
instance SEDEL.PrettyPrint.FPretty [SEDEL.Source.Syntax.Scheme]
  = SEDEL.PrettyPrint.$fFPrettyScheme
instance SEDEL.PrettyPrint.FPretty [[]]
  = SEDEL.PrettyPrint.$fFPretty[]
instance [orphan] Data.Text.Prettyprint.Doc.Internal.Pretty [Text.Megaparsec.Pos.SourcePos]
  = SEDEL.PrettyPrint.$fPrettySourcePos
"SPEC/SEDEL.PrettyPrint $fApplicativeLFreshMT @ Identity" [orphan] forall (v :: GHC.Base.Applicative
                                                                                  Data.Functor.Identity.Identity)
  Unbound.Generics.LocallyNameless.LFresh.$fApplicativeLFreshMT @ Data.Functor.Identity.Identity
                                                                v
  = SEDEL.PrettyPrint.$s$fApplicativeLFreshMT
"SPEC/SEDEL.PrettyPrint $fApplicativeReaderT_$c*> @ Identity _" [orphan] forall @ r
                                                                                ($dApplicative :: GHC.Base.Applicative
                                                                                                    Data.Functor.Identity.Identity)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c*> @ Data.Functor.Identity.Identity
                                                       @ r
                                                       $dApplicative
  = SEDEL.PrettyPrint.$s$fApplicativeLFreshMT_$s$fApplicativeReaderT_$c*>
      @ r
"SPEC/SEDEL.PrettyPrint $fApplicativeReaderT_$c<* @ Identity _" [orphan] forall @ r
                                                                                ($dApplicative :: GHC.Base.Applicative
                                                                                                    Data.Functor.Identity.Identity)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<* @ Data.Functor.Identity.Identity
                                                       @ r
                                                       $dApplicative
  = SEDEL.PrettyPrint.$s$fApplicativeLFreshMT_$s$fApplicativeReaderT_$c<*
      @ r
"SPEC/SEDEL.PrettyPrint $fApplicativeReaderT_$c<*> @ Identity _" [orphan] forall @ r
                                                                                 ($dApplicative :: GHC.Base.Applicative
                                                                                                     Data.Functor.Identity.Identity)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*> @ Data.Functor.Identity.Identity
                                                        @ r
                                                        $dApplicative
  = SEDEL.PrettyPrint.$s$fApplicativeLFreshMT_$s$fApplicativeReaderT_$c<*>
      @ r
"SPEC/SEDEL.PrettyPrint $fFunctorLFreshMT @ Identity" [orphan] forall (v :: GHC.Base.Functor
                                                                              Data.Functor.Identity.Identity)
  Unbound.Generics.LocallyNameless.LFresh.$fFunctorLFreshMT @ Data.Functor.Identity.Identity
                                                            v
  = SEDEL.PrettyPrint.$s$fApplicativeLFreshMT_$s$fFunctorLFreshMT
"SPEC/SEDEL.PrettyPrint $fFunctorReaderT_$c<$ @ Identity _" [orphan] forall @ r
                                                                            ($dFunctor :: GHC.Base.Functor
                                                                                            Data.Functor.Identity.Identity)
  Control.Monad.Trans.Reader.$fFunctorReaderT_$c<$ @ Data.Functor.Identity.Identity
                                                   @ r
                                                   $dFunctor
  = SEDEL.PrettyPrint.$s$fApplicativeLFreshMT_$s$fFunctorReaderT_$c<$
      @ r
"SPEC/SEDEL.PrettyPrint $fFunctorReaderT_$cfmap @ Identity _" [orphan] forall @ r
                                                                              ($dFunctor :: GHC.Base.Functor
                                                                                              Data.Functor.Identity.Identity)
  Control.Monad.Trans.Reader.$fFunctorReaderT_$cfmap @ Data.Functor.Identity.Identity
                                                     @ r
                                                     $dFunctor
  = SEDEL.PrettyPrint.$s$fApplicativeLFreshMT_$s$fFunctorReaderT_$cfmap
      @ r
"SPEC/SEDEL.PrettyPrint $fLFreshLFreshMT @ Identity" [orphan] forall (v :: GHC.Base.Monad
                                                                             Data.Functor.Identity.Identity)
  Unbound.Generics.LocallyNameless.LFresh.$fLFreshLFreshMT @ Data.Functor.Identity.Identity
                                                           v
  = SEDEL.PrettyPrint.$s$fLFreshLFreshMT
"SPEC/SEDEL.PrettyPrint $fLFreshLFreshMT_$cavoid @ Identity" [orphan] [2] forall (w :: GHC.Base.Monad
                                                                                         Data.Functor.Identity.Identity)
  Unbound.Generics.LocallyNameless.LFresh.$fLFreshLFreshMT_$cavoid @ Data.Functor.Identity.Identity
                                                                   w
  = SEDEL.PrettyPrint.$s$fLFreshLFreshMT_$cavoid
"SPEC/SEDEL.PrettyPrint $fMonadLFreshMT @ Identity" [orphan] forall (v :: GHC.Base.Monad
                                                                            Data.Functor.Identity.Identity)
  Unbound.Generics.LocallyNameless.LFresh.$fMonadLFreshMT @ Data.Functor.Identity.Identity
                                                          v
  = SEDEL.PrettyPrint.$s$fLFreshLFreshMT_$s$fMonadLFreshMT
"SPEC/SEDEL.PrettyPrint $fMonadReaderT_$c>>= @ Identity _" [orphan] forall @ r
                                                                           ($dMonad :: GHC.Base.Monad
                                                                                         Data.Functor.Identity.Identity)
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>>= @ Data.Functor.Identity.Identity
                                                  @ r
                                                  $dMonad
  = SEDEL.PrettyPrint.$s$fLFreshLFreshMT_$s$fMonadReaderT_$c>>= @ r
"SPEC/SEDEL.PrettyPrint $fMonadReaderT_$cfail @ Identity _" [orphan] forall @ r
                                                                            ($dMonad :: GHC.Base.Monad
                                                                                          Data.Functor.Identity.Identity)
  Control.Monad.Trans.Reader.$fMonadReaderT_$cfail @ Data.Functor.Identity.Identity
                                                   @ r
                                                   $dMonad
  = SEDEL.PrettyPrint.$s$fLFreshLFreshMT_$s$fMonadReaderT_$cfail @ r
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

