
==================== FINAL INTERFACE ====================
2019-08-12 12:23:19.049295 UTC

interface sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ:SEDEL.Common [family instance module] 8063
  interface hash: 9a656f33f317346650bf2719eac00494
  ABI hash: ca6f88eb795bfe7d09e23d21fb3eb87f
  export-list hash: 576471b9a47b800d5ba3919671488556
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: da2d4b631da6a319f4eef01bc2533b9a
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  SEDEL.Common.ArithOp{SEDEL.Common.Add SEDEL.Common.Div SEDEL.Common.Mul SEDEL.Common.Sub}
  SEDEL.Common.CompOp{SEDEL.Common.Equ SEDEL.Common.Gt SEDEL.Common.Lt SEDEL.Common.Neq}
  SEDEL.Common.LogicalOp{SEDEL.Common.LAnd SEDEL.Common.LOr}
  SEDEL.Common.Operation{SEDEL.Common.Arith SEDEL.Common.Comp SEDEL.Common.Logical}
module dependencies:
package dependencies: array-0.5.3.0 async-2.2.1 base-4.12.0.0
                      base-orphans-0.8 bifunctors-5.5.3 binary-0.8.6.0
                      bytestring-0.10.8.2 comonad-5.0.4 containers-0.6.0.1
                      deepseq-1.4.4.0 distributive-0.6 exceptions-0.10.0
                      ghc-boot-th-8.6.3 ghc-prim-0.5.3 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 mtl-2.2.2 profunctors-5.3 protolude-0.2.3
                      stm-2.5.0.0 tagged-0.8.6 template-haskell-2.14.0.0 text-1.2.3.1
                      transformers-0.5.5.0 unbound-generics-0.4.0
orphans: transformers-0.5.5.0:Control.Monad.Trans.Error
         stm-2.5.0.0:Control.Monad.STM
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         ghc-boot-th-8.6.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.3:GHC.LanguageExtensions.Type
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         unbound-generics-0.4.0:Unbound.Generics.LocallyNameless.Bind
                         unbound-generics-0.4.0:Unbound.Generics.LocallyNameless.Embed
                         unbound-generics-0.4.0:Unbound.Generics.LocallyNameless.Ignore
                         unbound-generics-0.4.0:Unbound.Generics.LocallyNameless.Name
                         unbound-generics-0.4.0:Unbound.Generics.LocallyNameless.Rebind
                         unbound-generics-0.4.0:Unbound.Generics.LocallyNameless.Rec
                         unbound-generics-0.4.0:Unbound.Generics.LocallyNameless.Shift
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.Generics 7aea30cad019e3a5fc11eb21c8019cc5
import  -/  base-4.12.0.0:GHC.Show 4e438f26d903388cc6c2c5d64ed01b98
import  -/  ghc-prim-0.5.3:GHC.Classes e0d9c979f6368701f34fa421754d2cce
import  -/  protolude-0.2.3:Protolude f69a0445642f255f4ede68732259560a
import  -/  unbound-generics-0.4.0:Unbound.Generics.LocallyNameless 36704d4dbfb3fb22f46cde363ae796f2
import  -/  unbound-generics-0.4.0:Unbound.Generics.LocallyNameless.Alpha 3c22f51bfd39abdded9340a3168dfcb7
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaArithOp ::
    Unbound.Generics.LocallyNameless.Alpha.Alpha SEDEL.Common.ArithOp
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ SEDEL.Common.ArithOp
                  SEDEL.Common.$fShowArithOp
                  SEDEL.Common.$fAlphaArithOp_$caeq'
                  SEDEL.Common.$fAlphaArithOp_$cfvAny'
                  SEDEL.Common.$fAlphaArithOp_$cclose
                  SEDEL.Common.$fAlphaArithOp_$copen
                  SEDEL.Common.$fAlphaArithOp_$cisPat
                  SEDEL.Common.$fAlphaArithOp_$cisTerm
                  SEDEL.Common.$fAlphaArithOp_$cisEmbed
                  SEDEL.Common.$fAlphaArithOp_$cnthPatFind
                  SEDEL.Common.$fAlphaArithOp_$cnamePatFind
                  SEDEL.Common.$fAlphaArithOp_$cswaps'
                  SEDEL.Common.$fAlphaArithOp_$clfreshen'
                  SEDEL.Common.$fAlphaArithOp_$cfreshen'
                  SEDEL.Common.$fAlphaArithOp_$cacompare' -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaArithOp1 ::
    (SEDEL.Common.ArithOp,
     Unbound.Generics.PermM.Perm
       Unbound.Generics.LocallyNameless.Name.AnyName)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((SEDEL.Common.Div,
                  (Data.Map.Internal.Tip
                     @ Unbound.Generics.LocallyNameless.Name.AnyName
                     @ Unbound.Generics.LocallyNameless.Name.AnyName)
                    `cast`
                  (Sym (Unbound.Generics.PermM.N:Perm[0]
                            <Unbound.Generics.LocallyNameless.Name.AnyName>_N)))) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaArithOp2 ::
    (SEDEL.Common.ArithOp,
     Unbound.Generics.PermM.Perm
       Unbound.Generics.LocallyNameless.Name.AnyName)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((SEDEL.Common.Mul,
                  (Data.Map.Internal.Tip
                     @ Unbound.Generics.LocallyNameless.Name.AnyName
                     @ Unbound.Generics.LocallyNameless.Name.AnyName)
                    `cast`
                  (Sym (Unbound.Generics.PermM.N:Perm[0]
                            <Unbound.Generics.LocallyNameless.Name.AnyName>_N)))) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaArithOp3 ::
    (SEDEL.Common.ArithOp,
     Unbound.Generics.PermM.Perm
       Unbound.Generics.LocallyNameless.Name.AnyName)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((SEDEL.Common.Sub,
                  (Data.Map.Internal.Tip
                     @ Unbound.Generics.LocallyNameless.Name.AnyName
                     @ Unbound.Generics.LocallyNameless.Name.AnyName)
                    `cast`
                  (Sym (Unbound.Generics.PermM.N:Perm[0]
                            <Unbound.Generics.LocallyNameless.Name.AnyName>_N)))) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaArithOp4 ::
    (SEDEL.Common.ArithOp,
     Unbound.Generics.PermM.Perm
       Unbound.Generics.LocallyNameless.Name.AnyName)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((SEDEL.Common.Add,
                  (Data.Map.Internal.Tip
                     @ Unbound.Generics.LocallyNameless.Name.AnyName
                     @ Unbound.Generics.LocallyNameless.Name.AnyName)
                    `cast`
                  (Sym (Unbound.Generics.PermM.N:Perm[0]
                            <Unbound.Generics.LocallyNameless.Name.AnyName>_N)))) -}
4bf5b2aae4e215814b07ad65fc418466
  $fAlphaArithOp5 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Div" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
4b856a51e9c3f1332b35e4ee42eea7a6
  $fAlphaArithOp6 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
187aa63b40b2b4e8c85193affc7576e8
  $fAlphaArithOp7 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
c3a652ee87d7e869accc8290fbb5ea82
  $fAlphaArithOp8 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Add" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaArithOp_$cacompare' ::
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> SEDEL.Common.ArithOp
    -> SEDEL.Common.ArithOp
    -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (w1 :: SEDEL.Common.ArithOp)
                   (w2 :: SEDEL.Common.ArithOp) ->
                 SEDEL.Common.$w$cacompare' w1 w2) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaArithOp_$caeq' ::
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> SEDEL.Common.ArithOp -> SEDEL.Common.ArithOp -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (c :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (x :: SEDEL.Common.ArithOp)
                   (y :: SEDEL.Common.ArithOp) ->
                 case x of wild {
                   SEDEL.Common.Add
                   -> case y of wild1 {
                        SEDEL.Common.Add -> GHC.Types.True
                        SEDEL.Common.Sub -> GHC.Types.False
                        SEDEL.Common.Mul -> GHC.Types.False
                        SEDEL.Common.Div -> GHC.Types.False }
                   SEDEL.Common.Sub
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False SEDEL.Common.Sub -> GHC.Types.True }
                   SEDEL.Common.Mul
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False SEDEL.Common.Mul -> GHC.Types.True }
                   SEDEL.Common.Div
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        SEDEL.Common.Div -> GHC.Types.True } }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaArithOp_$cclose ::
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> Unbound.Generics.LocallyNameless.Alpha.NamePatFind
    -> SEDEL.Common.ArithOp
    -> SEDEL.Common.ArithOp
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                (\ (c :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (b :: Unbound.Generics.LocallyNameless.Alpha.NamePatFind)
                   (x :: SEDEL.Common.ArithOp) ->
                 x) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaArithOp_$cfreshen' ::
    Unbound.Generics.LocallyNameless.Fresh.Fresh m =>
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> SEDEL.Common.ArithOp
    -> m (SEDEL.Common.ArithOp,
          Unbound.Generics.PermM.Perm
            Unbound.Generics.LocallyNameless.Name.AnyName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLC(S)L)L),1*U(1*U(A,A,A,1*C1(U),A),A)><L,A><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: Unbound.Generics.LocallyNameless.Fresh.Fresh m)
                   (w1 :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (w2 :: SEDEL.Common.ArithOp) ->
                 case w of ww { Unbound.Generics.LocallyNameless.Fresh.C:Fresh ww1 ww2 ->
                 case ww1 of ww3 { GHC.Base.C:Monad ww4 ww5 ww6 ww7 ww8 ->
                 SEDEL.Common.$w$cfreshen' @ m ww7 w2 } }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaArithOp_$cfvAny' ::
    (Data.Functor.Contravariant.Contravariant f,
     GHC.Base.Applicative f) =>
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> (Unbound.Generics.LocallyNameless.Name.AnyName
        -> f Unbound.Generics.LocallyNameless.Name.AnyName)
    -> SEDEL.Common.ArithOp
    -> f SEDEL.Common.ArithOp
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,U(1*U(C(C(U)),A),C(U),A,A,A,A)><L,A><L,A>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ f :: * -> *
                   ($dContravariant :: Data.Functor.Contravariant.Contravariant f)
                   ($dApplicative :: GHC.Base.Applicative f) ->
                 let {
                   $dFunctor :: GHC.Base.Functor f
                   = GHC.Base.$p1Applicative @ f $dApplicative
                 } in
                 \ (c :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (nfn :: Unbound.Generics.LocallyNameless.Name.AnyName
                           -> f Unbound.Generics.LocallyNameless.Name.AnyName) ->
                 let {
                   f1 :: f (GHC.Generics.Rep SEDEL.Common.ArithOp GHC.Types.Any)
                         -> f SEDEL.Common.ArithOp
                   = GHC.Base.fmap
                       @ f
                       $dFunctor
                       @ (GHC.Generics.Rep SEDEL.Common.ArithOp GHC.Types.Any)
                       @ SEDEL.Common.ArithOp
                       (SEDEL.Common.$fAlphaArithOp_$cto @ GHC.Types.Any)
                 } in
                 let {
                   f2 :: f ((GHC.Generics.:+:)
                              (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1
                               GHC.Generics.:+: GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                  GHC.Generics.U1)
                              (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1
                               GHC.Generics.:+: GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                  GHC.Generics.U1)
                              GHC.Types.Any)
                         -> f (GHC.Generics.M1
                                 GHC.Generics.D
                                 ('GHC.Generics.MetaData
                                    "ArithOp"
                                    "SEDEL.Common"
                                    "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                    'GHC.Types.False)
                                 ((GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Sub"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                  GHC.Generics.:+: (GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Mul"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1
                                                    GHC.Generics.:+: GHC.Generics.C1
                                                                       ('GHC.Generics.MetaCons
                                                                          "Div"
                                                                          'GHC.Generics.PrefixI
                                                                          'GHC.Types.False)
                                                                       GHC.Generics.U1))
                                 GHC.Types.Any)
                   = GHC.Base.fmap
                       @ f
                       (GHC.Base.$p1Applicative @ f $dApplicative)
                       @ ((GHC.Generics.:+:)
                            (GHC.Generics.C1
                               ('GHC.Generics.MetaCons
                                  "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               GHC.Generics.U1
                             GHC.Generics.:+: GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                GHC.Generics.U1)
                            (GHC.Generics.C1
                               ('GHC.Generics.MetaCons
                                  "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               GHC.Generics.U1
                             GHC.Generics.:+: GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                GHC.Generics.U1)
                            GHC.Types.Any)
                       @ (GHC.Generics.M1
                            GHC.Generics.D
                            ('GHC.Generics.MetaData
                               "ArithOp"
                               "SEDEL.Common"
                               "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                               'GHC.Types.False)
                            ((GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1
                              GHC.Generics.:+: GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 GHC.Generics.U1)
                             GHC.Generics.:+: (GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 GHC.Generics.U1
                                               GHC.Generics.:+: GHC.Generics.C1
                                                                  ('GHC.Generics.MetaCons
                                                                     "Div"
                                                                     'GHC.Generics.PrefixI
                                                                     'GHC.Types.False)
                                                                  GHC.Generics.U1))
                            GHC.Types.Any)
                       (\ (v :: (GHC.Generics.:+:)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Sub"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Div"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                  GHC.Types.Any) ->
                        v)
                         `cast`
                       (<(GHC.Generics.:+:)
                           (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               GHC.Generics.U1)
                           (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               GHC.Generics.U1)
                           GHC.Types.Any>_R
                        ->_R Sym (GHC.Generics.N:M1[0]
                                      <*>_N
                                      <GHC.Generics.D>_P
                                      <'GHC.Generics.MetaData
                                         "ArithOp"
                                         "SEDEL.Common"
                                         "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                         'GHC.Types.False>_P
                                      <(GHC.Generics.C1
                                          ('GHC.Generics.MetaCons
                                             "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.C1
                                                           ('GHC.Generics.MetaCons
                                                              "Sub"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1)
                                       GHC.Generics.:+: (GHC.Generics.C1
                                                           ('GHC.Generics.MetaCons
                                                              "Mul"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1
                                                         GHC.Generics.:+: GHC.Generics.C1
                                                                            ('GHC.Generics.MetaCons
                                                                               "Div"
                                                                               'GHC.Generics.PrefixI
                                                                               'GHC.Types.False)
                                                                            GHC.Generics.U1)>_R) <GHC.Types.Any>_N)
                 } in
                 let {
                   $dFunctor1 :: GHC.Base.Functor f
                   = GHC.Base.$p1Applicative @ f $dApplicative
                 } in
                 \ (x :: SEDEL.Common.ArithOp) ->
                 f1
                   (f2
                      (let {
                         $j :: (GHC.Generics.:+:)
                                 (GHC.Generics.C1
                                    ('GHC.Generics.MetaCons
                                       "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    GHC.Generics.U1)
                                 (GHC.Generics.C1
                                    ('GHC.Generics.MetaCons
                                       "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    GHC.Generics.U1)
                                 GHC.Types.Any
                               -> f ((GHC.Generics.:+:)
                                       (GHC.Generics.C1
                                          ('GHC.Generics.MetaCons
                                             "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.C1
                                                           ('GHC.Generics.MetaCons
                                                              "Sub"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1)
                                       (GHC.Generics.C1
                                          ('GHC.Generics.MetaCons
                                             "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.C1
                                                           ('GHC.Generics.MetaCons
                                                              "Div"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1)
                                       GHC.Types.Any)
                           <join 1> {- Arity: 1 -}
                         = \ (f3 :: (GHC.Generics.:+:)
                                      (GHC.Generics.C1
                                         ('GHC.Generics.MetaCons
                                            "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                                      (GHC.Generics.C1
                                         ('GHC.Generics.MetaCons
                                            "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                                      GHC.Types.Any)[OneShot] ->
                           GHC.Base.fmap
                             @ f
                             $dFunctor1
                             @ ((GHC.Generics.:+:)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1)
                                  GHC.Types.Any)
                             @ ((GHC.Generics.:+:)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Sub"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Div"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                  GHC.Types.Any)
                             (GHC.Generics.L1
                                @ *
                                @ (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Sub"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                @ (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Div"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                @ GHC.Types.Any)
                             (case f3 of wild {
                                GHC.Generics.L1 f4
                                -> GHC.Base.fmap
                                     @ f
                                     (GHC.Base.$p1Applicative @ f $dApplicative)
                                     @ (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                          GHC.Types.Any)
                                     @ ((GHC.Generics.:+:)
                                          (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                          (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                          GHC.Types.Any)
                                     (GHC.Generics.L1
                                        @ *
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                        @ GHC.Types.Any)
                                     (GHC.Base.fmap
                                        @ f
                                        (GHC.Base.$p1Applicative @ f $dApplicative)
                                        @ (GHC.Generics.U1 GHC.Types.Any)
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1
                                             GHC.Types.Any)
                                        (\ (v :: GHC.Generics.U1 GHC.Types.Any) -> v)
                                          `cast`
                                        (<GHC.Generics.U1 GHC.Types.Any>_R
                                         ->_R Sym (GHC.Generics.N:M1[0]
                                                       <*>_N
                                                       <GHC.Generics.C>_P
                                                       <'GHC.Generics.MetaCons
                                                          "Add"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False>_P
                                                       <GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                                        (GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (GHC.Generics.U1 GHC.Types.Any)
                                           (GHC.Generics.U1 @ * @ GHC.Types.Any)))
                                GHC.Generics.R1 g2
                                -> GHC.Base.fmap
                                     @ f
                                     (GHC.Base.$p1Applicative @ f $dApplicative)
                                     @ (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                          GHC.Types.Any)
                                     @ ((GHC.Generics.:+:)
                                          (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                          (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                          GHC.Types.Any)
                                     (GHC.Generics.R1
                                        @ *
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                        @ GHC.Types.Any)
                                     (GHC.Base.fmap
                                        @ f
                                        (GHC.Base.$p1Applicative @ f $dApplicative)
                                        @ (GHC.Generics.U1 GHC.Types.Any)
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1
                                             GHC.Types.Any)
                                        (\ (v :: GHC.Generics.U1 GHC.Types.Any) -> v)
                                          `cast`
                                        (<GHC.Generics.U1 GHC.Types.Any>_R
                                         ->_R Sym (GHC.Generics.N:M1[0]
                                                       <*>_N
                                                       <GHC.Generics.C>_P
                                                       <'GHC.Generics.MetaCons
                                                          "Sub"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False>_P
                                                       <GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                                        (GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (GHC.Generics.U1 GHC.Types.Any)
                                           (GHC.Generics.U1 @ * @ GHC.Types.Any))) })
                       } in
                       let {
                         $j1 :: (GHC.Generics.:+:)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1)
                                  GHC.Types.Any
                                -> f ((GHC.Generics.:+:)
                                        (GHC.Generics.C1
                                           ('GHC.Generics.MetaCons
                                              "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                           GHC.Generics.U1
                                         GHC.Generics.:+: GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Sub"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1)
                                        (GHC.Generics.C1
                                           ('GHC.Generics.MetaCons
                                              "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                           GHC.Generics.U1
                                         GHC.Generics.:+: GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Div"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1)
                                        GHC.Types.Any)
                           <join 1> {- Arity: 1 -}
                         = \ (g2 :: (GHC.Generics.:+:)
                                      (GHC.Generics.C1
                                         ('GHC.Generics.MetaCons
                                            "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                                      (GHC.Generics.C1
                                         ('GHC.Generics.MetaCons
                                            "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                                      GHC.Types.Any)[OneShot] ->
                           GHC.Base.fmap
                             @ f
                             $dFunctor1
                             @ ((GHC.Generics.:+:)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1)
                                  GHC.Types.Any)
                             @ ((GHC.Generics.:+:)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Sub"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Div"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                  GHC.Types.Any)
                             (GHC.Generics.R1
                                @ *
                                @ (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Sub"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                @ (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Div"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                @ GHC.Types.Any)
                             (case g2 of wild {
                                GHC.Generics.L1 f3
                                -> GHC.Base.fmap
                                     @ f
                                     (GHC.Base.$p1Applicative @ f $dApplicative)
                                     @ (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                          GHC.Types.Any)
                                     @ ((GHC.Generics.:+:)
                                          (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                          (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                          GHC.Types.Any)
                                     (GHC.Generics.L1
                                        @ *
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                        @ GHC.Types.Any)
                                     (GHC.Base.fmap
                                        @ f
                                        (GHC.Base.$p1Applicative @ f $dApplicative)
                                        @ (GHC.Generics.U1 GHC.Types.Any)
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1
                                             GHC.Types.Any)
                                        (\ (v :: GHC.Generics.U1 GHC.Types.Any) -> v)
                                          `cast`
                                        (<GHC.Generics.U1 GHC.Types.Any>_R
                                         ->_R Sym (GHC.Generics.N:M1[0]
                                                       <*>_N
                                                       <GHC.Generics.C>_P
                                                       <'GHC.Generics.MetaCons
                                                          "Mul"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False>_P
                                                       <GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                                        (GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (GHC.Generics.U1 GHC.Types.Any)
                                           (GHC.Generics.U1 @ * @ GHC.Types.Any)))
                                GHC.Generics.R1 g1
                                -> GHC.Base.fmap
                                     @ f
                                     (GHC.Base.$p1Applicative @ f $dApplicative)
                                     @ (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                          GHC.Types.Any)
                                     @ ((GHC.Generics.:+:)
                                          (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                          (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                          GHC.Types.Any)
                                     (GHC.Generics.R1
                                        @ *
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                        @ GHC.Types.Any)
                                     (GHC.Base.fmap
                                        @ f
                                        (GHC.Base.$p1Applicative @ f $dApplicative)
                                        @ (GHC.Generics.U1 GHC.Types.Any)
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1
                                             GHC.Types.Any)
                                        (\ (v :: GHC.Generics.U1 GHC.Types.Any) -> v)
                                          `cast`
                                        (<GHC.Generics.U1 GHC.Types.Any>_R
                                         ->_R Sym (GHC.Generics.N:M1[0]
                                                       <*>_N
                                                       <GHC.Generics.C>_P
                                                       <'GHC.Generics.MetaCons
                                                          "Div"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False>_P
                                                       <GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                                        (GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (GHC.Generics.U1 GHC.Types.Any)
                                           (GHC.Generics.U1 @ * @ GHC.Types.Any))) })
                       } in
                       case x of wild {
                         SEDEL.Common.Add
                         -> $j (SEDEL.Common.$fAlphaArithOp8 @ GHC.Types.Any)
                         SEDEL.Common.Sub
                         -> $j (SEDEL.Common.$fAlphaArithOp7 @ GHC.Types.Any)
                         SEDEL.Common.Mul
                         -> $j1 (SEDEL.Common.$fAlphaArithOp6 @ GHC.Types.Any)
                         SEDEL.Common.Div
                         -> $j1 (SEDEL.Common.$fAlphaArithOp5 @ GHC.Types.Any) }))
                     `cast`
                   (<f>_R (Sym (SEDEL.Common.Rep_ArithOp[0]) <GHC.Types.Any>_N))) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaArithOp_$cisEmbed :: SEDEL.Common.ArithOp -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ (ds :: SEDEL.Common.ArithOp) -> GHC.Types.False) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaArithOp_$cisPat ::
    SEDEL.Common.ArithOp
    -> Unbound.Generics.LocallyNameless.Alpha.DisjointSet
         Unbound.Generics.LocallyNameless.Name.AnyName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m2,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: SEDEL.Common.ArithOp) ->
                 case x of wild { DEFAULT ->
                 Unbound.Generics.LocallyNameless.Alpha.$fAlphaChar5
                   `cast`
                 (Sym (Unbound.Generics.LocallyNameless.Alpha.N:DisjointSet[0]
                           <Unbound.Generics.LocallyNameless.Name.AnyName>_R)) }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaArithOp_$cisTerm ::
    SEDEL.Common.ArithOp -> Data.Semigroup.Internal.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: SEDEL.Common.ArithOp) ->
                 case x of wild { DEFAULT ->
                 GHC.Types.True
                   `cast`
                 (Sym (Data.Semigroup.Internal.N:All[0])) }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaArithOp_$clfreshen' ::
    Unbound.Generics.LocallyNameless.LFresh.LFresh m =>
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> SEDEL.Common.ArithOp
    -> (SEDEL.Common.ArithOp
        -> Unbound.Generics.PermM.Perm
             Unbound.Generics.LocallyNameless.Name.AnyName
        -> m b)
    -> m b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,A><S,1*U><C(C(S)),1*C1(C1(U))>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ m :: * -> *
                   @ b
                   ($dLFresh :: Unbound.Generics.LocallyNameless.LFresh.LFresh m)
                   (ctx :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (m1 :: SEDEL.Common.ArithOp)
                   (cont :: SEDEL.Common.ArithOp
                            -> Unbound.Generics.PermM.Perm
                                 Unbound.Generics.LocallyNameless.Name.AnyName
                            -> m b) ->
                 case m1 of wild {
                   SEDEL.Common.Add
                   -> cont
                        SEDEL.Common.Add
                        (Data.Map.Internal.Tip
                           @ Unbound.Generics.LocallyNameless.Name.AnyName
                           @ Unbound.Generics.LocallyNameless.Name.AnyName)
                          `cast`
                        (Sym (Unbound.Generics.PermM.N:Perm[0]
                                  <Unbound.Generics.LocallyNameless.Name.AnyName>_N))
                   SEDEL.Common.Sub
                   -> cont
                        SEDEL.Common.Sub
                        (Data.Map.Internal.Tip
                           @ Unbound.Generics.LocallyNameless.Name.AnyName
                           @ Unbound.Generics.LocallyNameless.Name.AnyName)
                          `cast`
                        (Sym (Unbound.Generics.PermM.N:Perm[0]
                                  <Unbound.Generics.LocallyNameless.Name.AnyName>_N))
                   SEDEL.Common.Mul
                   -> cont
                        SEDEL.Common.Mul
                        (Data.Map.Internal.Tip
                           @ Unbound.Generics.LocallyNameless.Name.AnyName
                           @ Unbound.Generics.LocallyNameless.Name.AnyName)
                          `cast`
                        (Sym (Unbound.Generics.PermM.N:Perm[0]
                                  <Unbound.Generics.LocallyNameless.Name.AnyName>_N))
                   SEDEL.Common.Div
                   -> cont
                        SEDEL.Common.Div
                        (Data.Map.Internal.Tip
                           @ Unbound.Generics.LocallyNameless.Name.AnyName
                           @ Unbound.Generics.LocallyNameless.Name.AnyName)
                          `cast`
                        (Sym (Unbound.Generics.PermM.N:Perm[0]
                                  <Unbound.Generics.LocallyNameless.Name.AnyName>_N)) }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaArithOp_$cnamePatFind ::
    SEDEL.Common.ArithOp
    -> Unbound.Generics.LocallyNameless.Alpha.NamePatFind
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>m1,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: SEDEL.Common.ArithOp) ->
                 case x of wild { DEFAULT ->
                 Unbound.Generics.LocallyNameless.Alpha.$fAlpha()2
                   `cast`
                 (Sym (Unbound.Generics.LocallyNameless.Alpha.N:NamePatFind[0])) }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaArithOp_$cnthPatFind ::
    SEDEL.Common.ArithOp
    -> Unbound.Generics.LocallyNameless.Alpha.NthPatFind
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>m1,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: SEDEL.Common.ArithOp) ->
                 case x of wild { DEFAULT ->
                 (Data.Either.Left
                    @ GHC.Integer.Type.Integer
                    @ Unbound.Generics.LocallyNameless.Name.AnyName)
                   `cast`
                 (Sym (Unbound.Generics.LocallyNameless.Alpha.N:NthPatFind[0])) }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaArithOp_$copen ::
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> Unbound.Generics.LocallyNameless.Alpha.NthPatFind
    -> SEDEL.Common.ArithOp
    -> SEDEL.Common.ArithOp
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                (\ (c :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (b :: Unbound.Generics.LocallyNameless.Alpha.NthPatFind)
                   (x :: SEDEL.Common.ArithOp) ->
                 x) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaArithOp_$cswaps' ::
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> Unbound.Generics.PermM.Perm
         Unbound.Generics.LocallyNameless.Name.AnyName
    -> SEDEL.Common.ArithOp
    -> SEDEL.Common.ArithOp
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                (\ (ctx :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (perm :: Unbound.Generics.PermM.Perm
                              Unbound.Generics.LocallyNameless.Name.AnyName)
                   (x :: SEDEL.Common.ArithOp) ->
                 x) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaArithOp_$cto ::
    GHC.Generics.Rep SEDEL.Common.ArithOp x -> SEDEL.Common.ArithOp
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ x
                   (ds :: GHC.Generics.Rep SEDEL.Common.ArithOp x) ->
                 case ds
                        `cast`
                      ((Sub (SEDEL.Common.Rep_ArithOp[0]) ; GHC.Generics.N:M1[0]
                                                                <*>_N
                                                                <GHC.Generics.D>_P
                                                                <'GHC.Generics.MetaData
                                                                   "ArithOp"
                                                                   "SEDEL.Common"
                                                                   "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                                                   'GHC.Types.False>_P
                                                                <(GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Add"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1
                                                                  GHC.Generics.:+: GHC.Generics.M1
                                                                                     GHC.Generics.C
                                                                                     ('GHC.Generics.MetaCons
                                                                                        "Sub"
                                                                                        'GHC.Generics.PrefixI
                                                                                        'GHC.Types.False)
                                                                                     GHC.Generics.U1)
                                                                 GHC.Generics.:+: (GHC.Generics.M1
                                                                                     GHC.Generics.C
                                                                                     ('GHC.Generics.MetaCons
                                                                                        "Mul"
                                                                                        'GHC.Generics.PrefixI
                                                                                        'GHC.Types.False)
                                                                                     GHC.Generics.U1
                                                                                   GHC.Generics.:+: GHC.Generics.M1
                                                                                                      GHC.Generics.C
                                                                                                      ('GHC.Generics.MetaCons
                                                                                                         "Div"
                                                                                                         'GHC.Generics.PrefixI
                                                                                                         'GHC.Types.False)
                                                                                                      GHC.Generics.U1)>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "Add" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           SEDEL.Common.Add }
                        GHC.Generics.R1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           SEDEL.Common.Sub } }
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           SEDEL.Common.Mul }
                        GHC.Generics.R1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "Div" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           SEDEL.Common.Div } } }) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fAlphaCompOp ::
    Unbound.Generics.LocallyNameless.Alpha.Alpha SEDEL.Common.CompOp
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ SEDEL.Common.CompOp
                  SEDEL.Common.$fShowCompOp
                  SEDEL.Common.$fAlphaCompOp_$caeq'
                  SEDEL.Common.$fAlphaCompOp_$cfvAny'
                  SEDEL.Common.$fAlphaCompOp_$cclose
                  SEDEL.Common.$fAlphaCompOp_$copen
                  SEDEL.Common.$fAlphaCompOp_$cisPat
                  SEDEL.Common.$fAlphaCompOp_$cisTerm
                  SEDEL.Common.$fAlphaCompOp_$cisEmbed
                  SEDEL.Common.$fAlphaCompOp_$cnthPatFind
                  SEDEL.Common.$fAlphaCompOp_$cnamePatFind
                  SEDEL.Common.$fAlphaCompOp_$cswaps'
                  SEDEL.Common.$fAlphaCompOp_$clfreshen'
                  SEDEL.Common.$fAlphaCompOp_$cfreshen'
                  SEDEL.Common.$fAlphaCompOp_$cacompare' -}
daa3f54736e3f81d2c049bbf6395f88d
  $fAlphaCompOp1 ::
    (SEDEL.Common.CompOp,
     Unbound.Generics.PermM.Perm
       Unbound.Generics.LocallyNameless.Name.AnyName)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((SEDEL.Common.Neq,
                  (Data.Map.Internal.Tip
                     @ Unbound.Generics.LocallyNameless.Name.AnyName
                     @ Unbound.Generics.LocallyNameless.Name.AnyName)
                    `cast`
                  (Sym (Unbound.Generics.PermM.N:Perm[0]
                            <Unbound.Generics.LocallyNameless.Name.AnyName>_N)))) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fAlphaCompOp2 ::
    (SEDEL.Common.CompOp,
     Unbound.Generics.PermM.Perm
       Unbound.Generics.LocallyNameless.Name.AnyName)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((SEDEL.Common.Equ,
                  (Data.Map.Internal.Tip
                     @ Unbound.Generics.LocallyNameless.Name.AnyName
                     @ Unbound.Generics.LocallyNameless.Name.AnyName)
                    `cast`
                  (Sym (Unbound.Generics.PermM.N:Perm[0]
                            <Unbound.Generics.LocallyNameless.Name.AnyName>_N)))) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fAlphaCompOp3 ::
    (SEDEL.Common.CompOp,
     Unbound.Generics.PermM.Perm
       Unbound.Generics.LocallyNameless.Name.AnyName)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((SEDEL.Common.Gt,
                  (Data.Map.Internal.Tip
                     @ Unbound.Generics.LocallyNameless.Name.AnyName
                     @ Unbound.Generics.LocallyNameless.Name.AnyName)
                    `cast`
                  (Sym (Unbound.Generics.PermM.N:Perm[0]
                            <Unbound.Generics.LocallyNameless.Name.AnyName>_N)))) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fAlphaCompOp4 ::
    (SEDEL.Common.CompOp,
     Unbound.Generics.PermM.Perm
       Unbound.Generics.LocallyNameless.Name.AnyName)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((SEDEL.Common.Lt,
                  (Data.Map.Internal.Tip
                     @ Unbound.Generics.LocallyNameless.Name.AnyName
                     @ Unbound.Generics.LocallyNameless.Name.AnyName)
                    `cast`
                  (Sym (Unbound.Generics.PermM.N:Perm[0]
                            <Unbound.Generics.LocallyNameless.Name.AnyName>_N)))) -}
474e9ad562a12e3544f161833b01ef47
  $fAlphaCompOp5 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
f0f3d414f3878b99b131ce5159c19a4b
  $fAlphaCompOp6 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
7abb05bb0cf142f629ea9a945b3dc545
  $fAlphaCompOp7 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
5839db1c2c3fc7d55a4f6c851a723ca5
  $fAlphaCompOp8 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fAlphaCompOp_$cacompare' ::
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> SEDEL.Common.CompOp -> SEDEL.Common.CompOp -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (w1 :: SEDEL.Common.CompOp)
                   (w2 :: SEDEL.Common.CompOp) ->
                 SEDEL.Common.$w$cacompare'1 w1 w2) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fAlphaCompOp_$caeq' ::
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> SEDEL.Common.CompOp -> SEDEL.Common.CompOp -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (c :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (x :: SEDEL.Common.CompOp)
                   (y :: SEDEL.Common.CompOp) ->
                 case x of wild {
                   SEDEL.Common.Lt
                   -> case y of wild1 {
                        SEDEL.Common.Lt -> GHC.Types.True
                        SEDEL.Common.Gt -> GHC.Types.False
                        SEDEL.Common.Equ -> GHC.Types.False
                        SEDEL.Common.Neq -> GHC.Types.False }
                   SEDEL.Common.Gt
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False SEDEL.Common.Gt -> GHC.Types.True }
                   SEDEL.Common.Equ
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False SEDEL.Common.Equ -> GHC.Types.True }
                   SEDEL.Common.Neq
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.False
                        SEDEL.Common.Neq -> GHC.Types.True } }) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fAlphaCompOp_$cclose ::
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> Unbound.Generics.LocallyNameless.Alpha.NamePatFind
    -> SEDEL.Common.CompOp
    -> SEDEL.Common.CompOp
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                (\ (c :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (b :: Unbound.Generics.LocallyNameless.Alpha.NamePatFind)
                   (x :: SEDEL.Common.CompOp) ->
                 x) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fAlphaCompOp_$cfreshen' ::
    Unbound.Generics.LocallyNameless.Fresh.Fresh m =>
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> SEDEL.Common.CompOp
    -> m (SEDEL.Common.CompOp,
          Unbound.Generics.PermM.Perm
            Unbound.Generics.LocallyNameless.Name.AnyName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLC(S)L)L),1*U(1*U(A,A,A,1*C1(U),A),A)><L,A><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: Unbound.Generics.LocallyNameless.Fresh.Fresh m)
                   (w1 :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (w2 :: SEDEL.Common.CompOp) ->
                 case w of ww { Unbound.Generics.LocallyNameless.Fresh.C:Fresh ww1 ww2 ->
                 case ww1 of ww3 { GHC.Base.C:Monad ww4 ww5 ww6 ww7 ww8 ->
                 SEDEL.Common.$w$cfreshen'1 @ m ww7 w2 } }) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fAlphaCompOp_$cfvAny' ::
    (Data.Functor.Contravariant.Contravariant f,
     GHC.Base.Applicative f) =>
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> (Unbound.Generics.LocallyNameless.Name.AnyName
        -> f Unbound.Generics.LocallyNameless.Name.AnyName)
    -> SEDEL.Common.CompOp
    -> f SEDEL.Common.CompOp
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,U(1*U(C(C(U)),A),C(U),A,A,A,A)><L,A><L,A>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ f :: * -> *
                   ($dContravariant :: Data.Functor.Contravariant.Contravariant f)
                   ($dApplicative :: GHC.Base.Applicative f) ->
                 let {
                   $dFunctor :: GHC.Base.Functor f
                   = GHC.Base.$p1Applicative @ f $dApplicative
                 } in
                 \ (c :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (nfn :: Unbound.Generics.LocallyNameless.Name.AnyName
                           -> f Unbound.Generics.LocallyNameless.Name.AnyName) ->
                 let {
                   f1 :: f (GHC.Generics.Rep SEDEL.Common.CompOp GHC.Types.Any)
                         -> f SEDEL.Common.CompOp
                   = GHC.Base.fmap
                       @ f
                       $dFunctor
                       @ (GHC.Generics.Rep SEDEL.Common.CompOp GHC.Types.Any)
                       @ SEDEL.Common.CompOp
                       (SEDEL.Common.$fAlphaCompOp_$cto @ GHC.Types.Any)
                 } in
                 let {
                   f2 :: f ((GHC.Generics.:+:)
                              (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1
                               GHC.Generics.:+: GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                  GHC.Generics.U1)
                              (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1
                               GHC.Generics.:+: GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                  GHC.Generics.U1)
                              GHC.Types.Any)
                         -> f (GHC.Generics.M1
                                 GHC.Generics.D
                                 ('GHC.Generics.MetaData
                                    "CompOp"
                                    "SEDEL.Common"
                                    "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                    'GHC.Types.False)
                                 ((GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Gt"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                  GHC.Generics.:+: (GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Equ"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1
                                                    GHC.Generics.:+: GHC.Generics.C1
                                                                       ('GHC.Generics.MetaCons
                                                                          "Neq"
                                                                          'GHC.Generics.PrefixI
                                                                          'GHC.Types.False)
                                                                       GHC.Generics.U1))
                                 GHC.Types.Any)
                   = GHC.Base.fmap
                       @ f
                       (GHC.Base.$p1Applicative @ f $dApplicative)
                       @ ((GHC.Generics.:+:)
                            (GHC.Generics.C1
                               ('GHC.Generics.MetaCons
                                  "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               GHC.Generics.U1
                             GHC.Generics.:+: GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                GHC.Generics.U1)
                            (GHC.Generics.C1
                               ('GHC.Generics.MetaCons
                                  "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               GHC.Generics.U1
                             GHC.Generics.:+: GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                GHC.Generics.U1)
                            GHC.Types.Any)
                       @ (GHC.Generics.M1
                            GHC.Generics.D
                            ('GHC.Generics.MetaData
                               "CompOp"
                               "SEDEL.Common"
                               "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                               'GHC.Types.False)
                            ((GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1
                              GHC.Generics.:+: GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 GHC.Generics.U1)
                             GHC.Generics.:+: (GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 GHC.Generics.U1
                                               GHC.Generics.:+: GHC.Generics.C1
                                                                  ('GHC.Generics.MetaCons
                                                                     "Neq"
                                                                     'GHC.Generics.PrefixI
                                                                     'GHC.Types.False)
                                                                  GHC.Generics.U1))
                            GHC.Types.Any)
                       (\ (v :: (GHC.Generics.:+:)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Gt"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Neq"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                  GHC.Types.Any) ->
                        v)
                         `cast`
                       (<(GHC.Generics.:+:)
                           (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               GHC.Generics.U1)
                           (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               GHC.Generics.U1)
                           GHC.Types.Any>_R
                        ->_R Sym (GHC.Generics.N:M1[0]
                                      <*>_N
                                      <GHC.Generics.D>_P
                                      <'GHC.Generics.MetaData
                                         "CompOp"
                                         "SEDEL.Common"
                                         "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                         'GHC.Types.False>_P
                                      <(GHC.Generics.C1
                                          ('GHC.Generics.MetaCons
                                             "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.C1
                                                           ('GHC.Generics.MetaCons
                                                              "Gt"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1)
                                       GHC.Generics.:+: (GHC.Generics.C1
                                                           ('GHC.Generics.MetaCons
                                                              "Equ"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1
                                                         GHC.Generics.:+: GHC.Generics.C1
                                                                            ('GHC.Generics.MetaCons
                                                                               "Neq"
                                                                               'GHC.Generics.PrefixI
                                                                               'GHC.Types.False)
                                                                            GHC.Generics.U1)>_R) <GHC.Types.Any>_N)
                 } in
                 let {
                   $dFunctor1 :: GHC.Base.Functor f
                   = GHC.Base.$p1Applicative @ f $dApplicative
                 } in
                 \ (x :: SEDEL.Common.CompOp) ->
                 f1
                   (f2
                      (let {
                         $j :: (GHC.Generics.:+:)
                                 (GHC.Generics.C1
                                    ('GHC.Generics.MetaCons
                                       "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    GHC.Generics.U1)
                                 (GHC.Generics.C1
                                    ('GHC.Generics.MetaCons
                                       "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    GHC.Generics.U1)
                                 GHC.Types.Any
                               -> f ((GHC.Generics.:+:)
                                       (GHC.Generics.C1
                                          ('GHC.Generics.MetaCons
                                             "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.C1
                                                           ('GHC.Generics.MetaCons
                                                              "Gt"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1)
                                       (GHC.Generics.C1
                                          ('GHC.Generics.MetaCons
                                             "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.C1
                                                           ('GHC.Generics.MetaCons
                                                              "Neq"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1)
                                       GHC.Types.Any)
                           <join 1> {- Arity: 1 -}
                         = \ (f3 :: (GHC.Generics.:+:)
                                      (GHC.Generics.C1
                                         ('GHC.Generics.MetaCons
                                            "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                                      (GHC.Generics.C1
                                         ('GHC.Generics.MetaCons
                                            "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                                      GHC.Types.Any)[OneShot] ->
                           GHC.Base.fmap
                             @ f
                             $dFunctor1
                             @ ((GHC.Generics.:+:)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1)
                                  GHC.Types.Any)
                             @ ((GHC.Generics.:+:)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Gt"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Neq"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                  GHC.Types.Any)
                             (GHC.Generics.L1
                                @ *
                                @ (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Gt"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                @ (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Neq"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                @ GHC.Types.Any)
                             (case f3 of wild {
                                GHC.Generics.L1 f4
                                -> GHC.Base.fmap
                                     @ f
                                     (GHC.Base.$p1Applicative @ f $dApplicative)
                                     @ (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                          GHC.Types.Any)
                                     @ ((GHC.Generics.:+:)
                                          (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                          (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                          GHC.Types.Any)
                                     (GHC.Generics.L1
                                        @ *
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                        @ GHC.Types.Any)
                                     (GHC.Base.fmap
                                        @ f
                                        (GHC.Base.$p1Applicative @ f $dApplicative)
                                        @ (GHC.Generics.U1 GHC.Types.Any)
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1
                                             GHC.Types.Any)
                                        (\ (v :: GHC.Generics.U1 GHC.Types.Any) -> v)
                                          `cast`
                                        (<GHC.Generics.U1 GHC.Types.Any>_R
                                         ->_R Sym (GHC.Generics.N:M1[0]
                                                       <*>_N
                                                       <GHC.Generics.C>_P
                                                       <'GHC.Generics.MetaCons
                                                          "Lt"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False>_P
                                                       <GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                                        (GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (GHC.Generics.U1 GHC.Types.Any)
                                           (GHC.Generics.U1 @ * @ GHC.Types.Any)))
                                GHC.Generics.R1 g2
                                -> GHC.Base.fmap
                                     @ f
                                     (GHC.Base.$p1Applicative @ f $dApplicative)
                                     @ (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                          GHC.Types.Any)
                                     @ ((GHC.Generics.:+:)
                                          (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                          (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                          GHC.Types.Any)
                                     (GHC.Generics.R1
                                        @ *
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                        @ GHC.Types.Any)
                                     (GHC.Base.fmap
                                        @ f
                                        (GHC.Base.$p1Applicative @ f $dApplicative)
                                        @ (GHC.Generics.U1 GHC.Types.Any)
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1
                                             GHC.Types.Any)
                                        (\ (v :: GHC.Generics.U1 GHC.Types.Any) -> v)
                                          `cast`
                                        (<GHC.Generics.U1 GHC.Types.Any>_R
                                         ->_R Sym (GHC.Generics.N:M1[0]
                                                       <*>_N
                                                       <GHC.Generics.C>_P
                                                       <'GHC.Generics.MetaCons
                                                          "Gt"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False>_P
                                                       <GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                                        (GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (GHC.Generics.U1 GHC.Types.Any)
                                           (GHC.Generics.U1 @ * @ GHC.Types.Any))) })
                       } in
                       let {
                         $j1 :: (GHC.Generics.:+:)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1)
                                  GHC.Types.Any
                                -> f ((GHC.Generics.:+:)
                                        (GHC.Generics.C1
                                           ('GHC.Generics.MetaCons
                                              "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                           GHC.Generics.U1
                                         GHC.Generics.:+: GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Gt"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1)
                                        (GHC.Generics.C1
                                           ('GHC.Generics.MetaCons
                                              "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                           GHC.Generics.U1
                                         GHC.Generics.:+: GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Neq"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1)
                                        GHC.Types.Any)
                           <join 1> {- Arity: 1 -}
                         = \ (g2 :: (GHC.Generics.:+:)
                                      (GHC.Generics.C1
                                         ('GHC.Generics.MetaCons
                                            "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                                      (GHC.Generics.C1
                                         ('GHC.Generics.MetaCons
                                            "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                                      GHC.Types.Any)[OneShot] ->
                           GHC.Base.fmap
                             @ f
                             $dFunctor1
                             @ ((GHC.Generics.:+:)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1)
                                  GHC.Types.Any)
                             @ ((GHC.Generics.:+:)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Gt"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Neq"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                  GHC.Types.Any)
                             (GHC.Generics.R1
                                @ *
                                @ (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Gt"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                @ (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Neq"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                @ GHC.Types.Any)
                             (case g2 of wild {
                                GHC.Generics.L1 f3
                                -> GHC.Base.fmap
                                     @ f
                                     (GHC.Base.$p1Applicative @ f $dApplicative)
                                     @ (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                          GHC.Types.Any)
                                     @ ((GHC.Generics.:+:)
                                          (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                          (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                          GHC.Types.Any)
                                     (GHC.Generics.L1
                                        @ *
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                        @ GHC.Types.Any)
                                     (GHC.Base.fmap
                                        @ f
                                        (GHC.Base.$p1Applicative @ f $dApplicative)
                                        @ (GHC.Generics.U1 GHC.Types.Any)
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1
                                             GHC.Types.Any)
                                        (\ (v :: GHC.Generics.U1 GHC.Types.Any) -> v)
                                          `cast`
                                        (<GHC.Generics.U1 GHC.Types.Any>_R
                                         ->_R Sym (GHC.Generics.N:M1[0]
                                                       <*>_N
                                                       <GHC.Generics.C>_P
                                                       <'GHC.Generics.MetaCons
                                                          "Equ"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False>_P
                                                       <GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                                        (GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (GHC.Generics.U1 GHC.Types.Any)
                                           (GHC.Generics.U1 @ * @ GHC.Types.Any)))
                                GHC.Generics.R1 g1
                                -> GHC.Base.fmap
                                     @ f
                                     (GHC.Base.$p1Applicative @ f $dApplicative)
                                     @ (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                          GHC.Types.Any)
                                     @ ((GHC.Generics.:+:)
                                          (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                          (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                          GHC.Types.Any)
                                     (GHC.Generics.R1
                                        @ *
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                                        @ GHC.Types.Any)
                                     (GHC.Base.fmap
                                        @ f
                                        (GHC.Base.$p1Applicative @ f $dApplicative)
                                        @ (GHC.Generics.U1 GHC.Types.Any)
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1
                                             GHC.Types.Any)
                                        (\ (v :: GHC.Generics.U1 GHC.Types.Any) -> v)
                                          `cast`
                                        (<GHC.Generics.U1 GHC.Types.Any>_R
                                         ->_R Sym (GHC.Generics.N:M1[0]
                                                       <*>_N
                                                       <GHC.Generics.C>_P
                                                       <'GHC.Generics.MetaCons
                                                          "Neq"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False>_P
                                                       <GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                                        (GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (GHC.Generics.U1 GHC.Types.Any)
                                           (GHC.Generics.U1 @ * @ GHC.Types.Any))) })
                       } in
                       case x of wild {
                         SEDEL.Common.Lt -> $j (SEDEL.Common.$fAlphaCompOp8 @ GHC.Types.Any)
                         SEDEL.Common.Gt -> $j (SEDEL.Common.$fAlphaCompOp7 @ GHC.Types.Any)
                         SEDEL.Common.Equ
                         -> $j1 (SEDEL.Common.$fAlphaCompOp6 @ GHC.Types.Any)
                         SEDEL.Common.Neq
                         -> $j1 (SEDEL.Common.$fAlphaCompOp5 @ GHC.Types.Any) }))
                     `cast`
                   (<f>_R (Sym (SEDEL.Common.Rep_CompOp[0]) <GHC.Types.Any>_N))) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fAlphaCompOp_$cisEmbed :: SEDEL.Common.CompOp -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ (ds :: SEDEL.Common.CompOp) -> GHC.Types.False) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fAlphaCompOp_$cisPat ::
    SEDEL.Common.CompOp
    -> Unbound.Generics.LocallyNameless.Alpha.DisjointSet
         Unbound.Generics.LocallyNameless.Name.AnyName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m2,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: SEDEL.Common.CompOp) ->
                 case x of wild { DEFAULT ->
                 Unbound.Generics.LocallyNameless.Alpha.$fAlphaChar5
                   `cast`
                 (Sym (Unbound.Generics.LocallyNameless.Alpha.N:DisjointSet[0]
                           <Unbound.Generics.LocallyNameless.Name.AnyName>_R)) }) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fAlphaCompOp_$cisTerm ::
    SEDEL.Common.CompOp -> Data.Semigroup.Internal.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: SEDEL.Common.CompOp) ->
                 case x of wild { DEFAULT ->
                 GHC.Types.True
                   `cast`
                 (Sym (Data.Semigroup.Internal.N:All[0])) }) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fAlphaCompOp_$clfreshen' ::
    Unbound.Generics.LocallyNameless.LFresh.LFresh m =>
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> SEDEL.Common.CompOp
    -> (SEDEL.Common.CompOp
        -> Unbound.Generics.PermM.Perm
             Unbound.Generics.LocallyNameless.Name.AnyName
        -> m b)
    -> m b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,A><S,1*U><C(C(S)),1*C1(C1(U))>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ m :: * -> *
                   @ b
                   ($dLFresh :: Unbound.Generics.LocallyNameless.LFresh.LFresh m)
                   (ctx :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (m1 :: SEDEL.Common.CompOp)
                   (cont :: SEDEL.Common.CompOp
                            -> Unbound.Generics.PermM.Perm
                                 Unbound.Generics.LocallyNameless.Name.AnyName
                            -> m b) ->
                 case m1 of wild {
                   SEDEL.Common.Lt
                   -> cont
                        SEDEL.Common.Lt
                        (Data.Map.Internal.Tip
                           @ Unbound.Generics.LocallyNameless.Name.AnyName
                           @ Unbound.Generics.LocallyNameless.Name.AnyName)
                          `cast`
                        (Sym (Unbound.Generics.PermM.N:Perm[0]
                                  <Unbound.Generics.LocallyNameless.Name.AnyName>_N))
                   SEDEL.Common.Gt
                   -> cont
                        SEDEL.Common.Gt
                        (Data.Map.Internal.Tip
                           @ Unbound.Generics.LocallyNameless.Name.AnyName
                           @ Unbound.Generics.LocallyNameless.Name.AnyName)
                          `cast`
                        (Sym (Unbound.Generics.PermM.N:Perm[0]
                                  <Unbound.Generics.LocallyNameless.Name.AnyName>_N))
                   SEDEL.Common.Equ
                   -> cont
                        SEDEL.Common.Equ
                        (Data.Map.Internal.Tip
                           @ Unbound.Generics.LocallyNameless.Name.AnyName
                           @ Unbound.Generics.LocallyNameless.Name.AnyName)
                          `cast`
                        (Sym (Unbound.Generics.PermM.N:Perm[0]
                                  <Unbound.Generics.LocallyNameless.Name.AnyName>_N))
                   SEDEL.Common.Neq
                   -> cont
                        SEDEL.Common.Neq
                        (Data.Map.Internal.Tip
                           @ Unbound.Generics.LocallyNameless.Name.AnyName
                           @ Unbound.Generics.LocallyNameless.Name.AnyName)
                          `cast`
                        (Sym (Unbound.Generics.PermM.N:Perm[0]
                                  <Unbound.Generics.LocallyNameless.Name.AnyName>_N)) }) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fAlphaCompOp_$cnamePatFind ::
    SEDEL.Common.CompOp
    -> Unbound.Generics.LocallyNameless.Alpha.NamePatFind
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>m1,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: SEDEL.Common.CompOp) ->
                 case x of wild { DEFAULT ->
                 Unbound.Generics.LocallyNameless.Alpha.$fAlpha()2
                   `cast`
                 (Sym (Unbound.Generics.LocallyNameless.Alpha.N:NamePatFind[0])) }) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fAlphaCompOp_$cnthPatFind ::
    SEDEL.Common.CompOp
    -> Unbound.Generics.LocallyNameless.Alpha.NthPatFind
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>m1,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: SEDEL.Common.CompOp) ->
                 case x of wild { DEFAULT ->
                 (Data.Either.Left
                    @ GHC.Integer.Type.Integer
                    @ Unbound.Generics.LocallyNameless.Name.AnyName)
                   `cast`
                 (Sym (Unbound.Generics.LocallyNameless.Alpha.N:NthPatFind[0])) }) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fAlphaCompOp_$copen ::
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> Unbound.Generics.LocallyNameless.Alpha.NthPatFind
    -> SEDEL.Common.CompOp
    -> SEDEL.Common.CompOp
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                (\ (c :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (b :: Unbound.Generics.LocallyNameless.Alpha.NthPatFind)
                   (x :: SEDEL.Common.CompOp) ->
                 x) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fAlphaCompOp_$cswaps' ::
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> Unbound.Generics.PermM.Perm
         Unbound.Generics.LocallyNameless.Name.AnyName
    -> SEDEL.Common.CompOp
    -> SEDEL.Common.CompOp
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                (\ (ctx :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (perm :: Unbound.Generics.PermM.Perm
                              Unbound.Generics.LocallyNameless.Name.AnyName)
                   (x :: SEDEL.Common.CompOp) ->
                 x) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fAlphaCompOp_$cto ::
    GHC.Generics.Rep SEDEL.Common.CompOp x -> SEDEL.Common.CompOp
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ x (ds :: GHC.Generics.Rep SEDEL.Common.CompOp x) ->
                 case ds
                        `cast`
                      ((Sub (SEDEL.Common.Rep_CompOp[0]) ; GHC.Generics.N:M1[0]
                                                               <*>_N
                                                               <GHC.Generics.D>_P
                                                               <'GHC.Generics.MetaData
                                                                  "CompOp"
                                                                  "SEDEL.Common"
                                                                  "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                                                  'GHC.Types.False>_P
                                                               <(GHC.Generics.M1
                                                                   GHC.Generics.C
                                                                   ('GHC.Generics.MetaCons
                                                                      "Lt"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   GHC.Generics.U1
                                                                 GHC.Generics.:+: GHC.Generics.M1
                                                                                    GHC.Generics.C
                                                                                    ('GHC.Generics.MetaCons
                                                                                       "Gt"
                                                                                       'GHC.Generics.PrefixI
                                                                                       'GHC.Types.False)
                                                                                    GHC.Generics.U1)
                                                                GHC.Generics.:+: (GHC.Generics.M1
                                                                                    GHC.Generics.C
                                                                                    ('GHC.Generics.MetaCons
                                                                                       "Equ"
                                                                                       'GHC.Generics.PrefixI
                                                                                       'GHC.Types.False)
                                                                                    GHC.Generics.U1
                                                                                  GHC.Generics.:+: GHC.Generics.M1
                                                                                                     GHC.Generics.C
                                                                                                     ('GHC.Generics.MetaCons
                                                                                                        "Neq"
                                                                                                        'GHC.Generics.PrefixI
                                                                                                        'GHC.Types.False)
                                                                                                     GHC.Generics.U1)>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           SEDEL.Common.Lt }
                        GHC.Generics.R1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           SEDEL.Common.Gt } }
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           SEDEL.Common.Equ }
                        GHC.Generics.R1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           SEDEL.Common.Neq } } }) -}
d876d99f20cce7257c46364013f67fae
  $fAlphaLogicalOp ::
    Unbound.Generics.LocallyNameless.Alpha.Alpha SEDEL.Common.LogicalOp
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ SEDEL.Common.LogicalOp
                  SEDEL.Common.$fShowLogicalOp
                  SEDEL.Common.$fAlphaLogicalOp_$caeq'
                  SEDEL.Common.$fAlphaLogicalOp_$cfvAny'
                  SEDEL.Common.$fAlphaLogicalOp_$cclose
                  SEDEL.Common.$fAlphaLogicalOp_$copen
                  SEDEL.Common.$fAlphaLogicalOp_$cisPat
                  SEDEL.Common.$fAlphaLogicalOp_$cisTerm
                  SEDEL.Common.$fAlphaLogicalOp_$cisEmbed
                  SEDEL.Common.$fAlphaLogicalOp_$cnthPatFind
                  SEDEL.Common.$fAlphaLogicalOp_$cnamePatFind
                  SEDEL.Common.$fAlphaLogicalOp_$cswaps'
                  SEDEL.Common.$fAlphaLogicalOp_$clfreshen'
                  SEDEL.Common.$fAlphaLogicalOp_$cfreshen'
                  SEDEL.Common.$fAlphaLogicalOp_$cacompare' -}
d876d99f20cce7257c46364013f67fae
  $fAlphaLogicalOp1 ::
    (SEDEL.Common.LogicalOp,
     Unbound.Generics.PermM.Perm
       Unbound.Generics.LocallyNameless.Name.AnyName)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((SEDEL.Common.LOr,
                  (Data.Map.Internal.Tip
                     @ Unbound.Generics.LocallyNameless.Name.AnyName
                     @ Unbound.Generics.LocallyNameless.Name.AnyName)
                    `cast`
                  (Sym (Unbound.Generics.PermM.N:Perm[0]
                            <Unbound.Generics.LocallyNameless.Name.AnyName>_N)))) -}
d876d99f20cce7257c46364013f67fae
  $fAlphaLogicalOp2 ::
    (SEDEL.Common.LogicalOp,
     Unbound.Generics.PermM.Perm
       Unbound.Generics.LocallyNameless.Name.AnyName)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((SEDEL.Common.LAnd,
                  (Data.Map.Internal.Tip
                     @ Unbound.Generics.LocallyNameless.Name.AnyName
                     @ Unbound.Generics.LocallyNameless.Name.AnyName)
                    `cast`
                  (Sym (Unbound.Generics.PermM.N:Perm[0]
                            <Unbound.Generics.LocallyNameless.Name.AnyName>_N)))) -}
d876d99f20cce7257c46364013f67fae
  $fAlphaLogicalOp_$cacompare' ::
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> SEDEL.Common.LogicalOp
    -> SEDEL.Common.LogicalOp
    -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (c :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (eta :: SEDEL.Common.LogicalOp)
                   (eta1 :: SEDEL.Common.LogicalOp) ->
                 case eta of wild {
                   SEDEL.Common.LAnd
                   -> case eta1 of wild1 {
                        SEDEL.Common.LAnd -> GHC.Types.EQ
                        SEDEL.Common.LOr -> GHC.Types.LT }
                   SEDEL.Common.LOr
                   -> case eta1 of wild1 {
                        SEDEL.Common.LAnd -> GHC.Types.GT
                        SEDEL.Common.LOr -> GHC.Types.EQ } }) -}
d876d99f20cce7257c46364013f67fae
  $fAlphaLogicalOp_$caeq' ::
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> SEDEL.Common.LogicalOp
    -> SEDEL.Common.LogicalOp
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (c :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (x :: SEDEL.Common.LogicalOp)
                   (y :: SEDEL.Common.LogicalOp) ->
                 case x of wild {
                   SEDEL.Common.LAnd
                   -> case y of wild1 {
                        SEDEL.Common.LAnd -> GHC.Types.True
                        SEDEL.Common.LOr -> GHC.Types.False }
                   SEDEL.Common.LOr
                   -> case y of wild1 {
                        SEDEL.Common.LAnd -> GHC.Types.False
                        SEDEL.Common.LOr -> GHC.Types.True } }) -}
d876d99f20cce7257c46364013f67fae
  $fAlphaLogicalOp_$cclose ::
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> Unbound.Generics.LocallyNameless.Alpha.NamePatFind
    -> SEDEL.Common.LogicalOp
    -> SEDEL.Common.LogicalOp
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                (\ (c :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (b :: Unbound.Generics.LocallyNameless.Alpha.NamePatFind)
                   (x :: SEDEL.Common.LogicalOp) ->
                 x) -}
d876d99f20cce7257c46364013f67fae
  $fAlphaLogicalOp_$cfreshen' ::
    Unbound.Generics.LocallyNameless.Fresh.Fresh m =>
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> SEDEL.Common.LogicalOp
    -> m (SEDEL.Common.LogicalOp,
          Unbound.Generics.PermM.Perm
            Unbound.Generics.LocallyNameless.Name.AnyName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLC(S)L)L),1*U(1*U(A,A,A,1*C1(U),A),A)><L,A><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: Unbound.Generics.LocallyNameless.Fresh.Fresh m)
                   (w1 :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (w2 :: SEDEL.Common.LogicalOp) ->
                 case w of ww { Unbound.Generics.LocallyNameless.Fresh.C:Fresh ww1 ww2 ->
                 case ww1 of ww3 { GHC.Base.C:Monad ww4 ww5 ww6 ww7 ww8 ->
                 SEDEL.Common.$w$cfreshen'2 @ m ww7 w2 } }) -}
d876d99f20cce7257c46364013f67fae
  $fAlphaLogicalOp_$cfvAny' ::
    (Data.Functor.Contravariant.Contravariant f,
     GHC.Base.Applicative f) =>
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> (Unbound.Generics.LocallyNameless.Name.AnyName
        -> f Unbound.Generics.LocallyNameless.Name.AnyName)
    -> SEDEL.Common.LogicalOp
    -> f SEDEL.Common.LogicalOp
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,U(1*U(C(C(U)),A),C(U),A,A,A,A)><L,A><L,A>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ f :: * -> *
                   ($dContravariant :: Data.Functor.Contravariant.Contravariant f)
                   ($dApplicative :: GHC.Base.Applicative f) ->
                 let {
                   $dFunctor :: GHC.Base.Functor f
                   = GHC.Base.$p1Applicative @ f $dApplicative
                 } in
                 \ (c :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (nfn :: Unbound.Generics.LocallyNameless.Name.AnyName
                           -> f Unbound.Generics.LocallyNameless.Name.AnyName) ->
                 let {
                   f1 :: f (GHC.Generics.Rep SEDEL.Common.LogicalOp GHC.Types.Any)
                         -> f SEDEL.Common.LogicalOp
                   = GHC.Base.fmap
                       @ f
                       $dFunctor
                       @ (GHC.Generics.Rep SEDEL.Common.LogicalOp GHC.Types.Any)
                       @ SEDEL.Common.LogicalOp
                       (SEDEL.Common.$fAlphaLogicalOp_$cto @ GHC.Types.Any)
                 } in
                 let {
                   f2 :: f ((GHC.Generics.:+:)
                              (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1)
                              (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "LOr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1)
                              GHC.Types.Any)
                         -> f (GHC.Generics.M1
                                 GHC.Generics.D
                                 ('GHC.Generics.MetaData
                                    "LogicalOp"
                                    "SEDEL.Common"
                                    "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                    'GHC.Types.False)
                                 (GHC.Generics.C1
                                    ('GHC.Generics.MetaCons
                                       "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    GHC.Generics.U1
                                  GHC.Generics.:+: GHC.Generics.C1
                                                     ('GHC.Generics.MetaCons
                                                        "LOr"
                                                        'GHC.Generics.PrefixI
                                                        'GHC.Types.False)
                                                     GHC.Generics.U1)
                                 GHC.Types.Any)
                   = GHC.Base.fmap
                       @ f
                       (GHC.Base.$p1Applicative @ f $dApplicative)
                       @ ((GHC.Generics.:+:)
                            (GHC.Generics.C1
                               ('GHC.Generics.MetaCons
                                  "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               GHC.Generics.U1)
                            (GHC.Generics.C1
                               ('GHC.Generics.MetaCons
                                  "LOr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               GHC.Generics.U1)
                            GHC.Types.Any)
                       @ (GHC.Generics.M1
                            GHC.Generics.D
                            ('GHC.Generics.MetaData
                               "LogicalOp"
                               "SEDEL.Common"
                               "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                               'GHC.Types.False)
                            (GHC.Generics.C1
                               ('GHC.Generics.MetaCons
                                  "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               GHC.Generics.U1
                             GHC.Generics.:+: GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "LOr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                GHC.Generics.U1)
                            GHC.Types.Any)
                       (\ (v :: (GHC.Generics.:+:)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "LOr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1)
                                  GHC.Types.Any) ->
                        v)
                         `cast`
                       (<(GHC.Generics.:+:)
                           (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1)
                           (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "LOr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1)
                           GHC.Types.Any>_R
                        ->_R Sym (GHC.Generics.N:M1[0]
                                      <*>_N
                                      <GHC.Generics.D>_P
                                      <'GHC.Generics.MetaData
                                         "LogicalOp"
                                         "SEDEL.Common"
                                         "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                         'GHC.Types.False>_P
                                      <GHC.Generics.C1
                                         ('GHC.Generics.MetaCons
                                            "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1
                                       GHC.Generics.:+: GHC.Generics.C1
                                                          ('GHC.Generics.MetaCons
                                                             "LOr"
                                                             'GHC.Generics.PrefixI
                                                             'GHC.Types.False)
                                                          GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                 } in
                 let {
                   $dFunctor1 :: GHC.Base.Functor f
                   = GHC.Base.$p1Applicative @ f $dApplicative
                 } in
                 \ (x :: SEDEL.Common.LogicalOp) ->
                 f1
                   (f2
                      (case x of wild {
                         SEDEL.Common.LAnd
                         -> GHC.Base.fmap
                              @ f
                              $dFunctor1
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   GHC.Generics.U1
                                   GHC.Types.Any)
                              @ ((GHC.Generics.:+:)
                                   (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      GHC.Generics.U1)
                                   (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "LOr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      GHC.Generics.U1)
                                   GHC.Types.Any)
                              (GHC.Generics.L1
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      GHC.Generics.U1)
                                 @ (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "LOr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      GHC.Generics.U1)
                                 @ GHC.Types.Any)
                              (GHC.Base.fmap
                                 @ f
                                 (GHC.Base.$p1Applicative @ f $dApplicative)
                                 @ (GHC.Generics.U1 GHC.Types.Any)
                                 @ (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      GHC.Generics.U1
                                      GHC.Types.Any)
                                 (\ (v :: GHC.Generics.U1 GHC.Types.Any) -> v)
                                   `cast`
                                 (<GHC.Generics.U1 GHC.Types.Any>_R
                                  ->_R Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.C>_P
                                                <'GHC.Generics.MetaCons
                                                   "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                                <GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                                 (GHC.Base.pure
                                    @ f
                                    $dApplicative
                                    @ (GHC.Generics.U1 GHC.Types.Any)
                                    (GHC.Generics.U1 @ * @ GHC.Types.Any)))
                         SEDEL.Common.LOr
                         -> GHC.Base.fmap
                              @ f
                              $dFunctor1
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "LOr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   GHC.Generics.U1
                                   GHC.Types.Any)
                              @ ((GHC.Generics.:+:)
                                   (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      GHC.Generics.U1)
                                   (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "LOr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      GHC.Generics.U1)
                                   GHC.Types.Any)
                              (GHC.Generics.R1
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      GHC.Generics.U1)
                                 @ (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "LOr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      GHC.Generics.U1)
                                 @ GHC.Types.Any)
                              (GHC.Base.fmap
                                 @ f
                                 (GHC.Base.$p1Applicative @ f $dApplicative)
                                 @ (GHC.Generics.U1 GHC.Types.Any)
                                 @ (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "LOr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      GHC.Generics.U1
                                      GHC.Types.Any)
                                 (\ (v :: GHC.Generics.U1 GHC.Types.Any) -> v)
                                   `cast`
                                 (<GHC.Generics.U1 GHC.Types.Any>_R
                                  ->_R Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.C>_P
                                                <'GHC.Generics.MetaCons
                                                   "LOr" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                                <GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                                 (GHC.Base.pure
                                    @ f
                                    $dApplicative
                                    @ (GHC.Generics.U1 GHC.Types.Any)
                                    (GHC.Generics.U1 @ * @ GHC.Types.Any))) }))
                     `cast`
                   (<f>_R (Sym (SEDEL.Common.Rep_LogicalOp[0]) <GHC.Types.Any>_N))) -}
d876d99f20cce7257c46364013f67fae
  $fAlphaLogicalOp_$cisEmbed ::
    SEDEL.Common.LogicalOp -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ (ds :: SEDEL.Common.LogicalOp) -> GHC.Types.False) -}
d876d99f20cce7257c46364013f67fae
  $fAlphaLogicalOp_$cisPat ::
    SEDEL.Common.LogicalOp
    -> Unbound.Generics.LocallyNameless.Alpha.DisjointSet
         Unbound.Generics.LocallyNameless.Name.AnyName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m2,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: SEDEL.Common.LogicalOp) ->
                 case x of wild { DEFAULT ->
                 Unbound.Generics.LocallyNameless.Alpha.$fAlphaChar5
                   `cast`
                 (Sym (Unbound.Generics.LocallyNameless.Alpha.N:DisjointSet[0]
                           <Unbound.Generics.LocallyNameless.Name.AnyName>_R)) }) -}
d876d99f20cce7257c46364013f67fae
  $fAlphaLogicalOp_$cisTerm ::
    SEDEL.Common.LogicalOp -> Data.Semigroup.Internal.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: SEDEL.Common.LogicalOp) ->
                 case x of wild { DEFAULT ->
                 GHC.Types.True
                   `cast`
                 (Sym (Data.Semigroup.Internal.N:All[0])) }) -}
d876d99f20cce7257c46364013f67fae
  $fAlphaLogicalOp_$clfreshen' ::
    Unbound.Generics.LocallyNameless.LFresh.LFresh m =>
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> SEDEL.Common.LogicalOp
    -> (SEDEL.Common.LogicalOp
        -> Unbound.Generics.PermM.Perm
             Unbound.Generics.LocallyNameless.Name.AnyName
        -> m b)
    -> m b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,A><S,1*U><C(C(S)),1*C1(C1(U))>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ m :: * -> *
                   @ b
                   ($dLFresh :: Unbound.Generics.LocallyNameless.LFresh.LFresh m)
                   (ctx :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (m1 :: SEDEL.Common.LogicalOp)
                   (cont :: SEDEL.Common.LogicalOp
                            -> Unbound.Generics.PermM.Perm
                                 Unbound.Generics.LocallyNameless.Name.AnyName
                            -> m b) ->
                 case m1 of wild {
                   SEDEL.Common.LAnd
                   -> cont
                        SEDEL.Common.LAnd
                        (Data.Map.Internal.Tip
                           @ Unbound.Generics.LocallyNameless.Name.AnyName
                           @ Unbound.Generics.LocallyNameless.Name.AnyName)
                          `cast`
                        (Sym (Unbound.Generics.PermM.N:Perm[0]
                                  <Unbound.Generics.LocallyNameless.Name.AnyName>_N))
                   SEDEL.Common.LOr
                   -> cont
                        SEDEL.Common.LOr
                        (Data.Map.Internal.Tip
                           @ Unbound.Generics.LocallyNameless.Name.AnyName
                           @ Unbound.Generics.LocallyNameless.Name.AnyName)
                          `cast`
                        (Sym (Unbound.Generics.PermM.N:Perm[0]
                                  <Unbound.Generics.LocallyNameless.Name.AnyName>_N)) }) -}
d876d99f20cce7257c46364013f67fae
  $fAlphaLogicalOp_$cnamePatFind ::
    SEDEL.Common.LogicalOp
    -> Unbound.Generics.LocallyNameless.Alpha.NamePatFind
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>m1,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: SEDEL.Common.LogicalOp) ->
                 case x of wild { DEFAULT ->
                 Unbound.Generics.LocallyNameless.Alpha.$fAlpha()2
                   `cast`
                 (Sym (Unbound.Generics.LocallyNameless.Alpha.N:NamePatFind[0])) }) -}
d876d99f20cce7257c46364013f67fae
  $fAlphaLogicalOp_$cnthPatFind ::
    SEDEL.Common.LogicalOp
    -> Unbound.Generics.LocallyNameless.Alpha.NthPatFind
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>m1,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: SEDEL.Common.LogicalOp) ->
                 case x of wild { DEFAULT ->
                 (Data.Either.Left
                    @ GHC.Integer.Type.Integer
                    @ Unbound.Generics.LocallyNameless.Name.AnyName)
                   `cast`
                 (Sym (Unbound.Generics.LocallyNameless.Alpha.N:NthPatFind[0])) }) -}
d876d99f20cce7257c46364013f67fae
  $fAlphaLogicalOp_$copen ::
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> Unbound.Generics.LocallyNameless.Alpha.NthPatFind
    -> SEDEL.Common.LogicalOp
    -> SEDEL.Common.LogicalOp
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                (\ (c :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (b :: Unbound.Generics.LocallyNameless.Alpha.NthPatFind)
                   (x :: SEDEL.Common.LogicalOp) ->
                 x) -}
d876d99f20cce7257c46364013f67fae
  $fAlphaLogicalOp_$cswaps' ::
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> Unbound.Generics.PermM.Perm
         Unbound.Generics.LocallyNameless.Name.AnyName
    -> SEDEL.Common.LogicalOp
    -> SEDEL.Common.LogicalOp
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                (\ (ctx :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (perm :: Unbound.Generics.PermM.Perm
                              Unbound.Generics.LocallyNameless.Name.AnyName)
                   (x :: SEDEL.Common.LogicalOp) ->
                 x) -}
d876d99f20cce7257c46364013f67fae
  $fAlphaLogicalOp_$cto ::
    GHC.Generics.Rep SEDEL.Common.LogicalOp x -> SEDEL.Common.LogicalOp
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (ds :: GHC.Generics.Rep SEDEL.Common.LogicalOp x) ->
                 case ds
                        `cast`
                      ((Sub (SEDEL.Common.Rep_LogicalOp[0]) ; GHC.Generics.N:M1[0]
                                                                  <*>_N
                                                                  <GHC.Generics.D>_P
                                                                  <'GHC.Generics.MetaData
                                                                     "LogicalOp"
                                                                     "SEDEL.Common"
                                                                     "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                                                     'GHC.Types.False>_P
                                                                  <GHC.Generics.M1
                                                                     GHC.Generics.C
                                                                     ('GHC.Generics.MetaCons
                                                                        "LAnd"
                                                                        'GHC.Generics.PrefixI
                                                                        'GHC.Types.False)
                                                                     GHC.Generics.U1
                                                                   GHC.Generics.:+: GHC.Generics.M1
                                                                                      GHC.Generics.C
                                                                                      ('GHC.Generics.MetaCons
                                                                                         "LOr"
                                                                                         'GHC.Generics.PrefixI
                                                                                         'GHC.Types.False)
                                                                                      GHC.Generics.U1>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1
                             `cast`
                           (GHC.Generics.N:M1[0]
                                <*>_N
                                <GHC.Generics.C>_P
                                <'GHC.Generics.MetaCons
                                   "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                <GHC.Generics.U1>_R <x>_N) of wild1 { GHC.Generics.U1 ->
                      SEDEL.Common.LAnd }
                   GHC.Generics.R1 ds1
                   -> case ds1
                             `cast`
                           (GHC.Generics.N:M1[0]
                                <*>_N
                                <GHC.Generics.C>_P
                                <'GHC.Generics.MetaCons
                                   "LOr" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                <GHC.Generics.U1>_R <x>_N) of wild1 { GHC.Generics.U1 ->
                      SEDEL.Common.LOr } }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaOperation ::
    Unbound.Generics.LocallyNameless.Alpha.Alpha SEDEL.Common.Operation
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ SEDEL.Common.Operation
                  SEDEL.Common.$fShowOperation
                  SEDEL.Common.$fAlphaOperation_$caeq'
                  SEDEL.Common.$fAlphaOperation_$cfvAny'
                  SEDEL.Common.$fAlphaOperation_$cclose
                  SEDEL.Common.$fAlphaOperation_$copen
                  SEDEL.Common.$fAlphaOperation_$cisPat
                  SEDEL.Common.$fAlphaOperation_$cisTerm
                  SEDEL.Common.$fAlphaOperation_$cisEmbed
                  SEDEL.Common.$fAlphaOperation_$cnthPatFind
                  SEDEL.Common.$fAlphaOperation_$cnamePatFind
                  SEDEL.Common.$fAlphaOperation_$cswaps'
                  SEDEL.Common.$fAlphaOperation_$clfreshen'
                  SEDEL.Common.$fAlphaOperation_$cfreshen'
                  SEDEL.Common.$fAlphaOperation_$cacompare' -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaOperation1 ::
    m (SEDEL.Common.Operation,
       Unbound.Generics.PermM.Perm
         Unbound.Generics.LocallyNameless.Name.AnyName)
    -> m (SEDEL.Common.Operation,
          Unbound.Generics.PermM.Perm
            Unbound.Generics.LocallyNameless.Name.AnyName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ m :: * -> *
                   (mf :: m (SEDEL.Common.Operation,
                             Unbound.Generics.PermM.Perm
                               Unbound.Generics.LocallyNameless.Name.AnyName)) ->
                 mf) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaOperation_$cacompare' ::
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> SEDEL.Common.Operation
    -> SEDEL.Common.Operation
    -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (w1 :: SEDEL.Common.Operation)
                   (w2 :: SEDEL.Common.Operation) ->
                 SEDEL.Common.$w$cacompare'2 w1 w2) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaOperation_$caeq' ::
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> SEDEL.Common.Operation
    -> SEDEL.Common.Operation
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (c :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (x :: SEDEL.Common.Operation)
                   (y :: SEDEL.Common.Operation) ->
                 let {
                   $j :: (GHC.Generics.:+:)
                           (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.Rec0 SEDEL.Common.CompOp)))
                           (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.Rec0 SEDEL.Common.LogicalOp)))
                           GHC.Types.Any
                         -> GHC.Types.Bool
                     <join 1> {- Arity: 1 -}
                   = \ (g1 :: (GHC.Generics.:+:)
                                (GHC.Generics.C1
                                   ('GHC.Generics.MetaCons
                                      "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 SEDEL.Common.CompOp)))
                                (GHC.Generics.C1
                                   ('GHC.Generics.MetaCons
                                      "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 SEDEL.Common.LogicalOp)))
                                GHC.Types.Any)[OneShot] ->
                     let {
                       $j1 :: (GHC.Generics.:+:)
                                (GHC.Generics.C1
                                   ('GHC.Generics.MetaCons
                                      "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 SEDEL.Common.CompOp)))
                                (GHC.Generics.C1
                                   ('GHC.Generics.MetaCons
                                      "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 SEDEL.Common.LogicalOp)))
                                GHC.Types.Any
                              -> GHC.Types.Bool
                         <join 1> {- Arity: 1 -}
                       = \ (g2 :: (GHC.Generics.:+:)
                                    (GHC.Generics.C1
                                       ('GHC.Generics.MetaCons
                                          "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                       (GHC.Generics.S1
                                          ('GHC.Generics.MetaSel
                                             'GHC.Maybe.Nothing
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.Rec0 SEDEL.Common.CompOp)))
                                    (GHC.Generics.C1
                                       ('GHC.Generics.MetaCons
                                          "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                       (GHC.Generics.S1
                                          ('GHC.Generics.MetaSel
                                             'GHC.Maybe.Nothing
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.Rec0 SEDEL.Common.LogicalOp)))
                                    GHC.Types.Any)[OneShot] ->
                         case g1 of wild {
                           GHC.Generics.L1 f1
                           -> case g2 of wild1 {
                                GHC.Generics.L1 f2
                                -> case f1
                                          `cast`
                                        ((GHC.Generics.N:M1[0]
                                              <*>_N
                                              <GHC.Generics.C>_P
                                              <'GHC.Generics.MetaCons
                                                 "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                              <GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    'GHC.Maybe.Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.Rec0
                                                    SEDEL.Common.CompOp)>_R ; GHC.Generics.N:M1[0]
                                                                                  <*>_N
                                                                                  <GHC.Generics.S>_P
                                                                                  <'GHC.Generics.MetaSel
                                                                                     'GHC.Maybe.Nothing
                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                     'GHC.Generics.DecidedLazy>_P
                                                                                  <GHC.Generics.K1
                                                                                     GHC.Generics.R
                                                                                     SEDEL.Common.CompOp>_R) <GHC.Types.Any>_N ; GHC.Generics.N:K1[0]
                                                                                                                                     <*>_N
                                                                                                                                     <GHC.Generics.R>_P
                                                                                                                                     <SEDEL.Common.CompOp>_R
                                                                                                                                     <GHC.Types.Any>_P) of wild2 {
                                     SEDEL.Common.Lt
                                     -> case f2
                                               `cast`
                                             ((GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.C>_P
                                                   <'GHC.Generics.MetaCons
                                                      "Comp"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False>_P
                                                   <GHC.Generics.M1
                                                      GHC.Generics.S
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Maybe.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         SEDEL.Common.CompOp)>_R ; GHC.Generics.N:M1[0]
                                                                                       <*>_N
                                                                                       <GHC.Generics.S>_P
                                                                                       <'GHC.Generics.MetaSel
                                                                                          'GHC.Maybe.Nothing
                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                          'GHC.Generics.DecidedLazy>_P
                                                                                       <GHC.Generics.K1
                                                                                          GHC.Generics.R
                                                                                          SEDEL.Common.CompOp>_R) <GHC.Types.Any>_N ; GHC.Generics.N:K1[0]
                                                                                                                                          <*>_N
                                                                                                                                          <GHC.Generics.R>_P
                                                                                                                                          <SEDEL.Common.CompOp>_R
                                                                                                                                          <GHC.Types.Any>_P) of wild3 {
                                          SEDEL.Common.Lt -> GHC.Types.True
                                          SEDEL.Common.Gt -> GHC.Types.False
                                          SEDEL.Common.Equ -> GHC.Types.False
                                          SEDEL.Common.Neq -> GHC.Types.False }
                                     SEDEL.Common.Gt
                                     -> case f2
                                               `cast`
                                             ((GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.C>_P
                                                   <'GHC.Generics.MetaCons
                                                      "Comp"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False>_P
                                                   <GHC.Generics.M1
                                                      GHC.Generics.S
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Maybe.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         SEDEL.Common.CompOp)>_R ; GHC.Generics.N:M1[0]
                                                                                       <*>_N
                                                                                       <GHC.Generics.S>_P
                                                                                       <'GHC.Generics.MetaSel
                                                                                          'GHC.Maybe.Nothing
                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                          'GHC.Generics.DecidedLazy>_P
                                                                                       <GHC.Generics.K1
                                                                                          GHC.Generics.R
                                                                                          SEDEL.Common.CompOp>_R) <GHC.Types.Any>_N ; GHC.Generics.N:K1[0]
                                                                                                                                          <*>_N
                                                                                                                                          <GHC.Generics.R>_P
                                                                                                                                          <SEDEL.Common.CompOp>_R
                                                                                                                                          <GHC.Types.Any>_P) of wild3 {
                                          DEFAULT -> GHC.Types.False
                                          SEDEL.Common.Gt -> GHC.Types.True }
                                     SEDEL.Common.Equ
                                     -> case f2
                                               `cast`
                                             ((GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.C>_P
                                                   <'GHC.Generics.MetaCons
                                                      "Comp"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False>_P
                                                   <GHC.Generics.M1
                                                      GHC.Generics.S
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Maybe.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         SEDEL.Common.CompOp)>_R ; GHC.Generics.N:M1[0]
                                                                                       <*>_N
                                                                                       <GHC.Generics.S>_P
                                                                                       <'GHC.Generics.MetaSel
                                                                                          'GHC.Maybe.Nothing
                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                          'GHC.Generics.DecidedLazy>_P
                                                                                       <GHC.Generics.K1
                                                                                          GHC.Generics.R
                                                                                          SEDEL.Common.CompOp>_R) <GHC.Types.Any>_N ; GHC.Generics.N:K1[0]
                                                                                                                                          <*>_N
                                                                                                                                          <GHC.Generics.R>_P
                                                                                                                                          <SEDEL.Common.CompOp>_R
                                                                                                                                          <GHC.Types.Any>_P) of wild3 {
                                          DEFAULT -> GHC.Types.False
                                          SEDEL.Common.Equ -> GHC.Types.True }
                                     SEDEL.Common.Neq
                                     -> case f2
                                               `cast`
                                             ((GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.C>_P
                                                   <'GHC.Generics.MetaCons
                                                      "Comp"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False>_P
                                                   <GHC.Generics.M1
                                                      GHC.Generics.S
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Maybe.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         SEDEL.Common.CompOp)>_R ; GHC.Generics.N:M1[0]
                                                                                       <*>_N
                                                                                       <GHC.Generics.S>_P
                                                                                       <'GHC.Generics.MetaSel
                                                                                          'GHC.Maybe.Nothing
                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                          'GHC.Generics.DecidedLazy>_P
                                                                                       <GHC.Generics.K1
                                                                                          GHC.Generics.R
                                                                                          SEDEL.Common.CompOp>_R) <GHC.Types.Any>_N ; GHC.Generics.N:K1[0]
                                                                                                                                          <*>_N
                                                                                                                                          <GHC.Generics.R>_P
                                                                                                                                          <SEDEL.Common.CompOp>_R
                                                                                                                                          <GHC.Types.Any>_P) of wild3 {
                                          DEFAULT -> GHC.Types.False
                                          SEDEL.Common.Neq -> GHC.Types.True } }
                                GHC.Generics.R1 ipv -> GHC.Types.False }
                           GHC.Generics.R1 g4
                           -> case g2 of wild1 {
                                GHC.Generics.L1 ipv -> GHC.Types.False
                                GHC.Generics.R1 g5
                                -> case g4
                                          `cast`
                                        ((GHC.Generics.N:M1[0]
                                              <*>_N
                                              <GHC.Generics.C>_P
                                              <'GHC.Generics.MetaCons
                                                 "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                              <GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    'GHC.Maybe.Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.Rec0
                                                    SEDEL.Common.LogicalOp)>_R ; GHC.Generics.N:M1[0]
                                                                                     <*>_N
                                                                                     <GHC.Generics.S>_P
                                                                                     <'GHC.Generics.MetaSel
                                                                                        'GHC.Maybe.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy>_P
                                                                                     <GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        SEDEL.Common.LogicalOp>_R) <GHC.Types.Any>_N ; GHC.Generics.N:K1[0]
                                                                                                                                           <*>_N
                                                                                                                                           <GHC.Generics.R>_P
                                                                                                                                           <SEDEL.Common.LogicalOp>_R
                                                                                                                                           <GHC.Types.Any>_P) of wild2 {
                                     SEDEL.Common.LAnd
                                     -> case g5
                                               `cast`
                                             ((GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.C>_P
                                                   <'GHC.Generics.MetaCons
                                                      "Logical"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False>_P
                                                   <GHC.Generics.M1
                                                      GHC.Generics.S
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Maybe.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         SEDEL.Common.LogicalOp)>_R ; GHC.Generics.N:M1[0]
                                                                                          <*>_N
                                                                                          <GHC.Generics.S>_P
                                                                                          <'GHC.Generics.MetaSel
                                                                                             'GHC.Maybe.Nothing
                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                             'GHC.Generics.DecidedLazy>_P
                                                                                          <GHC.Generics.K1
                                                                                             GHC.Generics.R
                                                                                             SEDEL.Common.LogicalOp>_R) <GHC.Types.Any>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                <*>_N
                                                                                                                                                <GHC.Generics.R>_P
                                                                                                                                                <SEDEL.Common.LogicalOp>_R
                                                                                                                                                <GHC.Types.Any>_P) of wild3 {
                                          SEDEL.Common.LAnd -> GHC.Types.True
                                          SEDEL.Common.LOr -> GHC.Types.False }
                                     SEDEL.Common.LOr
                                     -> case g5
                                               `cast`
                                             ((GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.C>_P
                                                   <'GHC.Generics.MetaCons
                                                      "Logical"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False>_P
                                                   <GHC.Generics.M1
                                                      GHC.Generics.S
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Maybe.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         SEDEL.Common.LogicalOp)>_R ; GHC.Generics.N:M1[0]
                                                                                          <*>_N
                                                                                          <GHC.Generics.S>_P
                                                                                          <'GHC.Generics.MetaSel
                                                                                             'GHC.Maybe.Nothing
                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                             'GHC.Generics.DecidedLazy>_P
                                                                                          <GHC.Generics.K1
                                                                                             GHC.Generics.R
                                                                                             SEDEL.Common.LogicalOp>_R) <GHC.Types.Any>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                <*>_N
                                                                                                                                                <GHC.Generics.R>_P
                                                                                                                                                <SEDEL.Common.LogicalOp>_R
                                                                                                                                                <GHC.Types.Any>_P) of wild3 {
                                          SEDEL.Common.LAnd -> GHC.Types.False
                                          SEDEL.Common.LOr -> GHC.Types.True } } } }
                     } in
                     case y of wild {
                       SEDEL.Common.Arith g2 -> GHC.Types.False
                       SEDEL.Common.Comp g2
                       -> $j1
                            (GHC.Generics.L1
                               @ *
                               @ (GHC.Generics.M1
                                    GHC.Generics.C
                                    ('GHC.Generics.MetaCons
                                       "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    (GHC.Generics.M1
                                       GHC.Generics.S
                                       ('GHC.Generics.MetaSel
                                          'GHC.Maybe.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.CompOp)))
                               @ (GHC.Generics.M1
                                    GHC.Generics.C
                                    ('GHC.Generics.MetaCons
                                       "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    (GHC.Generics.M1
                                       GHC.Generics.S
                                       ('GHC.Generics.MetaSel
                                          'GHC.Maybe.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.LogicalOp)))
                               @ GHC.Types.Any
                               g2
                                 `cast`
                               (Sym (GHC.Generics.N:K1[0]
                                         <*>_N
                                         <GHC.Generics.R>_P
                                         <SEDEL.Common.CompOp>_R
                                         <GHC.Types.Any>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                        <*>_N
                                                                        <GHC.Generics.S>_P
                                                                        <'GHC.Generics.MetaSel
                                                                           'GHC.Maybe.Nothing
                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                           'GHC.Generics.NoSourceStrictness
                                                                           'GHC.Generics.DecidedLazy>_P
                                                                        <GHC.Generics.K1
                                                                           GHC.Generics.R
                                                                           SEDEL.Common.CompOp>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                              <*>_N
                                                                                                              <GHC.Generics.C>_P
                                                                                                              <'GHC.Generics.MetaCons
                                                                                                                 "Comp"
                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                 'GHC.Types.False>_P
                                                                                                              <GHC.Generics.M1
                                                                                                                 GHC.Generics.S
                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                    'GHC.Maybe.Nothing
                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                 (GHC.Generics.K1
                                                                                                                    GHC.Generics.R
                                                                                                                    SEDEL.Common.CompOp)>_R)) <GHC.Types.Any>_N))
                       SEDEL.Common.Logical g2
                       -> $j1
                            (GHC.Generics.R1
                               @ *
                               @ (GHC.Generics.M1
                                    GHC.Generics.C
                                    ('GHC.Generics.MetaCons
                                       "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    (GHC.Generics.M1
                                       GHC.Generics.S
                                       ('GHC.Generics.MetaSel
                                          'GHC.Maybe.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.CompOp)))
                               @ (GHC.Generics.M1
                                    GHC.Generics.C
                                    ('GHC.Generics.MetaCons
                                       "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    (GHC.Generics.M1
                                       GHC.Generics.S
                                       ('GHC.Generics.MetaSel
                                          'GHC.Maybe.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.LogicalOp)))
                               @ GHC.Types.Any
                               g2
                                 `cast`
                               (Sym (GHC.Generics.N:K1[0]
                                         <*>_N
                                         <GHC.Generics.R>_P
                                         <SEDEL.Common.LogicalOp>_R
                                         <GHC.Types.Any>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                        <*>_N
                                                                        <GHC.Generics.S>_P
                                                                        <'GHC.Generics.MetaSel
                                                                           'GHC.Maybe.Nothing
                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                           'GHC.Generics.NoSourceStrictness
                                                                           'GHC.Generics.DecidedLazy>_P
                                                                        <GHC.Generics.K1
                                                                           GHC.Generics.R
                                                                           SEDEL.Common.LogicalOp>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                 <*>_N
                                                                                                                 <GHC.Generics.C>_P
                                                                                                                 <'GHC.Generics.MetaCons
                                                                                                                    "Logical"
                                                                                                                    'GHC.Generics.PrefixI
                                                                                                                    'GHC.Types.False>_P
                                                                                                                 <GHC.Generics.M1
                                                                                                                    GHC.Generics.S
                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                       'GHC.Maybe.Nothing
                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                    (GHC.Generics.K1
                                                                                                                       GHC.Generics.R
                                                                                                                       SEDEL.Common.LogicalOp)>_R)) <GHC.Types.Any>_N)) }
                 } in
                 case x of wild {
                   SEDEL.Common.Arith g1
                   -> case y of wild1 {
                        SEDEL.Common.Arith g2
                        -> case g1 of wild2 {
                             SEDEL.Common.Add
                             -> case g2 of wild3 {
                                  SEDEL.Common.Add -> GHC.Types.True
                                  SEDEL.Common.Sub -> GHC.Types.False
                                  SEDEL.Common.Mul -> GHC.Types.False
                                  SEDEL.Common.Div -> GHC.Types.False }
                             SEDEL.Common.Sub
                             -> case g2 of wild3 {
                                  DEFAULT -> GHC.Types.False SEDEL.Common.Sub -> GHC.Types.True }
                             SEDEL.Common.Mul
                             -> case g2 of wild3 {
                                  DEFAULT -> GHC.Types.False SEDEL.Common.Mul -> GHC.Types.True }
                             SEDEL.Common.Div
                             -> case g2 of wild3 {
                                  DEFAULT -> GHC.Types.False SEDEL.Common.Div -> GHC.Types.True } }
                        SEDEL.Common.Comp g2 -> GHC.Types.False
                        SEDEL.Common.Logical g2 -> GHC.Types.False }
                   SEDEL.Common.Comp g1
                   -> $j
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.CompOp)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.LogicalOp)))
                           @ GHC.Types.Any
                           g1
                             `cast`
                           (Sym (GHC.Generics.N:K1[0]
                                     <*>_N
                                     <GHC.Generics.R>_P
                                     <SEDEL.Common.CompOp>_R
                                     <GHC.Types.Any>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                    <*>_N
                                                                    <GHC.Generics.S>_P
                                                                    <'GHC.Generics.MetaSel
                                                                       'GHC.Maybe.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy>_P
                                                                    <GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       SEDEL.Common.CompOp>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                          <*>_N
                                                                                                          <GHC.Generics.C>_P
                                                                                                          <'GHC.Generics.MetaCons
                                                                                                             "Comp"
                                                                                                             'GHC.Generics.PrefixI
                                                                                                             'GHC.Types.False>_P
                                                                                                          <GHC.Generics.M1
                                                                                                             GHC.Generics.S
                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                'GHC.Maybe.Nothing
                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                             (GHC.Generics.K1
                                                                                                                GHC.Generics.R
                                                                                                                SEDEL.Common.CompOp)>_R)) <GHC.Types.Any>_N))
                   SEDEL.Common.Logical g1
                   -> $j
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.CompOp)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.LogicalOp)))
                           @ GHC.Types.Any
                           g1
                             `cast`
                           (Sym (GHC.Generics.N:K1[0]
                                     <*>_N
                                     <GHC.Generics.R>_P
                                     <SEDEL.Common.LogicalOp>_R
                                     <GHC.Types.Any>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                    <*>_N
                                                                    <GHC.Generics.S>_P
                                                                    <'GHC.Generics.MetaSel
                                                                       'GHC.Maybe.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy>_P
                                                                    <GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       SEDEL.Common.LogicalOp>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                             <*>_N
                                                                                                             <GHC.Generics.C>_P
                                                                                                             <'GHC.Generics.MetaCons
                                                                                                                "Logical"
                                                                                                                'GHC.Generics.PrefixI
                                                                                                                'GHC.Types.False>_P
                                                                                                             <GHC.Generics.M1
                                                                                                                GHC.Generics.S
                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                   'GHC.Maybe.Nothing
                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                (GHC.Generics.K1
                                                                                                                   GHC.Generics.R
                                                                                                                   SEDEL.Common.LogicalOp)>_R)) <GHC.Types.Any>_N)) }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaOperation_$cclose ::
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> Unbound.Generics.LocallyNameless.Alpha.NamePatFind
    -> SEDEL.Common.Operation
    -> SEDEL.Common.Operation
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                (\ (c :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (b :: Unbound.Generics.LocallyNameless.Alpha.NamePatFind)
                   (x :: SEDEL.Common.Operation) ->
                 x) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaOperation_$cfreshen' ::
    Unbound.Generics.LocallyNameless.Fresh.Fresh m =>
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> SEDEL.Common.Operation
    -> m (SEDEL.Common.Operation,
          Unbound.Generics.PermM.Perm
            Unbound.Generics.LocallyNameless.Name.AnyName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LC(C(S))LLL)L),1*U(1*U(A,C(C1(U)),A,C(U),A),A)><L,A><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: Unbound.Generics.LocallyNameless.Fresh.Fresh m)
                   (w1 :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (w2 :: SEDEL.Common.Operation) ->
                 case w of ww { Unbound.Generics.LocallyNameless.Fresh.C:Fresh ww1 ww2 ->
                 case ww1 of ww3 { GHC.Base.C:Monad ww4 ww5 ww6 ww7 ww8 ->
                 SEDEL.Common.$w$cfreshen'3 @ m ww5 ww7 w2 } }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaOperation_$cfvAny' ::
    (Data.Functor.Contravariant.Contravariant f,
     GHC.Base.Applicative f) =>
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> (Unbound.Generics.LocallyNameless.Name.AnyName
        -> f Unbound.Generics.LocallyNameless.Name.AnyName)
    -> SEDEL.Common.Operation
    -> f SEDEL.Common.Operation
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,U(1*U(C(C(U)),A),C(U),A,A,A,A)><L,A><L,A>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ f :: * -> *
                   ($dContravariant :: Data.Functor.Contravariant.Contravariant f)
                   ($dApplicative :: GHC.Base.Applicative f) ->
                 let {
                   $dFunctor :: GHC.Base.Functor f
                   = GHC.Base.$p1Applicative @ f $dApplicative
                 } in
                 \ (c :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (nfn :: Unbound.Generics.LocallyNameless.Name.AnyName
                           -> f Unbound.Generics.LocallyNameless.Name.AnyName) ->
                 let {
                   f1 :: f (GHC.Generics.Rep SEDEL.Common.Operation GHC.Types.Any)
                         -> f SEDEL.Common.Operation
                   = GHC.Base.fmap
                       @ f
                       $dFunctor
                       @ (GHC.Generics.Rep SEDEL.Common.Operation GHC.Types.Any)
                       @ SEDEL.Common.Operation
                       (SEDEL.Common.$fAlphaOperation_$cto @ GHC.Types.Any)
                 } in
                 let {
                   f2 :: f ((GHC.Generics.:+:)
                              (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 SEDEL.Common.ArithOp)))
                              (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 SEDEL.Common.CompOp))
                               GHC.Generics.:+: GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "Logical"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  (GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0 SEDEL.Common.LogicalOp)))
                              GHC.Types.Any)
                         -> f (GHC.Generics.M1
                                 GHC.Generics.D
                                 ('GHC.Generics.MetaData
                                    "Operation"
                                    "SEDEL.Common"
                                    "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                    'GHC.Types.False)
                                 (GHC.Generics.C1
                                    ('GHC.Generics.MetaCons
                                       "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    (GHC.Generics.S1
                                       ('GHC.Generics.MetaSel
                                          'GHC.Maybe.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       (GHC.Generics.Rec0 SEDEL.Common.ArithOp))
                                  GHC.Generics.:+: (GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Comp"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      (GHC.Generics.S1
                                                         ('GHC.Generics.MetaSel
                                                            'GHC.Maybe.Nothing
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.Rec0 SEDEL.Common.CompOp))
                                                    GHC.Generics.:+: GHC.Generics.C1
                                                                       ('GHC.Generics.MetaCons
                                                                          "Logical"
                                                                          'GHC.Generics.PrefixI
                                                                          'GHC.Types.False)
                                                                       (GHC.Generics.S1
                                                                          ('GHC.Generics.MetaSel
                                                                             'GHC.Maybe.Nothing
                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                             'GHC.Generics.NoSourceStrictness
                                                                             'GHC.Generics.DecidedLazy)
                                                                          (GHC.Generics.Rec0
                                                                             SEDEL.Common.LogicalOp))))
                                 GHC.Types.Any)
                   = GHC.Base.fmap
                       @ f
                       (GHC.Base.$p1Applicative @ f $dApplicative)
                       @ ((GHC.Generics.:+:)
                            (GHC.Generics.C1
                               ('GHC.Generics.MetaCons
                                  "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               (GHC.Generics.S1
                                  ('GHC.Generics.MetaSel
                                     'GHC.Maybe.Nothing
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy)
                                  (GHC.Generics.Rec0 SEDEL.Common.ArithOp)))
                            (GHC.Generics.C1
                               ('GHC.Generics.MetaCons
                                  "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               (GHC.Generics.S1
                                  ('GHC.Generics.MetaSel
                                     'GHC.Maybe.Nothing
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy)
                                  (GHC.Generics.Rec0 SEDEL.Common.CompOp))
                             GHC.Generics.:+: GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                (GHC.Generics.S1
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Maybe.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.Rec0 SEDEL.Common.LogicalOp)))
                            GHC.Types.Any)
                       @ (GHC.Generics.M1
                            GHC.Generics.D
                            ('GHC.Generics.MetaData
                               "Operation"
                               "SEDEL.Common"
                               "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                               'GHC.Types.False)
                            (GHC.Generics.C1
                               ('GHC.Generics.MetaCons
                                  "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               (GHC.Generics.S1
                                  ('GHC.Generics.MetaSel
                                     'GHC.Maybe.Nothing
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy)
                                  (GHC.Generics.Rec0 SEDEL.Common.ArithOp))
                             GHC.Generics.:+: (GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 (GHC.Generics.S1
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Maybe.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.Rec0 SEDEL.Common.CompOp))
                                               GHC.Generics.:+: GHC.Generics.C1
                                                                  ('GHC.Generics.MetaCons
                                                                     "Logical"
                                                                     'GHC.Generics.PrefixI
                                                                     'GHC.Types.False)
                                                                  (GHC.Generics.S1
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Maybe.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.Rec0
                                                                        SEDEL.Common.LogicalOp))))
                            GHC.Types.Any)
                       (\ (v :: (GHC.Generics.:+:)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     (GHC.Generics.S1
                                        ('GHC.Generics.MetaSel
                                           'GHC.Maybe.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.Rec0 SEDEL.Common.ArithOp)))
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     (GHC.Generics.S1
                                        ('GHC.Generics.MetaSel
                                           'GHC.Maybe.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.Rec0 SEDEL.Common.CompOp))
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Logical"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      (GHC.Generics.S1
                                                         ('GHC.Generics.MetaSel
                                                            'GHC.Maybe.Nothing
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.Rec0
                                                            SEDEL.Common.LogicalOp)))
                                  GHC.Types.Any) ->
                        v)
                         `cast`
                       (<(GHC.Generics.:+:)
                           (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.Rec0 SEDEL.Common.ArithOp)))
                           (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.Rec0 SEDEL.Common.CompOp))
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.S1
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Maybe.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.Rec0 SEDEL.Common.LogicalOp)))
                           GHC.Types.Any>_R
                        ->_R Sym (GHC.Generics.N:M1[0]
                                      <*>_N
                                      <GHC.Generics.D>_P
                                      <'GHC.Generics.MetaData
                                         "Operation"
                                         "SEDEL.Common"
                                         "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                         'GHC.Types.False>_P
                                      <GHC.Generics.C1
                                         ('GHC.Generics.MetaCons
                                            "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         (GHC.Generics.S1
                                            ('GHC.Generics.MetaSel
                                               'GHC.Maybe.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.Rec0 SEDEL.Common.ArithOp))
                                       GHC.Generics.:+: (GHC.Generics.C1
                                                           ('GHC.Generics.MetaCons
                                                              "Comp"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           (GHC.Generics.S1
                                                              ('GHC.Generics.MetaSel
                                                                 'GHC.Maybe.Nothing
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.Rec0
                                                                 SEDEL.Common.CompOp))
                                                         GHC.Generics.:+: GHC.Generics.C1
                                                                            ('GHC.Generics.MetaCons
                                                                               "Logical"
                                                                               'GHC.Generics.PrefixI
                                                                               'GHC.Types.False)
                                                                            (GHC.Generics.S1
                                                                               ('GHC.Generics.MetaSel
                                                                                  'GHC.Maybe.Nothing
                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                  'GHC.Generics.DecidedLazy)
                                                                               (GHC.Generics.Rec0
                                                                                  SEDEL.Common.LogicalOp)))>_R) <GHC.Types.Any>_N)
                 } in
                 let {
                   $dFunctor1 :: GHC.Base.Functor f
                   = GHC.Base.$p1Applicative @ f $dApplicative
                 } in
                 \ (x :: SEDEL.Common.Operation) ->
                 f1
                   (f2
                      (let {
                         $j :: (GHC.Generics.:+:)
                                 (GHC.Generics.C1
                                    ('GHC.Generics.MetaCons
                                       "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    (GHC.Generics.S1
                                       ('GHC.Generics.MetaSel
                                          'GHC.Maybe.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       (GHC.Generics.Rec0 SEDEL.Common.CompOp)))
                                 (GHC.Generics.C1
                                    ('GHC.Generics.MetaCons
                                       "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    (GHC.Generics.S1
                                       ('GHC.Generics.MetaSel
                                          'GHC.Maybe.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       (GHC.Generics.Rec0 SEDEL.Common.LogicalOp)))
                                 GHC.Types.Any
                               -> f ((GHC.Generics.:+:)
                                       (GHC.Generics.C1
                                          ('GHC.Generics.MetaCons
                                             "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          (GHC.Generics.S1
                                             ('GHC.Generics.MetaSel
                                                'GHC.Maybe.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.Rec0 SEDEL.Common.ArithOp)))
                                       (GHC.Generics.C1
                                          ('GHC.Generics.MetaCons
                                             "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          (GHC.Generics.S1
                                             ('GHC.Generics.MetaSel
                                                'GHC.Maybe.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.Rec0 SEDEL.Common.CompOp))
                                        GHC.Generics.:+: GHC.Generics.C1
                                                           ('GHC.Generics.MetaCons
                                                              "Logical"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           (GHC.Generics.S1
                                                              ('GHC.Generics.MetaSel
                                                                 'GHC.Maybe.Nothing
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.Rec0
                                                                 SEDEL.Common.LogicalOp)))
                                       GHC.Types.Any)
                           <join 1> {- Arity: 1 -}
                         = \ (g2 :: (GHC.Generics.:+:)
                                      (GHC.Generics.C1
                                         ('GHC.Generics.MetaCons
                                            "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         (GHC.Generics.S1
                                            ('GHC.Generics.MetaSel
                                               'GHC.Maybe.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.Rec0 SEDEL.Common.CompOp)))
                                      (GHC.Generics.C1
                                         ('GHC.Generics.MetaCons
                                            "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         (GHC.Generics.S1
                                            ('GHC.Generics.MetaSel
                                               'GHC.Maybe.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.Rec0 SEDEL.Common.LogicalOp)))
                                      GHC.Types.Any)[OneShot] ->
                           GHC.Base.fmap
                             @ f
                             $dFunctor1
                             @ ((GHC.Generics.:+:)
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     (GHC.Generics.S1
                                        ('GHC.Generics.MetaSel
                                           'GHC.Maybe.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.Rec0 SEDEL.Common.CompOp)))
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     (GHC.Generics.S1
                                        ('GHC.Generics.MetaSel
                                           'GHC.Maybe.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.Rec0 SEDEL.Common.LogicalOp)))
                                  GHC.Types.Any)
                             @ ((GHC.Generics.:+:)
                                  (GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     (GHC.Generics.S1
                                        ('GHC.Generics.MetaSel
                                           'GHC.Maybe.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.Rec0 SEDEL.Common.ArithOp)))
                                  (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     (GHC.Generics.S1
                                        ('GHC.Generics.MetaSel
                                           'GHC.Maybe.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.Rec0 SEDEL.Common.CompOp))
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Logical"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      (GHC.Generics.S1
                                                         ('GHC.Generics.MetaSel
                                                            'GHC.Maybe.Nothing
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.Rec0
                                                            SEDEL.Common.LogicalOp)))
                                  GHC.Types.Any)
                             (GHC.Generics.R1
                                @ *
                                @ (GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     (GHC.Generics.S1
                                        ('GHC.Generics.MetaSel
                                           'GHC.Maybe.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.Rec0 SEDEL.Common.ArithOp)))
                                @ (GHC.Generics.C1
                                     ('GHC.Generics.MetaCons
                                        "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     (GHC.Generics.S1
                                        ('GHC.Generics.MetaSel
                                           'GHC.Maybe.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.Rec0 SEDEL.Common.CompOp))
                                   GHC.Generics.:+: GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Logical"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      (GHC.Generics.S1
                                                         ('GHC.Generics.MetaSel
                                                            'GHC.Maybe.Nothing
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.Rec0
                                                            SEDEL.Common.LogicalOp)))
                                @ GHC.Types.Any)
                             (case g2 of wild {
                                GHC.Generics.L1 f3
                                -> GHC.Base.fmap
                                     @ f
                                     (GHC.Base.$p1Applicative @ f $dApplicative)
                                     @ (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          (GHC.Generics.S1
                                             ('GHC.Generics.MetaSel
                                                'GHC.Maybe.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.Rec0 SEDEL.Common.CompOp))
                                          GHC.Types.Any)
                                     @ ((GHC.Generics.:+:)
                                          (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             (GHC.Generics.S1
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.Rec0 SEDEL.Common.CompOp)))
                                          (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             (GHC.Generics.S1
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.Rec0 SEDEL.Common.LogicalOp)))
                                          GHC.Types.Any)
                                     (GHC.Generics.L1
                                        @ *
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             (GHC.Generics.S1
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.Rec0 SEDEL.Common.CompOp)))
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             (GHC.Generics.S1
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.Rec0 SEDEL.Common.LogicalOp)))
                                        @ GHC.Types.Any)
                                     (GHC.Base.fmap
                                        @ f
                                        (GHC.Base.$p1Applicative @ f $dApplicative)
                                        @ (GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'GHC.Maybe.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.Rec0 SEDEL.Common.CompOp)
                                             GHC.Types.Any)
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.Rec0 SEDEL.Common.CompOp))
                                             GHC.Types.Any)
                                        (\ (v :: GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Maybe.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.Rec0 SEDEL.Common.CompOp)
                                                   GHC.Types.Any) ->
                                         v)
                                          `cast`
                                        (<GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               'GHC.Maybe.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.Rec0 SEDEL.Common.CompOp)
                                            GHC.Types.Any>_R
                                         ->_R Sym (GHC.Generics.N:M1[0]
                                                       <*>_N
                                                       <GHC.Generics.C>_P
                                                       <'GHC.Generics.MetaCons
                                                          "Comp"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False>_P
                                                       <GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             'GHC.Maybe.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.Rec0
                                                             SEDEL.Common.CompOp)>_R) <GHC.Types.Any>_N)
                                        (GHC.Base.fmap
                                           @ f
                                           (GHC.Base.$p1Applicative @ f $dApplicative)
                                           @ (GHC.Generics.K1
                                                GHC.Generics.R SEDEL.Common.CompOp GHC.Types.Any)
                                           @ (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.CompOp)
                                                GHC.Types.Any)
                                           (\ (v :: GHC.Generics.K1
                                                      GHC.Generics.R
                                                      SEDEL.Common.CompOp
                                                      GHC.Types.Any) ->
                                            v)
                                             `cast`
                                           (<GHC.Generics.K1
                                               GHC.Generics.R SEDEL.Common.CompOp GHC.Types.Any>_R
                                            ->_R Sym (GHC.Generics.N:M1[0]
                                                          <*>_N
                                                          <GHC.Generics.S>_P
                                                          <'GHC.Generics.MetaSel
                                                             'GHC.Maybe.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy>_P
                                                          <GHC.Generics.K1
                                                             GHC.Generics.R
                                                             SEDEL.Common.CompOp>_R) <GHC.Types.Any>_N)
                                           (GHC.Base.fmap
                                              @ f
                                              (GHC.Base.$p1Applicative @ f $dApplicative)
                                              @ SEDEL.Common.CompOp
                                              @ (GHC.Generics.K1
                                                   GHC.Generics.R SEDEL.Common.CompOp GHC.Types.Any)
                                              (\ (v :: SEDEL.Common.CompOp) -> v)
                                                `cast`
                                              (<SEDEL.Common.CompOp>_R
                                               ->_R Sym (GHC.Generics.N:K1[0]
                                                             <*>_N
                                                             <GHC.Generics.R>_P
                                                             <SEDEL.Common.CompOp>_R
                                                             <GHC.Types.Any>_P))
                                              (GHC.Base.fmap
                                                 @ f
                                                 (GHC.Base.$p1Applicative @ f $dApplicative)
                                                 @ (GHC.Generics.Rep
                                                      SEDEL.Common.CompOp GHC.Types.Any)
                                                 @ SEDEL.Common.CompOp
                                                 (SEDEL.Common.$fAlphaCompOp_$cto @ GHC.Types.Any)
                                                 (GHC.Base.fmap
                                                    @ f
                                                    (GHC.Base.$p1Applicative @ f $dApplicative)
                                                    @ ((GHC.Generics.:+:)
                                                         (GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Lt"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1
                                                          GHC.Generics.:+: GHC.Generics.C1
                                                                             ('GHC.Generics.MetaCons
                                                                                "Gt"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.False)
                                                                             GHC.Generics.U1)
                                                         (GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Equ"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1
                                                          GHC.Generics.:+: GHC.Generics.C1
                                                                             ('GHC.Generics.MetaCons
                                                                                "Neq"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.False)
                                                                             GHC.Generics.U1)
                                                         GHC.Types.Any)
                                                    @ (GHC.Generics.M1
                                                         GHC.Generics.D
                                                         ('GHC.Generics.MetaData
                                                            "CompOp"
                                                            "SEDEL.Common"
                                                            "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                                            'GHC.Types.False)
                                                         ((GHC.Generics.C1
                                                             ('GHC.Generics.MetaCons
                                                                "Lt"
                                                                'GHC.Generics.PrefixI
                                                                'GHC.Types.False)
                                                             GHC.Generics.U1
                                                           GHC.Generics.:+: GHC.Generics.C1
                                                                              ('GHC.Generics.MetaCons
                                                                                 "Gt"
                                                                                 'GHC.Generics.PrefixI
                                                                                 'GHC.Types.False)
                                                                              GHC.Generics.U1)
                                                          GHC.Generics.:+: (GHC.Generics.C1
                                                                              ('GHC.Generics.MetaCons
                                                                                 "Equ"
                                                                                 'GHC.Generics.PrefixI
                                                                                 'GHC.Types.False)
                                                                              GHC.Generics.U1
                                                                            GHC.Generics.:+: GHC.Generics.C1
                                                                                               ('GHC.Generics.MetaCons
                                                                                                  "Neq"
                                                                                                  'GHC.Generics.PrefixI
                                                                                                  'GHC.Types.False)
                                                                                               GHC.Generics.U1))
                                                         GHC.Types.Any)
                                                    (\ (v :: (GHC.Generics.:+:)
                                                               (GHC.Generics.C1
                                                                  ('GHC.Generics.MetaCons
                                                                     "Lt"
                                                                     'GHC.Generics.PrefixI
                                                                     'GHC.Types.False)
                                                                  GHC.Generics.U1
                                                                GHC.Generics.:+: GHC.Generics.C1
                                                                                   ('GHC.Generics.MetaCons
                                                                                      "Gt"
                                                                                      'GHC.Generics.PrefixI
                                                                                      'GHC.Types.False)
                                                                                   GHC.Generics.U1)
                                                               (GHC.Generics.C1
                                                                  ('GHC.Generics.MetaCons
                                                                     "Equ"
                                                                     'GHC.Generics.PrefixI
                                                                     'GHC.Types.False)
                                                                  GHC.Generics.U1
                                                                GHC.Generics.:+: GHC.Generics.C1
                                                                                   ('GHC.Generics.MetaCons
                                                                                      "Neq"
                                                                                      'GHC.Generics.PrefixI
                                                                                      'GHC.Types.False)
                                                                                   GHC.Generics.U1)
                                                               GHC.Types.Any) ->
                                                     v)
                                                      `cast`
                                                    (<(GHC.Generics.:+:)
                                                        (GHC.Generics.C1
                                                           ('GHC.Generics.MetaCons
                                                              "Lt"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1
                                                         GHC.Generics.:+: GHC.Generics.C1
                                                                            ('GHC.Generics.MetaCons
                                                                               "Gt"
                                                                               'GHC.Generics.PrefixI
                                                                               'GHC.Types.False)
                                                                            GHC.Generics.U1)
                                                        (GHC.Generics.C1
                                                           ('GHC.Generics.MetaCons
                                                              "Equ"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1
                                                         GHC.Generics.:+: GHC.Generics.C1
                                                                            ('GHC.Generics.MetaCons
                                                                               "Neq"
                                                                               'GHC.Generics.PrefixI
                                                                               'GHC.Types.False)
                                                                            GHC.Generics.U1)
                                                        GHC.Types.Any>_R
                                                     ->_R Sym (GHC.Generics.N:M1[0]
                                                                   <*>_N
                                                                   <GHC.Generics.D>_P
                                                                   <'GHC.Generics.MetaData
                                                                      "CompOp"
                                                                      "SEDEL.Common"
                                                                      "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                                                      'GHC.Types.False>_P
                                                                   <(GHC.Generics.C1
                                                                       ('GHC.Generics.MetaCons
                                                                          "Lt"
                                                                          'GHC.Generics.PrefixI
                                                                          'GHC.Types.False)
                                                                       GHC.Generics.U1
                                                                     GHC.Generics.:+: GHC.Generics.C1
                                                                                        ('GHC.Generics.MetaCons
                                                                                           "Gt"
                                                                                           'GHC.Generics.PrefixI
                                                                                           'GHC.Types.False)
                                                                                        GHC.Generics.U1)
                                                                    GHC.Generics.:+: (GHC.Generics.C1
                                                                                        ('GHC.Generics.MetaCons
                                                                                           "Equ"
                                                                                           'GHC.Generics.PrefixI
                                                                                           'GHC.Types.False)
                                                                                        GHC.Generics.U1
                                                                                      GHC.Generics.:+: GHC.Generics.C1
                                                                                                         ('GHC.Generics.MetaCons
                                                                                                            "Neq"
                                                                                                            'GHC.Generics.PrefixI
                                                                                                            'GHC.Types.False)
                                                                                                         GHC.Generics.U1)>_R) <GHC.Types.Any>_N)
                                                    (let {
                                                       $j1 :: (GHC.Generics.:+:)
                                                                (GHC.Generics.C1
                                                                   ('GHC.Generics.MetaCons
                                                                      "Lt"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   GHC.Generics.U1)
                                                                (GHC.Generics.C1
                                                                   ('GHC.Generics.MetaCons
                                                                      "Gt"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   GHC.Generics.U1)
                                                                GHC.Types.Any
                                                              -> f ((GHC.Generics.:+:)
                                                                      (GHC.Generics.C1
                                                                         ('GHC.Generics.MetaCons
                                                                            "Lt"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         GHC.Generics.U1
                                                                       GHC.Generics.:+: GHC.Generics.C1
                                                                                          ('GHC.Generics.MetaCons
                                                                                             "Gt"
                                                                                             'GHC.Generics.PrefixI
                                                                                             'GHC.Types.False)
                                                                                          GHC.Generics.U1)
                                                                      (GHC.Generics.C1
                                                                         ('GHC.Generics.MetaCons
                                                                            "Equ"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         GHC.Generics.U1
                                                                       GHC.Generics.:+: GHC.Generics.C1
                                                                                          ('GHC.Generics.MetaCons
                                                                                             "Neq"
                                                                                             'GHC.Generics.PrefixI
                                                                                             'GHC.Types.False)
                                                                                          GHC.Generics.U1)
                                                                      GHC.Types.Any)
                                                         <join 1> {- Arity: 1 -}
                                                       = \ (f4 :: (GHC.Generics.:+:)
                                                                    (GHC.Generics.C1
                                                                       ('GHC.Generics.MetaCons
                                                                          "Lt"
                                                                          'GHC.Generics.PrefixI
                                                                          'GHC.Types.False)
                                                                       GHC.Generics.U1)
                                                                    (GHC.Generics.C1
                                                                       ('GHC.Generics.MetaCons
                                                                          "Gt"
                                                                          'GHC.Generics.PrefixI
                                                                          'GHC.Types.False)
                                                                       GHC.Generics.U1)
                                                                    GHC.Types.Any)[OneShot] ->
                                                         GHC.Base.fmap
                                                           @ f
                                                           (GHC.Base.$p1Applicative
                                                              @ f
                                                              $dApplicative)
                                                           @ ((GHC.Generics.:+:)
                                                                (GHC.Generics.C1
                                                                   ('GHC.Generics.MetaCons
                                                                      "Lt"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   GHC.Generics.U1)
                                                                (GHC.Generics.C1
                                                                   ('GHC.Generics.MetaCons
                                                                      "Gt"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   GHC.Generics.U1)
                                                                GHC.Types.Any)
                                                           @ ((GHC.Generics.:+:)
                                                                (GHC.Generics.C1
                                                                   ('GHC.Generics.MetaCons
                                                                      "Lt"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   GHC.Generics.U1
                                                                 GHC.Generics.:+: GHC.Generics.C1
                                                                                    ('GHC.Generics.MetaCons
                                                                                       "Gt"
                                                                                       'GHC.Generics.PrefixI
                                                                                       'GHC.Types.False)
                                                                                    GHC.Generics.U1)
                                                                (GHC.Generics.C1
                                                                   ('GHC.Generics.MetaCons
                                                                      "Equ"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   GHC.Generics.U1
                                                                 GHC.Generics.:+: GHC.Generics.C1
                                                                                    ('GHC.Generics.MetaCons
                                                                                       "Neq"
                                                                                       'GHC.Generics.PrefixI
                                                                                       'GHC.Types.False)
                                                                                    GHC.Generics.U1)
                                                                GHC.Types.Any)
                                                           (GHC.Generics.L1
                                                              @ *
                                                              @ (GHC.Generics.C1
                                                                   ('GHC.Generics.MetaCons
                                                                      "Lt"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   GHC.Generics.U1
                                                                 GHC.Generics.:+: GHC.Generics.C1
                                                                                    ('GHC.Generics.MetaCons
                                                                                       "Gt"
                                                                                       'GHC.Generics.PrefixI
                                                                                       'GHC.Types.False)
                                                                                    GHC.Generics.U1)
                                                              @ (GHC.Generics.C1
                                                                   ('GHC.Generics.MetaCons
                                                                      "Equ"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   GHC.Generics.U1
                                                                 GHC.Generics.:+: GHC.Generics.C1
                                                                                    ('GHC.Generics.MetaCons
                                                                                       "Neq"
                                                                                       'GHC.Generics.PrefixI
                                                                                       'GHC.Types.False)
                                                                                    GHC.Generics.U1)
                                                              @ GHC.Types.Any)
                                                           (case f4 of wild1 {
                                                              GHC.Generics.L1 f5
                                                              -> GHC.Base.fmap
                                                                   @ f
                                                                   (GHC.Base.$p1Applicative
                                                                      @ f
                                                                      $dApplicative)
                                                                   @ (GHC.Generics.M1
                                                                        GHC.Generics.C
                                                                        ('GHC.Generics.MetaCons
                                                                           "Lt"
                                                                           'GHC.Generics.PrefixI
                                                                           'GHC.Types.False)
                                                                        GHC.Generics.U1
                                                                        GHC.Types.Any)
                                                                   @ ((GHC.Generics.:+:)
                                                                        (GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Lt"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1)
                                                                        (GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Gt"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1)
                                                                        GHC.Types.Any)
                                                                   (GHC.Generics.L1
                                                                      @ *
                                                                      @ (GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Lt"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1)
                                                                      @ (GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Gt"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1)
                                                                      @ GHC.Types.Any)
                                                                   (GHC.Base.fmap
                                                                      @ f
                                                                      (GHC.Base.$p1Applicative
                                                                         @ f
                                                                         $dApplicative)
                                                                      @ (GHC.Generics.U1
                                                                           GHC.Types.Any)
                                                                      @ (GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Lt"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1
                                                                           GHC.Types.Any)
                                                                      (\ (v :: GHC.Generics.U1
                                                                                 GHC.Types.Any) ->
                                                                       v)
                                                                        `cast`
                                                                      (<GHC.Generics.U1
                                                                          GHC.Types.Any>_R
                                                                       ->_R Sym (GHC.Generics.N:M1[0]
                                                                                     <*>_N
                                                                                     <GHC.Generics.C>_P
                                                                                     <'GHC.Generics.MetaCons
                                                                                        "Lt"
                                                                                        'GHC.Generics.PrefixI
                                                                                        'GHC.Types.False>_P
                                                                                     <GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                                                                      (GHC.Base.pure
                                                                         @ f
                                                                         $dApplicative
                                                                         @ (GHC.Generics.U1
                                                                              GHC.Types.Any)
                                                                         (GHC.Generics.U1
                                                                            @ *
                                                                            @ GHC.Types.Any)))
                                                              GHC.Generics.R1 g1
                                                              -> GHC.Base.fmap
                                                                   @ f
                                                                   (GHC.Base.$p1Applicative
                                                                      @ f
                                                                      $dApplicative)
                                                                   @ (GHC.Generics.M1
                                                                        GHC.Generics.C
                                                                        ('GHC.Generics.MetaCons
                                                                           "Gt"
                                                                           'GHC.Generics.PrefixI
                                                                           'GHC.Types.False)
                                                                        GHC.Generics.U1
                                                                        GHC.Types.Any)
                                                                   @ ((GHC.Generics.:+:)
                                                                        (GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Lt"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1)
                                                                        (GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Gt"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1)
                                                                        GHC.Types.Any)
                                                                   (GHC.Generics.R1
                                                                      @ *
                                                                      @ (GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Lt"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1)
                                                                      @ (GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Gt"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1)
                                                                      @ GHC.Types.Any)
                                                                   (GHC.Base.fmap
                                                                      @ f
                                                                      (GHC.Base.$p1Applicative
                                                                         @ f
                                                                         $dApplicative)
                                                                      @ (GHC.Generics.U1
                                                                           GHC.Types.Any)
                                                                      @ (GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Gt"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1
                                                                           GHC.Types.Any)
                                                                      (\ (v :: GHC.Generics.U1
                                                                                 GHC.Types.Any) ->
                                                                       v)
                                                                        `cast`
                                                                      (<GHC.Generics.U1
                                                                          GHC.Types.Any>_R
                                                                       ->_R Sym (GHC.Generics.N:M1[0]
                                                                                     <*>_N
                                                                                     <GHC.Generics.C>_P
                                                                                     <'GHC.Generics.MetaCons
                                                                                        "Gt"
                                                                                        'GHC.Generics.PrefixI
                                                                                        'GHC.Types.False>_P
                                                                                     <GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                                                                      (GHC.Base.pure
                                                                         @ f
                                                                         $dApplicative
                                                                         @ (GHC.Generics.U1
                                                                              GHC.Types.Any)
                                                                         (GHC.Generics.U1
                                                                            @ *
                                                                            @ GHC.Types.Any))) })
                                                     } in
                                                     let {
                                                       $j2 :: (GHC.Generics.:+:)
                                                                (GHC.Generics.C1
                                                                   ('GHC.Generics.MetaCons
                                                                      "Equ"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   GHC.Generics.U1)
                                                                (GHC.Generics.C1
                                                                   ('GHC.Generics.MetaCons
                                                                      "Neq"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   GHC.Generics.U1)
                                                                GHC.Types.Any
                                                              -> f ((GHC.Generics.:+:)
                                                                      (GHC.Generics.C1
                                                                         ('GHC.Generics.MetaCons
                                                                            "Lt"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         GHC.Generics.U1
                                                                       GHC.Generics.:+: GHC.Generics.C1
                                                                                          ('GHC.Generics.MetaCons
                                                                                             "Gt"
                                                                                             'GHC.Generics.PrefixI
                                                                                             'GHC.Types.False)
                                                                                          GHC.Generics.U1)
                                                                      (GHC.Generics.C1
                                                                         ('GHC.Generics.MetaCons
                                                                            "Equ"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         GHC.Generics.U1
                                                                       GHC.Generics.:+: GHC.Generics.C1
                                                                                          ('GHC.Generics.MetaCons
                                                                                             "Neq"
                                                                                             'GHC.Generics.PrefixI
                                                                                             'GHC.Types.False)
                                                                                          GHC.Generics.U1)
                                                                      GHC.Types.Any)
                                                         <join 1> {- Arity: 1 -}
                                                       = \ (g1 :: (GHC.Generics.:+:)
                                                                    (GHC.Generics.C1
                                                                       ('GHC.Generics.MetaCons
                                                                          "Equ"
                                                                          'GHC.Generics.PrefixI
                                                                          'GHC.Types.False)
                                                                       GHC.Generics.U1)
                                                                    (GHC.Generics.C1
                                                                       ('GHC.Generics.MetaCons
                                                                          "Neq"
                                                                          'GHC.Generics.PrefixI
                                                                          'GHC.Types.False)
                                                                       GHC.Generics.U1)
                                                                    GHC.Types.Any)[OneShot] ->
                                                         GHC.Base.fmap
                                                           @ f
                                                           (GHC.Base.$p1Applicative
                                                              @ f
                                                              $dApplicative)
                                                           @ ((GHC.Generics.:+:)
                                                                (GHC.Generics.C1
                                                                   ('GHC.Generics.MetaCons
                                                                      "Equ"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   GHC.Generics.U1)
                                                                (GHC.Generics.C1
                                                                   ('GHC.Generics.MetaCons
                                                                      "Neq"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   GHC.Generics.U1)
                                                                GHC.Types.Any)
                                                           @ ((GHC.Generics.:+:)
                                                                (GHC.Generics.C1
                                                                   ('GHC.Generics.MetaCons
                                                                      "Lt"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   GHC.Generics.U1
                                                                 GHC.Generics.:+: GHC.Generics.C1
                                                                                    ('GHC.Generics.MetaCons
                                                                                       "Gt"
                                                                                       'GHC.Generics.PrefixI
                                                                                       'GHC.Types.False)
                                                                                    GHC.Generics.U1)
                                                                (GHC.Generics.C1
                                                                   ('GHC.Generics.MetaCons
                                                                      "Equ"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   GHC.Generics.U1
                                                                 GHC.Generics.:+: GHC.Generics.C1
                                                                                    ('GHC.Generics.MetaCons
                                                                                       "Neq"
                                                                                       'GHC.Generics.PrefixI
                                                                                       'GHC.Types.False)
                                                                                    GHC.Generics.U1)
                                                                GHC.Types.Any)
                                                           (GHC.Generics.R1
                                                              @ *
                                                              @ (GHC.Generics.C1
                                                                   ('GHC.Generics.MetaCons
                                                                      "Lt"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   GHC.Generics.U1
                                                                 GHC.Generics.:+: GHC.Generics.C1
                                                                                    ('GHC.Generics.MetaCons
                                                                                       "Gt"
                                                                                       'GHC.Generics.PrefixI
                                                                                       'GHC.Types.False)
                                                                                    GHC.Generics.U1)
                                                              @ (GHC.Generics.C1
                                                                   ('GHC.Generics.MetaCons
                                                                      "Equ"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   GHC.Generics.U1
                                                                 GHC.Generics.:+: GHC.Generics.C1
                                                                                    ('GHC.Generics.MetaCons
                                                                                       "Neq"
                                                                                       'GHC.Generics.PrefixI
                                                                                       'GHC.Types.False)
                                                                                    GHC.Generics.U1)
                                                              @ GHC.Types.Any)
                                                           (case g1 of wild1 {
                                                              GHC.Generics.L1 f4
                                                              -> GHC.Base.fmap
                                                                   @ f
                                                                   (GHC.Base.$p1Applicative
                                                                      @ f
                                                                      $dApplicative)
                                                                   @ (GHC.Generics.M1
                                                                        GHC.Generics.C
                                                                        ('GHC.Generics.MetaCons
                                                                           "Equ"
                                                                           'GHC.Generics.PrefixI
                                                                           'GHC.Types.False)
                                                                        GHC.Generics.U1
                                                                        GHC.Types.Any)
                                                                   @ ((GHC.Generics.:+:)
                                                                        (GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Equ"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1)
                                                                        (GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Neq"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1)
                                                                        GHC.Types.Any)
                                                                   (GHC.Generics.L1
                                                                      @ *
                                                                      @ (GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Equ"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1)
                                                                      @ (GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Neq"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1)
                                                                      @ GHC.Types.Any)
                                                                   (GHC.Base.fmap
                                                                      @ f
                                                                      (GHC.Base.$p1Applicative
                                                                         @ f
                                                                         $dApplicative)
                                                                      @ (GHC.Generics.U1
                                                                           GHC.Types.Any)
                                                                      @ (GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Equ"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1
                                                                           GHC.Types.Any)
                                                                      (\ (v :: GHC.Generics.U1
                                                                                 GHC.Types.Any) ->
                                                                       v)
                                                                        `cast`
                                                                      (<GHC.Generics.U1
                                                                          GHC.Types.Any>_R
                                                                       ->_R Sym (GHC.Generics.N:M1[0]
                                                                                     <*>_N
                                                                                     <GHC.Generics.C>_P
                                                                                     <'GHC.Generics.MetaCons
                                                                                        "Equ"
                                                                                        'GHC.Generics.PrefixI
                                                                                        'GHC.Types.False>_P
                                                                                     <GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                                                                      (GHC.Base.pure
                                                                         @ f
                                                                         $dApplicative
                                                                         @ (GHC.Generics.U1
                                                                              GHC.Types.Any)
                                                                         (GHC.Generics.U1
                                                                            @ *
                                                                            @ GHC.Types.Any)))
                                                              GHC.Generics.R1 g3
                                                              -> GHC.Base.fmap
                                                                   @ f
                                                                   (GHC.Base.$p1Applicative
                                                                      @ f
                                                                      $dApplicative)
                                                                   @ (GHC.Generics.M1
                                                                        GHC.Generics.C
                                                                        ('GHC.Generics.MetaCons
                                                                           "Neq"
                                                                           'GHC.Generics.PrefixI
                                                                           'GHC.Types.False)
                                                                        GHC.Generics.U1
                                                                        GHC.Types.Any)
                                                                   @ ((GHC.Generics.:+:)
                                                                        (GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Equ"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1)
                                                                        (GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Neq"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1)
                                                                        GHC.Types.Any)
                                                                   (GHC.Generics.R1
                                                                      @ *
                                                                      @ (GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Equ"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1)
                                                                      @ (GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Neq"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1)
                                                                      @ GHC.Types.Any)
                                                                   (GHC.Base.fmap
                                                                      @ f
                                                                      (GHC.Base.$p1Applicative
                                                                         @ f
                                                                         $dApplicative)
                                                                      @ (GHC.Generics.U1
                                                                           GHC.Types.Any)
                                                                      @ (GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Neq"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1
                                                                           GHC.Types.Any)
                                                                      (\ (v :: GHC.Generics.U1
                                                                                 GHC.Types.Any) ->
                                                                       v)
                                                                        `cast`
                                                                      (<GHC.Generics.U1
                                                                          GHC.Types.Any>_R
                                                                       ->_R Sym (GHC.Generics.N:M1[0]
                                                                                     <*>_N
                                                                                     <GHC.Generics.C>_P
                                                                                     <'GHC.Generics.MetaCons
                                                                                        "Neq"
                                                                                        'GHC.Generics.PrefixI
                                                                                        'GHC.Types.False>_P
                                                                                     <GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                                                                      (GHC.Base.pure
                                                                         @ f
                                                                         $dApplicative
                                                                         @ (GHC.Generics.U1
                                                                              GHC.Types.Any)
                                                                         (GHC.Generics.U1
                                                                            @ *
                                                                            @ GHC.Types.Any))) })
                                                     } in
                                                     case f3
                                                            `cast`
                                                          ((GHC.Generics.N:M1[0]
                                                                <*>_N
                                                                <GHC.Generics.C>_P
                                                                <'GHC.Generics.MetaCons
                                                                   "Comp"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False>_P
                                                                <GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Maybe.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.Rec0
                                                                      SEDEL.Common.CompOp)>_R ; GHC.Generics.N:M1[0]
                                                                                                    <*>_N
                                                                                                    <GHC.Generics.S>_P
                                                                                                    <'GHC.Generics.MetaSel
                                                                                                       'GHC.Maybe.Nothing
                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                       'GHC.Generics.DecidedLazy>_P
                                                                                                    <GHC.Generics.K1
                                                                                                       GHC.Generics.R
                                                                                                       SEDEL.Common.CompOp>_R) <GHC.Types.Any>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                       <*>_N
                                                                                                                                                       <GHC.Generics.R>_P
                                                                                                                                                       <SEDEL.Common.CompOp>_R
                                                                                                                                                       <GHC.Types.Any>_P) of wild1 {
                                                       SEDEL.Common.Lt
                                                       -> $j1
                                                            (SEDEL.Common.$fAlphaCompOp8
                                                               @ GHC.Types.Any)
                                                       SEDEL.Common.Gt
                                                       -> $j1
                                                            (SEDEL.Common.$fAlphaCompOp7
                                                               @ GHC.Types.Any)
                                                       SEDEL.Common.Equ
                                                       -> $j2
                                                            (SEDEL.Common.$fAlphaCompOp6
                                                               @ GHC.Types.Any)
                                                       SEDEL.Common.Neq
                                                       -> $j2
                                                            (SEDEL.Common.$fAlphaCompOp5
                                                               @ GHC.Types.Any) }))
                                                   `cast`
                                                 (<f>_R (Sym (SEDEL.Common.Rep_CompOp[0]) <GHC.Types.Any>_N))))))
                                GHC.Generics.R1 g1
                                -> GHC.Base.fmap
                                     @ f
                                     (GHC.Base.$p1Applicative @ f $dApplicative)
                                     @ (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          (GHC.Generics.S1
                                             ('GHC.Generics.MetaSel
                                                'GHC.Maybe.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.Rec0 SEDEL.Common.LogicalOp))
                                          GHC.Types.Any)
                                     @ ((GHC.Generics.:+:)
                                          (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             (GHC.Generics.S1
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.Rec0 SEDEL.Common.CompOp)))
                                          (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             (GHC.Generics.S1
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.Rec0 SEDEL.Common.LogicalOp)))
                                          GHC.Types.Any)
                                     (GHC.Generics.R1
                                        @ *
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             (GHC.Generics.S1
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.Rec0 SEDEL.Common.CompOp)))
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             (GHC.Generics.S1
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.Rec0 SEDEL.Common.LogicalOp)))
                                        @ GHC.Types.Any)
                                     (GHC.Base.fmap
                                        @ f
                                        (GHC.Base.$p1Applicative @ f $dApplicative)
                                        @ (GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'GHC.Maybe.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.Rec0 SEDEL.Common.LogicalOp)
                                             GHC.Types.Any)
                                        @ (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.Rec0 SEDEL.Common.LogicalOp))
                                             GHC.Types.Any)
                                        (\ (v :: GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Maybe.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.Rec0 SEDEL.Common.LogicalOp)
                                                   GHC.Types.Any) ->
                                         v)
                                          `cast`
                                        (<GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               'GHC.Maybe.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.Rec0 SEDEL.Common.LogicalOp)
                                            GHC.Types.Any>_R
                                         ->_R Sym (GHC.Generics.N:M1[0]
                                                       <*>_N
                                                       <GHC.Generics.C>_P
                                                       <'GHC.Generics.MetaCons
                                                          "Logical"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False>_P
                                                       <GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             'GHC.Maybe.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.Rec0
                                                             SEDEL.Common.LogicalOp)>_R) <GHC.Types.Any>_N)
                                        (GHC.Base.fmap
                                           @ f
                                           (GHC.Base.$p1Applicative @ f $dApplicative)
                                           @ (GHC.Generics.K1
                                                GHC.Generics.R SEDEL.Common.LogicalOp GHC.Types.Any)
                                           @ (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R SEDEL.Common.LogicalOp)
                                                GHC.Types.Any)
                                           (\ (v :: GHC.Generics.K1
                                                      GHC.Generics.R
                                                      SEDEL.Common.LogicalOp
                                                      GHC.Types.Any) ->
                                            v)
                                             `cast`
                                           (<GHC.Generics.K1
                                               GHC.Generics.R
                                               SEDEL.Common.LogicalOp
                                               GHC.Types.Any>_R
                                            ->_R Sym (GHC.Generics.N:M1[0]
                                                          <*>_N
                                                          <GHC.Generics.S>_P
                                                          <'GHC.Generics.MetaSel
                                                             'GHC.Maybe.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy>_P
                                                          <GHC.Generics.K1
                                                             GHC.Generics.R
                                                             SEDEL.Common.LogicalOp>_R) <GHC.Types.Any>_N)
                                           (GHC.Base.fmap
                                              @ f
                                              (GHC.Base.$p1Applicative @ f $dApplicative)
                                              @ SEDEL.Common.LogicalOp
                                              @ (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   SEDEL.Common.LogicalOp
                                                   GHC.Types.Any)
                                              (\ (v :: SEDEL.Common.LogicalOp) -> v)
                                                `cast`
                                              (<SEDEL.Common.LogicalOp>_R
                                               ->_R Sym (GHC.Generics.N:K1[0]
                                                             <*>_N
                                                             <GHC.Generics.R>_P
                                                             <SEDEL.Common.LogicalOp>_R
                                                             <GHC.Types.Any>_P))
                                              (GHC.Base.fmap
                                                 @ f
                                                 (GHC.Base.$p1Applicative @ f $dApplicative)
                                                 @ (GHC.Generics.Rep
                                                      SEDEL.Common.LogicalOp GHC.Types.Any)
                                                 @ SEDEL.Common.LogicalOp
                                                 (SEDEL.Common.$fAlphaLogicalOp_$cto
                                                    @ GHC.Types.Any)
                                                 (GHC.Base.fmap
                                                    @ f
                                                    (GHC.Base.$p1Applicative @ f $dApplicative)
                                                    @ ((GHC.Generics.:+:)
                                                         (GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "LAnd"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1)
                                                         (GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "LOr"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1)
                                                         GHC.Types.Any)
                                                    @ (GHC.Generics.M1
                                                         GHC.Generics.D
                                                         ('GHC.Generics.MetaData
                                                            "LogicalOp"
                                                            "SEDEL.Common"
                                                            "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                                            'GHC.Types.False)
                                                         (GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "LAnd"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1
                                                          GHC.Generics.:+: GHC.Generics.C1
                                                                             ('GHC.Generics.MetaCons
                                                                                "LOr"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.False)
                                                                             GHC.Generics.U1)
                                                         GHC.Types.Any)
                                                    (\ (v :: (GHC.Generics.:+:)
                                                               (GHC.Generics.C1
                                                                  ('GHC.Generics.MetaCons
                                                                     "LAnd"
                                                                     'GHC.Generics.PrefixI
                                                                     'GHC.Types.False)
                                                                  GHC.Generics.U1)
                                                               (GHC.Generics.C1
                                                                  ('GHC.Generics.MetaCons
                                                                     "LOr"
                                                                     'GHC.Generics.PrefixI
                                                                     'GHC.Types.False)
                                                                  GHC.Generics.U1)
                                                               GHC.Types.Any) ->
                                                     v)
                                                      `cast`
                                                    (<(GHC.Generics.:+:)
                                                        (GHC.Generics.C1
                                                           ('GHC.Generics.MetaCons
                                                              "LAnd"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1)
                                                        (GHC.Generics.C1
                                                           ('GHC.Generics.MetaCons
                                                              "LOr"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1)
                                                        GHC.Types.Any>_R
                                                     ->_R Sym (GHC.Generics.N:M1[0]
                                                                   <*>_N
                                                                   <GHC.Generics.D>_P
                                                                   <'GHC.Generics.MetaData
                                                                      "LogicalOp"
                                                                      "SEDEL.Common"
                                                                      "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                                                      'GHC.Types.False>_P
                                                                   <GHC.Generics.C1
                                                                      ('GHC.Generics.MetaCons
                                                                         "LAnd"
                                                                         'GHC.Generics.PrefixI
                                                                         'GHC.Types.False)
                                                                      GHC.Generics.U1
                                                                    GHC.Generics.:+: GHC.Generics.C1
                                                                                       ('GHC.Generics.MetaCons
                                                                                          "LOr"
                                                                                          'GHC.Generics.PrefixI
                                                                                          'GHC.Types.False)
                                                                                       GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                                                    (case g1
                                                            `cast`
                                                          ((GHC.Generics.N:M1[0]
                                                                <*>_N
                                                                <GHC.Generics.C>_P
                                                                <'GHC.Generics.MetaCons
                                                                   "Logical"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False>_P
                                                                <GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Maybe.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.Rec0
                                                                      SEDEL.Common.LogicalOp)>_R ; GHC.Generics.N:M1[0]
                                                                                                       <*>_N
                                                                                                       <GHC.Generics.S>_P
                                                                                                       <'GHC.Generics.MetaSel
                                                                                                          'GHC.Maybe.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy>_P
                                                                                                       <GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          SEDEL.Common.LogicalOp>_R) <GHC.Types.Any>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                             <*>_N
                                                                                                                                                             <GHC.Generics.R>_P
                                                                                                                                                             <SEDEL.Common.LogicalOp>_R
                                                                                                                                                             <GHC.Types.Any>_P) of wild1 {
                                                       SEDEL.Common.LAnd
                                                       -> GHC.Base.fmap
                                                            @ f
                                                            (GHC.Base.$p1Applicative
                                                               @ f
                                                               $dApplicative)
                                                            @ (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "LAnd"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 GHC.Generics.U1
                                                                 GHC.Types.Any)
                                                            @ ((GHC.Generics.:+:)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "LAnd"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "LOr"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                                 GHC.Types.Any)
                                                            (GHC.Generics.L1
                                                               @ *
                                                               @ (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "LAnd"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                               @ (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "LOr"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                               @ GHC.Types.Any)
                                                            (GHC.Base.fmap
                                                               @ f
                                                               (GHC.Base.$p1Applicative
                                                                  @ f
                                                                  $dApplicative)
                                                               @ (GHC.Generics.U1 GHC.Types.Any)
                                                               @ (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "LAnd"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1
                                                                    GHC.Types.Any)
                                                               (\ (v :: GHC.Generics.U1
                                                                          GHC.Types.Any) ->
                                                                v)
                                                                 `cast`
                                                               (<GHC.Generics.U1 GHC.Types.Any>_R
                                                                ->_R Sym (GHC.Generics.N:M1[0]
                                                                              <*>_N
                                                                              <GHC.Generics.C>_P
                                                                              <'GHC.Generics.MetaCons
                                                                                 "LAnd"
                                                                                 'GHC.Generics.PrefixI
                                                                                 'GHC.Types.False>_P
                                                                              <GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                                                               (GHC.Base.pure
                                                                  @ f
                                                                  $dApplicative
                                                                  @ (GHC.Generics.U1 GHC.Types.Any)
                                                                  (GHC.Generics.U1
                                                                     @ *
                                                                     @ GHC.Types.Any)))
                                                       SEDEL.Common.LOr
                                                       -> GHC.Base.fmap
                                                            @ f
                                                            (GHC.Base.$p1Applicative
                                                               @ f
                                                               $dApplicative)
                                                            @ (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "LOr"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 GHC.Generics.U1
                                                                 GHC.Types.Any)
                                                            @ ((GHC.Generics.:+:)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "LAnd"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "LOr"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                                 GHC.Types.Any)
                                                            (GHC.Generics.R1
                                                               @ *
                                                               @ (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "LAnd"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                               @ (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "LOr"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                               @ GHC.Types.Any)
                                                            (GHC.Base.fmap
                                                               @ f
                                                               (GHC.Base.$p1Applicative
                                                                  @ f
                                                                  $dApplicative)
                                                               @ (GHC.Generics.U1 GHC.Types.Any)
                                                               @ (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "LOr"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1
                                                                    GHC.Types.Any)
                                                               (\ (v :: GHC.Generics.U1
                                                                          GHC.Types.Any) ->
                                                                v)
                                                                 `cast`
                                                               (<GHC.Generics.U1 GHC.Types.Any>_R
                                                                ->_R Sym (GHC.Generics.N:M1[0]
                                                                              <*>_N
                                                                              <GHC.Generics.C>_P
                                                                              <'GHC.Generics.MetaCons
                                                                                 "LOr"
                                                                                 'GHC.Generics.PrefixI
                                                                                 'GHC.Types.False>_P
                                                                              <GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                                                               (GHC.Base.pure
                                                                  @ f
                                                                  $dApplicative
                                                                  @ (GHC.Generics.U1 GHC.Types.Any)
                                                                  (GHC.Generics.U1
                                                                     @ *
                                                                     @ GHC.Types.Any))) }))
                                                   `cast`
                                                 (<f>_R (Sym (SEDEL.Common.Rep_LogicalOp[0]) <GHC.Types.Any>_N)))))) })
                       } in
                       case x of wild {
                         SEDEL.Common.Arith g1
                         -> GHC.Base.fmap
                              @ f
                              $dFunctor1
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 SEDEL.Common.ArithOp))
                                   GHC.Types.Any)
                              @ ((GHC.Generics.:+:)
                                   (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      (GHC.Generics.S1
                                         ('GHC.Generics.MetaSel
                                            'GHC.Maybe.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.Rec0 SEDEL.Common.ArithOp)))
                                   (GHC.Generics.C1
                                      ('GHC.Generics.MetaCons
                                         "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      (GHC.Generics.S1
                                         ('GHC.Generics.MetaSel
                                            'GHC.Maybe.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.Rec0 SEDEL.Common.CompOp))
                                    GHC.Generics.:+: GHC.Generics.C1
                                                       ('GHC.Generics.MetaCons
                                                          "Logical"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False)
                                                       (GHC.Generics.S1
                                                          ('GHC.Generics.MetaSel
                                                             'GHC.Maybe.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.Rec0
                                                             SEDEL.Common.LogicalOp)))
                                   GHC.Types.Any)
                              (GHC.Generics.L1
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      (GHC.Generics.S1
                                         ('GHC.Generics.MetaSel
                                            'GHC.Maybe.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.Rec0 SEDEL.Common.ArithOp)))
                                 @ (GHC.Generics.C1
                                      ('GHC.Generics.MetaCons
                                         "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      (GHC.Generics.S1
                                         ('GHC.Generics.MetaSel
                                            'GHC.Maybe.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.Rec0 SEDEL.Common.CompOp))
                                    GHC.Generics.:+: GHC.Generics.C1
                                                       ('GHC.Generics.MetaCons
                                                          "Logical"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False)
                                                       (GHC.Generics.S1
                                                          ('GHC.Generics.MetaSel
                                                             'GHC.Maybe.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.Rec0
                                                             SEDEL.Common.LogicalOp)))
                                 @ GHC.Types.Any)
                              (GHC.Base.fmap
                                 @ f
                                 (GHC.Base.$p1Applicative @ f $dApplicative)
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 SEDEL.Common.ArithOp)
                                      GHC.Types.Any)
                                 @ (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Maybe.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.Rec0 SEDEL.Common.ArithOp))
                                      GHC.Types.Any)
                                 (\ (v :: GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               'GHC.Maybe.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.Rec0 SEDEL.Common.ArithOp)
                                            GHC.Types.Any) ->
                                  v)
                                   `cast`
                                 (<GHC.Generics.M1
                                     GHC.Generics.S
                                     ('GHC.Generics.MetaSel
                                        'GHC.Maybe.Nothing
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0 SEDEL.Common.ArithOp)
                                     GHC.Types.Any>_R
                                  ->_R Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.C>_P
                                                <'GHC.Generics.MetaCons
                                                   "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                                <GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Maybe.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.Rec0
                                                      SEDEL.Common.ArithOp)>_R) <GHC.Types.Any>_N)
                                 (GHC.Base.fmap
                                    @ f
                                    (GHC.Base.$p1Applicative @ f $dApplicative)
                                    @ (GHC.Generics.K1
                                         GHC.Generics.R SEDEL.Common.ArithOp GHC.Types.Any)
                                    @ (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Maybe.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.ArithOp)
                                         GHC.Types.Any)
                                    (\ (v :: GHC.Generics.K1
                                               GHC.Generics.R SEDEL.Common.ArithOp GHC.Types.Any) ->
                                     v)
                                      `cast`
                                    (<GHC.Generics.K1
                                        GHC.Generics.R SEDEL.Common.ArithOp GHC.Types.Any>_R
                                     ->_R Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      'GHC.Maybe.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      SEDEL.Common.ArithOp>_R) <GHC.Types.Any>_N)
                                    (GHC.Base.fmap
                                       @ f
                                       (GHC.Base.$p1Applicative @ f $dApplicative)
                                       @ SEDEL.Common.ArithOp
                                       @ (GHC.Generics.K1
                                            GHC.Generics.R SEDEL.Common.ArithOp GHC.Types.Any)
                                       (\ (v :: SEDEL.Common.ArithOp) -> v)
                                         `cast`
                                       (<SEDEL.Common.ArithOp>_R
                                        ->_R Sym (GHC.Generics.N:K1[0]
                                                      <*>_N
                                                      <GHC.Generics.R>_P
                                                      <SEDEL.Common.ArithOp>_R
                                                      <GHC.Types.Any>_P))
                                       (GHC.Base.fmap
                                          @ f
                                          (GHC.Base.$p1Applicative @ f $dApplicative)
                                          @ (GHC.Generics.Rep SEDEL.Common.ArithOp GHC.Types.Any)
                                          @ SEDEL.Common.ArithOp
                                          (SEDEL.Common.$fAlphaArithOp_$cto @ GHC.Types.Any)
                                          (GHC.Base.fmap
                                             @ f
                                             (GHC.Base.$p1Applicative @ f $dApplicative)
                                             @ ((GHC.Generics.:+:)
                                                  (GHC.Generics.C1
                                                     ('GHC.Generics.MetaCons
                                                        "Add"
                                                        'GHC.Generics.PrefixI
                                                        'GHC.Types.False)
                                                     GHC.Generics.U1
                                                   GHC.Generics.:+: GHC.Generics.C1
                                                                      ('GHC.Generics.MetaCons
                                                                         "Sub"
                                                                         'GHC.Generics.PrefixI
                                                                         'GHC.Types.False)
                                                                      GHC.Generics.U1)
                                                  (GHC.Generics.C1
                                                     ('GHC.Generics.MetaCons
                                                        "Mul"
                                                        'GHC.Generics.PrefixI
                                                        'GHC.Types.False)
                                                     GHC.Generics.U1
                                                   GHC.Generics.:+: GHC.Generics.C1
                                                                      ('GHC.Generics.MetaCons
                                                                         "Div"
                                                                         'GHC.Generics.PrefixI
                                                                         'GHC.Types.False)
                                                                      GHC.Generics.U1)
                                                  GHC.Types.Any)
                                             @ (GHC.Generics.M1
                                                  GHC.Generics.D
                                                  ('GHC.Generics.MetaData
                                                     "ArithOp"
                                                     "SEDEL.Common"
                                                     "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                                     'GHC.Types.False)
                                                  ((GHC.Generics.C1
                                                      ('GHC.Generics.MetaCons
                                                         "Add"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1
                                                    GHC.Generics.:+: GHC.Generics.C1
                                                                       ('GHC.Generics.MetaCons
                                                                          "Sub"
                                                                          'GHC.Generics.PrefixI
                                                                          'GHC.Types.False)
                                                                       GHC.Generics.U1)
                                                   GHC.Generics.:+: (GHC.Generics.C1
                                                                       ('GHC.Generics.MetaCons
                                                                          "Mul"
                                                                          'GHC.Generics.PrefixI
                                                                          'GHC.Types.False)
                                                                       GHC.Generics.U1
                                                                     GHC.Generics.:+: GHC.Generics.C1
                                                                                        ('GHC.Generics.MetaCons
                                                                                           "Div"
                                                                                           'GHC.Generics.PrefixI
                                                                                           'GHC.Types.False)
                                                                                        GHC.Generics.U1))
                                                  GHC.Types.Any)
                                             (\ (v :: (GHC.Generics.:+:)
                                                        (GHC.Generics.C1
                                                           ('GHC.Generics.MetaCons
                                                              "Add"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1
                                                         GHC.Generics.:+: GHC.Generics.C1
                                                                            ('GHC.Generics.MetaCons
                                                                               "Sub"
                                                                               'GHC.Generics.PrefixI
                                                                               'GHC.Types.False)
                                                                            GHC.Generics.U1)
                                                        (GHC.Generics.C1
                                                           ('GHC.Generics.MetaCons
                                                              "Mul"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1
                                                         GHC.Generics.:+: GHC.Generics.C1
                                                                            ('GHC.Generics.MetaCons
                                                                               "Div"
                                                                               'GHC.Generics.PrefixI
                                                                               'GHC.Types.False)
                                                                            GHC.Generics.U1)
                                                        GHC.Types.Any) ->
                                              v)
                                               `cast`
                                             (<(GHC.Generics.:+:)
                                                 (GHC.Generics.C1
                                                    ('GHC.Generics.MetaCons
                                                       "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                    GHC.Generics.U1
                                                  GHC.Generics.:+: GHC.Generics.C1
                                                                     ('GHC.Generics.MetaCons
                                                                        "Sub"
                                                                        'GHC.Generics.PrefixI
                                                                        'GHC.Types.False)
                                                                     GHC.Generics.U1)
                                                 (GHC.Generics.C1
                                                    ('GHC.Generics.MetaCons
                                                       "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                    GHC.Generics.U1
                                                  GHC.Generics.:+: GHC.Generics.C1
                                                                     ('GHC.Generics.MetaCons
                                                                        "Div"
                                                                        'GHC.Generics.PrefixI
                                                                        'GHC.Types.False)
                                                                     GHC.Generics.U1)
                                                 GHC.Types.Any>_R
                                              ->_R Sym (GHC.Generics.N:M1[0]
                                                            <*>_N
                                                            <GHC.Generics.D>_P
                                                            <'GHC.Generics.MetaData
                                                               "ArithOp"
                                                               "SEDEL.Common"
                                                               "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                                               'GHC.Types.False>_P
                                                            <(GHC.Generics.C1
                                                                ('GHC.Generics.MetaCons
                                                                   "Add"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                GHC.Generics.U1
                                                              GHC.Generics.:+: GHC.Generics.C1
                                                                                 ('GHC.Generics.MetaCons
                                                                                    "Sub"
                                                                                    'GHC.Generics.PrefixI
                                                                                    'GHC.Types.False)
                                                                                 GHC.Generics.U1)
                                                             GHC.Generics.:+: (GHC.Generics.C1
                                                                                 ('GHC.Generics.MetaCons
                                                                                    "Mul"
                                                                                    'GHC.Generics.PrefixI
                                                                                    'GHC.Types.False)
                                                                                 GHC.Generics.U1
                                                                               GHC.Generics.:+: GHC.Generics.C1
                                                                                                  ('GHC.Generics.MetaCons
                                                                                                     "Div"
                                                                                                     'GHC.Generics.PrefixI
                                                                                                     'GHC.Types.False)
                                                                                                  GHC.Generics.U1)>_R) <GHC.Types.Any>_N)
                                             (let {
                                                $j1 :: (GHC.Generics.:+:)
                                                         (GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Add"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1)
                                                         (GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Sub"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1)
                                                         GHC.Types.Any
                                                       -> f ((GHC.Generics.:+:)
                                                               (GHC.Generics.C1
                                                                  ('GHC.Generics.MetaCons
                                                                     "Add"
                                                                     'GHC.Generics.PrefixI
                                                                     'GHC.Types.False)
                                                                  GHC.Generics.U1
                                                                GHC.Generics.:+: GHC.Generics.C1
                                                                                   ('GHC.Generics.MetaCons
                                                                                      "Sub"
                                                                                      'GHC.Generics.PrefixI
                                                                                      'GHC.Types.False)
                                                                                   GHC.Generics.U1)
                                                               (GHC.Generics.C1
                                                                  ('GHC.Generics.MetaCons
                                                                     "Mul"
                                                                     'GHC.Generics.PrefixI
                                                                     'GHC.Types.False)
                                                                  GHC.Generics.U1
                                                                GHC.Generics.:+: GHC.Generics.C1
                                                                                   ('GHC.Generics.MetaCons
                                                                                      "Div"
                                                                                      'GHC.Generics.PrefixI
                                                                                      'GHC.Types.False)
                                                                                   GHC.Generics.U1)
                                                               GHC.Types.Any)
                                                  <join 1> {- Arity: 1 -}
                                                = \ (f3 :: (GHC.Generics.:+:)
                                                             (GHC.Generics.C1
                                                                ('GHC.Generics.MetaCons
                                                                   "Add"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                GHC.Generics.U1)
                                                             (GHC.Generics.C1
                                                                ('GHC.Generics.MetaCons
                                                                   "Sub"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                GHC.Generics.U1)
                                                             GHC.Types.Any)[OneShot] ->
                                                  GHC.Base.fmap
                                                    @ f
                                                    (GHC.Base.$p1Applicative @ f $dApplicative)
                                                    @ ((GHC.Generics.:+:)
                                                         (GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Add"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1)
                                                         (GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Sub"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1)
                                                         GHC.Types.Any)
                                                    @ ((GHC.Generics.:+:)
                                                         (GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Add"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1
                                                          GHC.Generics.:+: GHC.Generics.C1
                                                                             ('GHC.Generics.MetaCons
                                                                                "Sub"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.False)
                                                                             GHC.Generics.U1)
                                                         (GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Mul"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1
                                                          GHC.Generics.:+: GHC.Generics.C1
                                                                             ('GHC.Generics.MetaCons
                                                                                "Div"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.False)
                                                                             GHC.Generics.U1)
                                                         GHC.Types.Any)
                                                    (GHC.Generics.L1
                                                       @ *
                                                       @ (GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Add"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1
                                                          GHC.Generics.:+: GHC.Generics.C1
                                                                             ('GHC.Generics.MetaCons
                                                                                "Sub"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.False)
                                                                             GHC.Generics.U1)
                                                       @ (GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Mul"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1
                                                          GHC.Generics.:+: GHC.Generics.C1
                                                                             ('GHC.Generics.MetaCons
                                                                                "Div"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.False)
                                                                             GHC.Generics.U1)
                                                       @ GHC.Types.Any)
                                                    (case f3 of wild1 {
                                                       GHC.Generics.L1 f4
                                                       -> GHC.Base.fmap
                                                            @ f
                                                            (GHC.Base.$p1Applicative
                                                               @ f
                                                               $dApplicative)
                                                            @ (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "Add"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 GHC.Generics.U1
                                                                 GHC.Types.Any)
                                                            @ ((GHC.Generics.:+:)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Add"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Sub"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                                 GHC.Types.Any)
                                                            (GHC.Generics.L1
                                                               @ *
                                                               @ (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Add"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                               @ (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Sub"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                               @ GHC.Types.Any)
                                                            (GHC.Base.fmap
                                                               @ f
                                                               (GHC.Base.$p1Applicative
                                                                  @ f
                                                                  $dApplicative)
                                                               @ (GHC.Generics.U1 GHC.Types.Any)
                                                               @ (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Add"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1
                                                                    GHC.Types.Any)
                                                               (\ (v :: GHC.Generics.U1
                                                                          GHC.Types.Any) ->
                                                                v)
                                                                 `cast`
                                                               (<GHC.Generics.U1 GHC.Types.Any>_R
                                                                ->_R Sym (GHC.Generics.N:M1[0]
                                                                              <*>_N
                                                                              <GHC.Generics.C>_P
                                                                              <'GHC.Generics.MetaCons
                                                                                 "Add"
                                                                                 'GHC.Generics.PrefixI
                                                                                 'GHC.Types.False>_P
                                                                              <GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                                                               (GHC.Base.pure
                                                                  @ f
                                                                  $dApplicative
                                                                  @ (GHC.Generics.U1 GHC.Types.Any)
                                                                  (GHC.Generics.U1
                                                                     @ *
                                                                     @ GHC.Types.Any)))
                                                       GHC.Generics.R1 g2
                                                       -> GHC.Base.fmap
                                                            @ f
                                                            (GHC.Base.$p1Applicative
                                                               @ f
                                                               $dApplicative)
                                                            @ (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "Sub"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 GHC.Generics.U1
                                                                 GHC.Types.Any)
                                                            @ ((GHC.Generics.:+:)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Add"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Sub"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                                 GHC.Types.Any)
                                                            (GHC.Generics.R1
                                                               @ *
                                                               @ (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Add"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                               @ (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Sub"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                               @ GHC.Types.Any)
                                                            (GHC.Base.fmap
                                                               @ f
                                                               (GHC.Base.$p1Applicative
                                                                  @ f
                                                                  $dApplicative)
                                                               @ (GHC.Generics.U1 GHC.Types.Any)
                                                               @ (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Sub"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1
                                                                    GHC.Types.Any)
                                                               (\ (v :: GHC.Generics.U1
                                                                          GHC.Types.Any) ->
                                                                v)
                                                                 `cast`
                                                               (<GHC.Generics.U1 GHC.Types.Any>_R
                                                                ->_R Sym (GHC.Generics.N:M1[0]
                                                                              <*>_N
                                                                              <GHC.Generics.C>_P
                                                                              <'GHC.Generics.MetaCons
                                                                                 "Sub"
                                                                                 'GHC.Generics.PrefixI
                                                                                 'GHC.Types.False>_P
                                                                              <GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                                                               (GHC.Base.pure
                                                                  @ f
                                                                  $dApplicative
                                                                  @ (GHC.Generics.U1 GHC.Types.Any)
                                                                  (GHC.Generics.U1
                                                                     @ *
                                                                     @ GHC.Types.Any))) })
                                              } in
                                              let {
                                                $j2 :: (GHC.Generics.:+:)
                                                         (GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Mul"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1)
                                                         (GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Div"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1)
                                                         GHC.Types.Any
                                                       -> f ((GHC.Generics.:+:)
                                                               (GHC.Generics.C1
                                                                  ('GHC.Generics.MetaCons
                                                                     "Add"
                                                                     'GHC.Generics.PrefixI
                                                                     'GHC.Types.False)
                                                                  GHC.Generics.U1
                                                                GHC.Generics.:+: GHC.Generics.C1
                                                                                   ('GHC.Generics.MetaCons
                                                                                      "Sub"
                                                                                      'GHC.Generics.PrefixI
                                                                                      'GHC.Types.False)
                                                                                   GHC.Generics.U1)
                                                               (GHC.Generics.C1
                                                                  ('GHC.Generics.MetaCons
                                                                     "Mul"
                                                                     'GHC.Generics.PrefixI
                                                                     'GHC.Types.False)
                                                                  GHC.Generics.U1
                                                                GHC.Generics.:+: GHC.Generics.C1
                                                                                   ('GHC.Generics.MetaCons
                                                                                      "Div"
                                                                                      'GHC.Generics.PrefixI
                                                                                      'GHC.Types.False)
                                                                                   GHC.Generics.U1)
                                                               GHC.Types.Any)
                                                  <join 1> {- Arity: 1 -}
                                                = \ (g2 :: (GHC.Generics.:+:)
                                                             (GHC.Generics.C1
                                                                ('GHC.Generics.MetaCons
                                                                   "Mul"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                GHC.Generics.U1)
                                                             (GHC.Generics.C1
                                                                ('GHC.Generics.MetaCons
                                                                   "Div"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                GHC.Generics.U1)
                                                             GHC.Types.Any)[OneShot] ->
                                                  GHC.Base.fmap
                                                    @ f
                                                    (GHC.Base.$p1Applicative @ f $dApplicative)
                                                    @ ((GHC.Generics.:+:)
                                                         (GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Mul"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1)
                                                         (GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Div"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1)
                                                         GHC.Types.Any)
                                                    @ ((GHC.Generics.:+:)
                                                         (GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Add"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1
                                                          GHC.Generics.:+: GHC.Generics.C1
                                                                             ('GHC.Generics.MetaCons
                                                                                "Sub"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.False)
                                                                             GHC.Generics.U1)
                                                         (GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Mul"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1
                                                          GHC.Generics.:+: GHC.Generics.C1
                                                                             ('GHC.Generics.MetaCons
                                                                                "Div"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.False)
                                                                             GHC.Generics.U1)
                                                         GHC.Types.Any)
                                                    (GHC.Generics.R1
                                                       @ *
                                                       @ (GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Add"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1
                                                          GHC.Generics.:+: GHC.Generics.C1
                                                                             ('GHC.Generics.MetaCons
                                                                                "Sub"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.False)
                                                                             GHC.Generics.U1)
                                                       @ (GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "Mul"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1
                                                          GHC.Generics.:+: GHC.Generics.C1
                                                                             ('GHC.Generics.MetaCons
                                                                                "Div"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.False)
                                                                             GHC.Generics.U1)
                                                       @ GHC.Types.Any)
                                                    (case g2 of wild1 {
                                                       GHC.Generics.L1 f3
                                                       -> GHC.Base.fmap
                                                            @ f
                                                            (GHC.Base.$p1Applicative
                                                               @ f
                                                               $dApplicative)
                                                            @ (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "Mul"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 GHC.Generics.U1
                                                                 GHC.Types.Any)
                                                            @ ((GHC.Generics.:+:)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Mul"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Div"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                                 GHC.Types.Any)
                                                            (GHC.Generics.L1
                                                               @ *
                                                               @ (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Mul"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                               @ (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Div"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                               @ GHC.Types.Any)
                                                            (GHC.Base.fmap
                                                               @ f
                                                               (GHC.Base.$p1Applicative
                                                                  @ f
                                                                  $dApplicative)
                                                               @ (GHC.Generics.U1 GHC.Types.Any)
                                                               @ (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Mul"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1
                                                                    GHC.Types.Any)
                                                               (\ (v :: GHC.Generics.U1
                                                                          GHC.Types.Any) ->
                                                                v)
                                                                 `cast`
                                                               (<GHC.Generics.U1 GHC.Types.Any>_R
                                                                ->_R Sym (GHC.Generics.N:M1[0]
                                                                              <*>_N
                                                                              <GHC.Generics.C>_P
                                                                              <'GHC.Generics.MetaCons
                                                                                 "Mul"
                                                                                 'GHC.Generics.PrefixI
                                                                                 'GHC.Types.False>_P
                                                                              <GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                                                               (GHC.Base.pure
                                                                  @ f
                                                                  $dApplicative
                                                                  @ (GHC.Generics.U1 GHC.Types.Any)
                                                                  (GHC.Generics.U1
                                                                     @ *
                                                                     @ GHC.Types.Any)))
                                                       GHC.Generics.R1 g4
                                                       -> GHC.Base.fmap
                                                            @ f
                                                            (GHC.Base.$p1Applicative
                                                               @ f
                                                               $dApplicative)
                                                            @ (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "Div"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 GHC.Generics.U1
                                                                 GHC.Types.Any)
                                                            @ ((GHC.Generics.:+:)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Mul"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Div"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                                 GHC.Types.Any)
                                                            (GHC.Generics.R1
                                                               @ *
                                                               @ (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Mul"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                               @ (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Div"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                               @ GHC.Types.Any)
                                                            (GHC.Base.fmap
                                                               @ f
                                                               (GHC.Base.$p1Applicative
                                                                  @ f
                                                                  $dApplicative)
                                                               @ (GHC.Generics.U1 GHC.Types.Any)
                                                               @ (GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Div"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1
                                                                    GHC.Types.Any)
                                                               (\ (v :: GHC.Generics.U1
                                                                          GHC.Types.Any) ->
                                                                v)
                                                                 `cast`
                                                               (<GHC.Generics.U1 GHC.Types.Any>_R
                                                                ->_R Sym (GHC.Generics.N:M1[0]
                                                                              <*>_N
                                                                              <GHC.Generics.C>_P
                                                                              <'GHC.Generics.MetaCons
                                                                                 "Div"
                                                                                 'GHC.Generics.PrefixI
                                                                                 'GHC.Types.False>_P
                                                                              <GHC.Generics.U1>_R) <GHC.Types.Any>_N)
                                                               (GHC.Base.pure
                                                                  @ f
                                                                  $dApplicative
                                                                  @ (GHC.Generics.U1 GHC.Types.Any)
                                                                  (GHC.Generics.U1
                                                                     @ *
                                                                     @ GHC.Types.Any))) })
                                              } in
                                              case g1 of wild1 {
                                                SEDEL.Common.Add
                                                -> $j1
                                                     (SEDEL.Common.$fAlphaArithOp8 @ GHC.Types.Any)
                                                SEDEL.Common.Sub
                                                -> $j1
                                                     (SEDEL.Common.$fAlphaArithOp7 @ GHC.Types.Any)
                                                SEDEL.Common.Mul
                                                -> $j2
                                                     (SEDEL.Common.$fAlphaArithOp6 @ GHC.Types.Any)
                                                SEDEL.Common.Div
                                                -> $j2
                                                     (SEDEL.Common.$fAlphaArithOp5
                                                        @ GHC.Types.Any) }))
                                            `cast`
                                          (<f>_R (Sym (SEDEL.Common.Rep_ArithOp[0]) <GHC.Types.Any>_N))))))
                         SEDEL.Common.Comp g1
                         -> $j
                              (GHC.Generics.L1
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Maybe.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.CompOp)))
                                 @ (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Maybe.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.LogicalOp)))
                                 @ GHC.Types.Any
                                 g1
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <SEDEL.Common.CompOp>_R
                                           <GHC.Types.Any>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                          <*>_N
                                                                          <GHC.Generics.S>_P
                                                                          <'GHC.Generics.MetaSel
                                                                             'GHC.Maybe.Nothing
                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                             'GHC.Generics.NoSourceStrictness
                                                                             'GHC.Generics.DecidedLazy>_P
                                                                          <GHC.Generics.K1
                                                                             GHC.Generics.R
                                                                             SEDEL.Common.CompOp>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                <*>_N
                                                                                                                <GHC.Generics.C>_P
                                                                                                                <'GHC.Generics.MetaCons
                                                                                                                   "Comp"
                                                                                                                   'GHC.Generics.PrefixI
                                                                                                                   'GHC.Types.False>_P
                                                                                                                <GHC.Generics.M1
                                                                                                                   GHC.Generics.S
                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                      'GHC.Maybe.Nothing
                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                   (GHC.Generics.K1
                                                                                                                      GHC.Generics.R
                                                                                                                      SEDEL.Common.CompOp)>_R)) <GHC.Types.Any>_N))
                         SEDEL.Common.Logical g1
                         -> $j
                              (GHC.Generics.R1
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Maybe.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.CompOp)))
                                 @ (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Maybe.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.LogicalOp)))
                                 @ GHC.Types.Any
                                 g1
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <SEDEL.Common.LogicalOp>_R
                                           <GHC.Types.Any>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                          <*>_N
                                                                          <GHC.Generics.S>_P
                                                                          <'GHC.Generics.MetaSel
                                                                             'GHC.Maybe.Nothing
                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                             'GHC.Generics.NoSourceStrictness
                                                                             'GHC.Generics.DecidedLazy>_P
                                                                          <GHC.Generics.K1
                                                                             GHC.Generics.R
                                                                             SEDEL.Common.LogicalOp>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                   <*>_N
                                                                                                                   <GHC.Generics.C>_P
                                                                                                                   <'GHC.Generics.MetaCons
                                                                                                                      "Logical"
                                                                                                                      'GHC.Generics.PrefixI
                                                                                                                      'GHC.Types.False>_P
                                                                                                                   <GHC.Generics.M1
                                                                                                                      GHC.Generics.S
                                                                                                                      ('GHC.Generics.MetaSel
                                                                                                                         'GHC.Maybe.Nothing
                                                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                                                         'GHC.Generics.NoSourceStrictness
                                                                                                                         'GHC.Generics.DecidedLazy)
                                                                                                                      (GHC.Generics.K1
                                                                                                                         GHC.Generics.R
                                                                                                                         SEDEL.Common.LogicalOp)>_R)) <GHC.Types.Any>_N)) }))
                     `cast`
                   (<f>_R (Sym (SEDEL.Common.Rep_Operation[0]) <GHC.Types.Any>_N))) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaOperation_$cisEmbed ::
    SEDEL.Common.Operation -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ (ds :: SEDEL.Common.Operation) -> GHC.Types.False) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaOperation_$cisPat ::
    SEDEL.Common.Operation
    -> Unbound.Generics.LocallyNameless.Alpha.DisjointSet
         Unbound.Generics.LocallyNameless.Name.AnyName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m2,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: SEDEL.Common.Operation) ->
                 case x of wild {
                   SEDEL.Common.Arith g1
                   -> case g1 of wild1 { DEFAULT ->
                      Unbound.Generics.LocallyNameless.Alpha.$fAlphaChar5
                        `cast`
                      (Sym (Unbound.Generics.LocallyNameless.Alpha.N:DisjointSet[0]
                                <Unbound.Generics.LocallyNameless.Name.AnyName>_R)) }
                   SEDEL.Common.Comp g1
                   -> case g1 of wild1 { DEFAULT ->
                      Unbound.Generics.LocallyNameless.Alpha.$fAlphaChar5
                        `cast`
                      (Sym (Unbound.Generics.LocallyNameless.Alpha.N:DisjointSet[0]
                                <Unbound.Generics.LocallyNameless.Name.AnyName>_R)) }
                   SEDEL.Common.Logical g1
                   -> case g1 of wild1 { DEFAULT ->
                      Unbound.Generics.LocallyNameless.Alpha.$fAlphaChar5
                        `cast`
                      (Sym (Unbound.Generics.LocallyNameless.Alpha.N:DisjointSet[0]
                                <Unbound.Generics.LocallyNameless.Name.AnyName>_R)) } }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaOperation_$cisTerm ::
    SEDEL.Common.Operation -> Data.Semigroup.Internal.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: SEDEL.Common.Operation) ->
                 case x of wild {
                   SEDEL.Common.Arith g1
                   -> case g1 of wild1 { DEFAULT ->
                      GHC.Types.True `cast` (Sym (Data.Semigroup.Internal.N:All[0])) }
                   SEDEL.Common.Comp g1
                   -> case g1 of wild1 { DEFAULT ->
                      GHC.Types.True `cast` (Sym (Data.Semigroup.Internal.N:All[0])) }
                   SEDEL.Common.Logical g1
                   -> case g1 of wild1 { DEFAULT ->
                      GHC.Types.True
                        `cast`
                      (Sym (Data.Semigroup.Internal.N:All[0])) } }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaOperation_$clfreshen' ::
    Unbound.Generics.LocallyNameless.LFresh.LFresh m =>
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> SEDEL.Common.Operation
    -> (SEDEL.Common.Operation
        -> Unbound.Generics.PermM.Perm
             Unbound.Generics.LocallyNameless.Name.AnyName
        -> m b)
    -> m b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,A><S,1*U><C(C(S)),1*C1(C1(U))>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ m :: * -> *
                   @ b
                   ($dLFresh :: Unbound.Generics.LocallyNameless.LFresh.LFresh m)
                   (ctx :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (m1 :: SEDEL.Common.Operation)
                   (cont :: SEDEL.Common.Operation
                            -> Unbound.Generics.PermM.Perm
                                 Unbound.Generics.LocallyNameless.Name.AnyName
                            -> m b) ->
                 let {
                   $j :: (GHC.Generics.:+:)
                           (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.Rec0 SEDEL.Common.CompOp)))
                           (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.Rec0 SEDEL.Common.LogicalOp)))
                           GHC.Types.Any
                         -> m b
                     <join 1> {- Arity: 1 -}
                   = \ (g1 :: (GHC.Generics.:+:)
                                (GHC.Generics.C1
                                   ('GHC.Generics.MetaCons
                                      "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 SEDEL.Common.CompOp)))
                                (GHC.Generics.C1
                                   ('GHC.Generics.MetaCons
                                      "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 SEDEL.Common.LogicalOp)))
                                GHC.Types.Any)[OneShot] ->
                     case g1 of wild {
                       GHC.Generics.L1 f1
                       -> case f1
                                 `cast`
                               ((GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'GHC.Maybe.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.Rec0
                                           SEDEL.Common.CompOp)>_R ; GHC.Generics.N:M1[0]
                                                                         <*>_N
                                                                         <GHC.Generics.S>_P
                                                                         <'GHC.Generics.MetaSel
                                                                            'GHC.Maybe.Nothing
                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                            'GHC.Generics.NoSourceStrictness
                                                                            'GHC.Generics.DecidedLazy>_P
                                                                         <GHC.Generics.K1
                                                                            GHC.Generics.R
                                                                            SEDEL.Common.CompOp>_R) <GHC.Types.Any>_N ; GHC.Generics.N:K1[0]
                                                                                                                            <*>_N
                                                                                                                            <GHC.Generics.R>_P
                                                                                                                            <SEDEL.Common.CompOp>_R
                                                                                                                            <GHC.Types.Any>_P) of wild1 {
                            SEDEL.Common.Lt
                            -> cont
                                 (SEDEL.Common.Comp SEDEL.Common.Lt)
                                 (Data.Map.Internal.Tip
                                    @ Unbound.Generics.LocallyNameless.Name.AnyName
                                    @ Unbound.Generics.LocallyNameless.Name.AnyName)
                                   `cast`
                                 (Sym (Unbound.Generics.PermM.N:Perm[0]
                                           <Unbound.Generics.LocallyNameless.Name.AnyName>_N))
                            SEDEL.Common.Gt
                            -> cont
                                 (SEDEL.Common.Comp SEDEL.Common.Gt)
                                 (Data.Map.Internal.Tip
                                    @ Unbound.Generics.LocallyNameless.Name.AnyName
                                    @ Unbound.Generics.LocallyNameless.Name.AnyName)
                                   `cast`
                                 (Sym (Unbound.Generics.PermM.N:Perm[0]
                                           <Unbound.Generics.LocallyNameless.Name.AnyName>_N))
                            SEDEL.Common.Equ
                            -> cont
                                 (SEDEL.Common.Comp SEDEL.Common.Equ)
                                 (Data.Map.Internal.Tip
                                    @ Unbound.Generics.LocallyNameless.Name.AnyName
                                    @ Unbound.Generics.LocallyNameless.Name.AnyName)
                                   `cast`
                                 (Sym (Unbound.Generics.PermM.N:Perm[0]
                                           <Unbound.Generics.LocallyNameless.Name.AnyName>_N))
                            SEDEL.Common.Neq
                            -> cont
                                 (SEDEL.Common.Comp SEDEL.Common.Neq)
                                 (Data.Map.Internal.Tip
                                    @ Unbound.Generics.LocallyNameless.Name.AnyName
                                    @ Unbound.Generics.LocallyNameless.Name.AnyName)
                                   `cast`
                                 (Sym (Unbound.Generics.PermM.N:Perm[0]
                                           <Unbound.Generics.LocallyNameless.Name.AnyName>_N)) }
                       GHC.Generics.R1 g2
                       -> case g2
                                 `cast`
                               ((GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'GHC.Maybe.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.Rec0
                                           SEDEL.Common.LogicalOp)>_R ; GHC.Generics.N:M1[0]
                                                                            <*>_N
                                                                            <GHC.Generics.S>_P
                                                                            <'GHC.Generics.MetaSel
                                                                               'GHC.Maybe.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy>_P
                                                                            <GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               SEDEL.Common.LogicalOp>_R) <GHC.Types.Any>_N ; GHC.Generics.N:K1[0]
                                                                                                                                  <*>_N
                                                                                                                                  <GHC.Generics.R>_P
                                                                                                                                  <SEDEL.Common.LogicalOp>_R
                                                                                                                                  <GHC.Types.Any>_P) of wild1 {
                            SEDEL.Common.LAnd
                            -> cont
                                 (SEDEL.Common.Logical SEDEL.Common.LAnd)
                                 (Data.Map.Internal.Tip
                                    @ Unbound.Generics.LocallyNameless.Name.AnyName
                                    @ Unbound.Generics.LocallyNameless.Name.AnyName)
                                   `cast`
                                 (Sym (Unbound.Generics.PermM.N:Perm[0]
                                           <Unbound.Generics.LocallyNameless.Name.AnyName>_N))
                            SEDEL.Common.LOr
                            -> cont
                                 (SEDEL.Common.Logical SEDEL.Common.LOr)
                                 (Data.Map.Internal.Tip
                                    @ Unbound.Generics.LocallyNameless.Name.AnyName
                                    @ Unbound.Generics.LocallyNameless.Name.AnyName)
                                   `cast`
                                 (Sym (Unbound.Generics.PermM.N:Perm[0]
                                           <Unbound.Generics.LocallyNameless.Name.AnyName>_N)) } }
                 } in
                 case m1 of wild {
                   SEDEL.Common.Arith g1
                   -> case g1 of wild1 {
                        SEDEL.Common.Add
                        -> cont
                             (SEDEL.Common.Arith SEDEL.Common.Add)
                             (Data.Map.Internal.Tip
                                @ Unbound.Generics.LocallyNameless.Name.AnyName
                                @ Unbound.Generics.LocallyNameless.Name.AnyName)
                               `cast`
                             (Sym (Unbound.Generics.PermM.N:Perm[0]
                                       <Unbound.Generics.LocallyNameless.Name.AnyName>_N))
                        SEDEL.Common.Sub
                        -> cont
                             (SEDEL.Common.Arith SEDEL.Common.Sub)
                             (Data.Map.Internal.Tip
                                @ Unbound.Generics.LocallyNameless.Name.AnyName
                                @ Unbound.Generics.LocallyNameless.Name.AnyName)
                               `cast`
                             (Sym (Unbound.Generics.PermM.N:Perm[0]
                                       <Unbound.Generics.LocallyNameless.Name.AnyName>_N))
                        SEDEL.Common.Mul
                        -> cont
                             (SEDEL.Common.Arith SEDEL.Common.Mul)
                             (Data.Map.Internal.Tip
                                @ Unbound.Generics.LocallyNameless.Name.AnyName
                                @ Unbound.Generics.LocallyNameless.Name.AnyName)
                               `cast`
                             (Sym (Unbound.Generics.PermM.N:Perm[0]
                                       <Unbound.Generics.LocallyNameless.Name.AnyName>_N))
                        SEDEL.Common.Div
                        -> cont
                             (SEDEL.Common.Arith SEDEL.Common.Div)
                             (Data.Map.Internal.Tip
                                @ Unbound.Generics.LocallyNameless.Name.AnyName
                                @ Unbound.Generics.LocallyNameless.Name.AnyName)
                               `cast`
                             (Sym (Unbound.Generics.PermM.N:Perm[0]
                                       <Unbound.Generics.LocallyNameless.Name.AnyName>_N)) }
                   SEDEL.Common.Comp g1
                   -> $j
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.CompOp)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.LogicalOp)))
                           @ GHC.Types.Any
                           g1
                             `cast`
                           (Sym (GHC.Generics.N:K1[0]
                                     <*>_N
                                     <GHC.Generics.R>_P
                                     <SEDEL.Common.CompOp>_R
                                     <GHC.Types.Any>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                    <*>_N
                                                                    <GHC.Generics.S>_P
                                                                    <'GHC.Generics.MetaSel
                                                                       'GHC.Maybe.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy>_P
                                                                    <GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       SEDEL.Common.CompOp>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                          <*>_N
                                                                                                          <GHC.Generics.C>_P
                                                                                                          <'GHC.Generics.MetaCons
                                                                                                             "Comp"
                                                                                                             'GHC.Generics.PrefixI
                                                                                                             'GHC.Types.False>_P
                                                                                                          <GHC.Generics.M1
                                                                                                             GHC.Generics.S
                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                'GHC.Maybe.Nothing
                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                             (GHC.Generics.K1
                                                                                                                GHC.Generics.R
                                                                                                                SEDEL.Common.CompOp)>_R)) <GHC.Types.Any>_N))
                   SEDEL.Common.Logical g1
                   -> $j
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.CompOp)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.LogicalOp)))
                           @ GHC.Types.Any
                           g1
                             `cast`
                           (Sym (GHC.Generics.N:K1[0]
                                     <*>_N
                                     <GHC.Generics.R>_P
                                     <SEDEL.Common.LogicalOp>_R
                                     <GHC.Types.Any>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                    <*>_N
                                                                    <GHC.Generics.S>_P
                                                                    <'GHC.Generics.MetaSel
                                                                       'GHC.Maybe.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy>_P
                                                                    <GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       SEDEL.Common.LogicalOp>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                             <*>_N
                                                                                                             <GHC.Generics.C>_P
                                                                                                             <'GHC.Generics.MetaCons
                                                                                                                "Logical"
                                                                                                                'GHC.Generics.PrefixI
                                                                                                                'GHC.Types.False>_P
                                                                                                             <GHC.Generics.M1
                                                                                                                GHC.Generics.S
                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                   'GHC.Maybe.Nothing
                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                (GHC.Generics.K1
                                                                                                                   GHC.Generics.R
                                                                                                                   SEDEL.Common.LogicalOp)>_R)) <GHC.Types.Any>_N)) }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaOperation_$cnamePatFind ::
    SEDEL.Common.Operation
    -> Unbound.Generics.LocallyNameless.Alpha.NamePatFind
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>m1,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: SEDEL.Common.Operation) ->
                 case x of wild {
                   SEDEL.Common.Arith g1
                   -> case g1 of wild1 { DEFAULT ->
                      Unbound.Generics.LocallyNameless.Alpha.$fAlpha()2
                        `cast`
                      (Sym (Unbound.Generics.LocallyNameless.Alpha.N:NamePatFind[0])) }
                   SEDEL.Common.Comp g1
                   -> case g1 of wild1 { DEFAULT ->
                      Unbound.Generics.LocallyNameless.Alpha.$fAlpha()2
                        `cast`
                      (Sym (Unbound.Generics.LocallyNameless.Alpha.N:NamePatFind[0])) }
                   SEDEL.Common.Logical g1
                   -> case g1 of wild1 { DEFAULT ->
                      Unbound.Generics.LocallyNameless.Alpha.$fAlpha()2
                        `cast`
                      (Sym (Unbound.Generics.LocallyNameless.Alpha.N:NamePatFind[0])) } }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaOperation_$cnthPatFind ::
    SEDEL.Common.Operation
    -> Unbound.Generics.LocallyNameless.Alpha.NthPatFind
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>m1,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: SEDEL.Common.Operation) ->
                 case x of wild {
                   SEDEL.Common.Arith g1
                   -> case g1 of wild1 { DEFAULT ->
                      (Data.Either.Left
                         @ GHC.Integer.Type.Integer
                         @ Unbound.Generics.LocallyNameless.Name.AnyName)
                        `cast`
                      (Sym (Unbound.Generics.LocallyNameless.Alpha.N:NthPatFind[0])) }
                   SEDEL.Common.Comp g1
                   -> case g1 of wild1 { DEFAULT ->
                      (Data.Either.Left
                         @ GHC.Integer.Type.Integer
                         @ Unbound.Generics.LocallyNameless.Name.AnyName)
                        `cast`
                      (Sym (Unbound.Generics.LocallyNameless.Alpha.N:NthPatFind[0])) }
                   SEDEL.Common.Logical g1
                   -> case g1 of wild1 { DEFAULT ->
                      (Data.Either.Left
                         @ GHC.Integer.Type.Integer
                         @ Unbound.Generics.LocallyNameless.Name.AnyName)
                        `cast`
                      (Sym (Unbound.Generics.LocallyNameless.Alpha.N:NthPatFind[0])) } }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaOperation_$copen ::
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> Unbound.Generics.LocallyNameless.Alpha.NthPatFind
    -> SEDEL.Common.Operation
    -> SEDEL.Common.Operation
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                (\ (c :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (b :: Unbound.Generics.LocallyNameless.Alpha.NthPatFind)
                   (x :: SEDEL.Common.Operation) ->
                 x) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaOperation_$cswaps' ::
    Unbound.Generics.LocallyNameless.Alpha.AlphaCtx
    -> Unbound.Generics.PermM.Perm
         Unbound.Generics.LocallyNameless.Name.AnyName
    -> SEDEL.Common.Operation
    -> SEDEL.Common.Operation
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                (\ (ctx :: Unbound.Generics.LocallyNameless.Alpha.AlphaCtx)
                   (perm :: Unbound.Generics.PermM.Perm
                              Unbound.Generics.LocallyNameless.Name.AnyName)
                   (x :: SEDEL.Common.Operation) ->
                 x) -}
2a0c91384ff6cefd07c7d1887666077f
  $fAlphaOperation_$cto ::
    GHC.Generics.Rep SEDEL.Common.Operation x -> SEDEL.Common.Operation
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (ds :: GHC.Generics.Rep SEDEL.Common.Operation x) ->
                 case ds
                        `cast`
                      ((Sub (SEDEL.Common.Rep_Operation[0]) ; GHC.Generics.N:M1[0]
                                                                  <*>_N
                                                                  <GHC.Generics.D>_P
                                                                  <'GHC.Generics.MetaData
                                                                     "Operation"
                                                                     "SEDEL.Common"
                                                                     "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                                                     'GHC.Types.False>_P
                                                                  <GHC.Generics.M1
                                                                     GHC.Generics.C
                                                                     ('GHC.Generics.MetaCons
                                                                        "Arith"
                                                                        'GHC.Generics.PrefixI
                                                                        'GHC.Types.False)
                                                                     (GHC.Generics.M1
                                                                        GHC.Generics.S
                                                                        ('GHC.Generics.MetaSel
                                                                           'GHC.Maybe.Nothing
                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                           'GHC.Generics.NoSourceStrictness
                                                                           'GHC.Generics.DecidedLazy)
                                                                        (GHC.Generics.K1
                                                                           GHC.Generics.R
                                                                           SEDEL.Common.ArithOp))
                                                                   GHC.Generics.:+: (GHC.Generics.M1
                                                                                       GHC.Generics.C
                                                                                       ('GHC.Generics.MetaCons
                                                                                          "Comp"
                                                                                          'GHC.Generics.PrefixI
                                                                                          'GHC.Types.False)
                                                                                       (GHC.Generics.M1
                                                                                          GHC.Generics.S
                                                                                          ('GHC.Generics.MetaSel
                                                                                             'GHC.Maybe.Nothing
                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                             'GHC.Generics.DecidedLazy)
                                                                                          (GHC.Generics.K1
                                                                                             GHC.Generics.R
                                                                                             SEDEL.Common.CompOp))
                                                                                     GHC.Generics.:+: GHC.Generics.M1
                                                                                                        GHC.Generics.C
                                                                                                        ('GHC.Generics.MetaCons
                                                                                                           "Logical"
                                                                                                           'GHC.Generics.PrefixI
                                                                                                           'GHC.Types.False)
                                                                                                        (GHC.Generics.M1
                                                                                                           GHC.Generics.S
                                                                                                           ('GHC.Generics.MetaSel
                                                                                                              'GHC.Maybe.Nothing
                                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                                              'GHC.Generics.DecidedLazy)
                                                                                                           (GHC.Generics.K1
                                                                                                              GHC.Generics.R
                                                                                                              SEDEL.Common.LogicalOp)))>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> SEDEL.Common.Arith
                        ds1
                          `cast`
                        ((GHC.Generics.N:M1[0]
                              <*>_N
                              <GHC.Generics.C>_P
                              <'GHC.Generics.MetaCons
                                 "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                              <GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R SEDEL.Common.ArithOp)>_R ; GHC.Generics.N:M1[0]
                                                                                  <*>_N
                                                                                  <GHC.Generics.S>_P
                                                                                  <'GHC.Generics.MetaSel
                                                                                     'GHC.Maybe.Nothing
                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                     'GHC.Generics.DecidedLazy>_P
                                                                                  <GHC.Generics.K1
                                                                                     GHC.Generics.R
                                                                                     SEDEL.Common.ArithOp>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                          <*>_N
                                                                                                                          <GHC.Generics.R>_P
                                                                                                                          <SEDEL.Common.ArithOp>_R
                                                                                                                          <x>_P)
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> SEDEL.Common.Comp
                             ds2
                               `cast`
                             ((GHC.Generics.N:M1[0]
                                   <*>_N
                                   <GHC.Generics.C>_P
                                   <'GHC.Generics.MetaCons
                                      "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                   <GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         SEDEL.Common.CompOp)>_R ; GHC.Generics.N:M1[0]
                                                                       <*>_N
                                                                       <GHC.Generics.S>_P
                                                                       <'GHC.Generics.MetaSel
                                                                          'GHC.Maybe.Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy>_P
                                                                       <GHC.Generics.K1
                                                                          GHC.Generics.R
                                                                          SEDEL.Common.CompOp>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                              <*>_N
                                                                                                              <GHC.Generics.R>_P
                                                                                                              <SEDEL.Common.CompOp>_R
                                                                                                              <x>_P)
                        GHC.Generics.R1 ds2
                        -> SEDEL.Common.Logical
                             ds2
                               `cast`
                             ((GHC.Generics.N:M1[0]
                                   <*>_N
                                   <GHC.Generics.C>_P
                                   <'GHC.Generics.MetaCons
                                      "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                   <GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         SEDEL.Common.LogicalOp)>_R ; GHC.Generics.N:M1[0]
                                                                          <*>_N
                                                                          <GHC.Generics.S>_P
                                                                          <'GHC.Generics.MetaSel
                                                                             'GHC.Maybe.Nothing
                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                             'GHC.Generics.NoSourceStrictness
                                                                             'GHC.Generics.DecidedLazy>_P
                                                                          <GHC.Generics.K1
                                                                             GHC.Generics.R
                                                                             SEDEL.Common.LogicalOp>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                    <*>_N
                                                                                                                    <GHC.Generics.R>_P
                                                                                                                    <SEDEL.Common.LogicalOp>_R
                                                                                                                    <x>_P) } }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fEqArithOp :: GHC.Classes.Eq SEDEL.Common.ArithOp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ SEDEL.Common.ArithOp
                  SEDEL.Common.$fEqArithOp_$c==
                  SEDEL.Common.$fEqArithOp_$c/= -}
2a0c91384ff6cefd07c7d1887666077f
  $fEqArithOp_$c/= ::
    SEDEL.Common.ArithOp -> SEDEL.Common.ArithOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: SEDEL.Common.ArithOp) (y :: SEDEL.Common.ArithOp) ->
                 case x of wild {
                   SEDEL.Common.Add
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True SEDEL.Common.Add -> GHC.Types.False }
                   SEDEL.Common.Sub
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True SEDEL.Common.Sub -> GHC.Types.False }
                   SEDEL.Common.Mul
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True SEDEL.Common.Mul -> GHC.Types.False }
                   SEDEL.Common.Div
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        SEDEL.Common.Div -> GHC.Types.False } }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fEqArithOp_$c== ::
    SEDEL.Common.ArithOp -> SEDEL.Common.ArithOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: SEDEL.Common.ArithOp)
                   (ds1 :: SEDEL.Common.ArithOp) ->
                 case ds of wild {
                   SEDEL.Common.Add
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SEDEL.Common.Add -> GHC.Types.True }
                   SEDEL.Common.Sub
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SEDEL.Common.Sub -> GHC.Types.True }
                   SEDEL.Common.Mul
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SEDEL.Common.Mul -> GHC.Types.True }
                   SEDEL.Common.Div
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        SEDEL.Common.Div -> GHC.Types.True } }) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fEqCompOp :: GHC.Classes.Eq SEDEL.Common.CompOp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ SEDEL.Common.CompOp
                  SEDEL.Common.$fEqCompOp_$c==
                  SEDEL.Common.$fEqCompOp_$c/= -}
daa3f54736e3f81d2c049bbf6395f88d
  $fEqCompOp_$c/= ::
    SEDEL.Common.CompOp -> SEDEL.Common.CompOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: SEDEL.Common.CompOp) (y :: SEDEL.Common.CompOp) ->
                 case x of wild {
                   SEDEL.Common.Lt
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True SEDEL.Common.Lt -> GHC.Types.False }
                   SEDEL.Common.Gt
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True SEDEL.Common.Gt -> GHC.Types.False }
                   SEDEL.Common.Equ
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True SEDEL.Common.Equ -> GHC.Types.False }
                   SEDEL.Common.Neq
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        SEDEL.Common.Neq -> GHC.Types.False } }) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fEqCompOp_$c== ::
    SEDEL.Common.CompOp -> SEDEL.Common.CompOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: SEDEL.Common.CompOp)
                   (ds1 :: SEDEL.Common.CompOp) ->
                 case ds of wild {
                   SEDEL.Common.Lt
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SEDEL.Common.Lt -> GHC.Types.True }
                   SEDEL.Common.Gt
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SEDEL.Common.Gt -> GHC.Types.True }
                   SEDEL.Common.Equ
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SEDEL.Common.Equ -> GHC.Types.True }
                   SEDEL.Common.Neq
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        SEDEL.Common.Neq -> GHC.Types.True } }) -}
d876d99f20cce7257c46364013f67fae
  $fEqLogicalOp :: GHC.Classes.Eq SEDEL.Common.LogicalOp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ SEDEL.Common.LogicalOp
                  SEDEL.Common.$fEqLogicalOp_$c==
                  SEDEL.Common.$fEqLogicalOp_$c/= -}
d876d99f20cce7257c46364013f67fae
  $fEqLogicalOp_$c/= ::
    SEDEL.Common.LogicalOp -> SEDEL.Common.LogicalOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: SEDEL.Common.LogicalOp) (y :: SEDEL.Common.LogicalOp) ->
                 case x of wild {
                   SEDEL.Common.LAnd
                   -> case y of wild1 {
                        SEDEL.Common.LAnd -> GHC.Types.False
                        SEDEL.Common.LOr -> GHC.Types.True }
                   SEDEL.Common.LOr
                   -> case y of wild1 {
                        SEDEL.Common.LAnd -> GHC.Types.True
                        SEDEL.Common.LOr -> GHC.Types.False } }) -}
d876d99f20cce7257c46364013f67fae
  $fEqLogicalOp_$c== ::
    SEDEL.Common.LogicalOp -> SEDEL.Common.LogicalOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: SEDEL.Common.LogicalOp)
                   (ds1 :: SEDEL.Common.LogicalOp) ->
                 case ds of wild {
                   SEDEL.Common.LAnd
                   -> case ds1 of wild1 {
                        SEDEL.Common.LAnd -> GHC.Types.True
                        SEDEL.Common.LOr -> GHC.Types.False }
                   SEDEL.Common.LOr
                   -> case ds1 of wild1 {
                        SEDEL.Common.LAnd -> GHC.Types.False
                        SEDEL.Common.LOr -> GHC.Types.True } }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fEqOperation :: GHC.Classes.Eq SEDEL.Common.Operation
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ SEDEL.Common.Operation
                  SEDEL.Common.$fEqOperation_$c==
                  SEDEL.Common.$fEqOperation_$c/= -}
2a0c91384ff6cefd07c7d1887666077f
  $fEqOperation_$c/= ::
    SEDEL.Common.Operation -> SEDEL.Common.Operation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: SEDEL.Common.Operation) (y :: SEDEL.Common.Operation) ->
                 case SEDEL.Common.$fEqOperation_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fEqOperation_$c== ::
    SEDEL.Common.Operation -> SEDEL.Common.Operation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: SEDEL.Common.Operation)
                   (ds1 :: SEDEL.Common.Operation) ->
                 case ds of wild {
                   SEDEL.Common.Arith a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        SEDEL.Common.Arith b1 -> SEDEL.Common.$fEqArithOp_$c== a1 b1 }
                   SEDEL.Common.Comp a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        SEDEL.Common.Comp b1 -> SEDEL.Common.$fEqCompOp_$c== a1 b1 }
                   SEDEL.Common.Logical a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        SEDEL.Common.Logical b1
                        -> SEDEL.Common.$fEqLogicalOp_$c== a1 b1 } }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fGenericArithOp :: GHC.Generics.Generic SEDEL.Common.ArithOp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ SEDEL.Common.ArithOp
                  SEDEL.Common.$fGenericArithOp1
                    `cast`
                  (forall (x :: <*>_N).
                   <SEDEL.Common.ArithOp>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "ArithOp"
                                     "SEDEL.Common"
                                     "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                     'GHC.Types.False>_P
                                  <(GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      GHC.Generics.U1
                                    GHC.Generics.:+: GHC.Generics.M1
                                                       GHC.Generics.C
                                                       ('GHC.Generics.MetaCons
                                                          "Sub"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False)
                                                       GHC.Generics.U1)
                                   GHC.Generics.:+: (GHC.Generics.M1
                                                       GHC.Generics.C
                                                       ('GHC.Generics.MetaCons
                                                          "Mul"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False)
                                                       GHC.Generics.U1
                                                     GHC.Generics.:+: GHC.Generics.M1
                                                                        GHC.Generics.C
                                                                        ('GHC.Generics.MetaCons
                                                                           "Div"
                                                                           'GHC.Generics.PrefixI
                                                                           'GHC.Types.False)
                                                                        GHC.Generics.U1)>_R) ; Sub (Sym (SEDEL.Common.Rep_ArithOp[0]))) <x>_N)
                  SEDEL.Common.$fAlphaArithOp_$cto -}
2a0c91384ff6cefd07c7d1887666077f
  $fGenericArithOp1 ::
    SEDEL.Common.ArithOp
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: SEDEL.Common.ArithOp) ->
                 case x1 of wild {
                   SEDEL.Common.Add -> SEDEL.Common.$fGenericArithOp5 @ x
                   SEDEL.Common.Sub -> SEDEL.Common.$fGenericArithOp4 @ x
                   SEDEL.Common.Mul -> SEDEL.Common.$fGenericArithOp3 @ x
                   SEDEL.Common.Div -> SEDEL.Common.$fGenericArithOp2 @ x }) -}
a0a05f078b133740542912867ec2d5eb
  $fGenericArithOp2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (SEDEL.Common.$fAlphaArithOp5 @ x)) -}
0ec88aaf5df966867f46119b9dc01b0a
  $fGenericArithOp3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (SEDEL.Common.$fAlphaArithOp6 @ x)) -}
ad2a9f51d553686b95444397977c2c12
  $fGenericArithOp4 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (SEDEL.Common.$fAlphaArithOp7 @ x)) -}
25f9eddab37019645043d7a41f36521b
  $fGenericArithOp5 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (SEDEL.Common.$fAlphaArithOp8 @ x)) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fGenericCompOp :: GHC.Generics.Generic SEDEL.Common.CompOp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ SEDEL.Common.CompOp
                  SEDEL.Common.$fGenericCompOp1
                    `cast`
                  (forall (x :: <*>_N).
                   <SEDEL.Common.CompOp>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "CompOp"
                                     "SEDEL.Common"
                                     "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                     'GHC.Types.False>_P
                                  <(GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      GHC.Generics.U1
                                    GHC.Generics.:+: GHC.Generics.M1
                                                       GHC.Generics.C
                                                       ('GHC.Generics.MetaCons
                                                          "Gt"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False)
                                                       GHC.Generics.U1)
                                   GHC.Generics.:+: (GHC.Generics.M1
                                                       GHC.Generics.C
                                                       ('GHC.Generics.MetaCons
                                                          "Equ"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False)
                                                       GHC.Generics.U1
                                                     GHC.Generics.:+: GHC.Generics.M1
                                                                        GHC.Generics.C
                                                                        ('GHC.Generics.MetaCons
                                                                           "Neq"
                                                                           'GHC.Generics.PrefixI
                                                                           'GHC.Types.False)
                                                                        GHC.Generics.U1)>_R) ; Sub (Sym (SEDEL.Common.Rep_CompOp[0]))) <x>_N)
                  SEDEL.Common.$fAlphaCompOp_$cto -}
daa3f54736e3f81d2c049bbf6395f88d
  $fGenericCompOp1 ::
    SEDEL.Common.CompOp
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: SEDEL.Common.CompOp) ->
                 case x1 of wild {
                   SEDEL.Common.Lt -> SEDEL.Common.$fGenericCompOp5 @ x
                   SEDEL.Common.Gt -> SEDEL.Common.$fGenericCompOp4 @ x
                   SEDEL.Common.Equ -> SEDEL.Common.$fGenericCompOp3 @ x
                   SEDEL.Common.Neq -> SEDEL.Common.$fGenericCompOp2 @ x }) -}
b9692d28041587fce5dfa5cab1a3a256
  $fGenericCompOp2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (SEDEL.Common.$fAlphaCompOp5 @ x)) -}
9c2999e896c23d68cce844a5bede318d
  $fGenericCompOp3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (SEDEL.Common.$fAlphaCompOp6 @ x)) -}
11ae9ef203af951ee23636c4a4dc7934
  $fGenericCompOp4 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (SEDEL.Common.$fAlphaCompOp7 @ x)) -}
d096fdd4a8dfa9d0a5d25c920179a690
  $fGenericCompOp5 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (SEDEL.Common.$fAlphaCompOp8 @ x)) -}
d876d99f20cce7257c46364013f67fae
  $fGenericLogicalOp :: GHC.Generics.Generic SEDEL.Common.LogicalOp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ SEDEL.Common.LogicalOp
                  SEDEL.Common.$fGenericLogicalOp1
                    `cast`
                  (forall (x :: <*>_N).
                   <SEDEL.Common.LogicalOp>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "LogicalOp"
                                     "SEDEL.Common"
                                     "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.M1
                                                      GHC.Generics.C
                                                      ('GHC.Generics.MetaCons
                                                         "LOr"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1>_R) ; Sub (Sym (SEDEL.Common.Rep_LogicalOp[0]))) <x>_N)
                  SEDEL.Common.$fAlphaLogicalOp_$cto -}
d876d99f20cce7257c46364013f67fae
  $fGenericLogicalOp1 ::
    SEDEL.Common.LogicalOp
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "LOr" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: SEDEL.Common.LogicalOp) ->
                 case x1 of wild {
                   SEDEL.Common.LAnd -> SEDEL.Common.$fGenericLogicalOp3 @ x
                   SEDEL.Common.LOr -> SEDEL.Common.$fGenericLogicalOp2 @ x }) -}
7b4f900f19c8f9f8e51e84c6117ee9eb
  $fGenericLogicalOp2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "LOr" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "LOr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "LOr" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
918ac554a1ada3c7cfe1212c4d05bcb3
  $fGenericLogicalOp3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "LOr" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "LOr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
2a0c91384ff6cefd07c7d1887666077f
  $fGenericOperation :: GHC.Generics.Generic SEDEL.Common.Operation
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ SEDEL.Common.Operation
                  SEDEL.Common.$fGenericOperation1
                    `cast`
                  (forall (x :: <*>_N).
                   <SEDEL.Common.Operation>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "Operation"
                                     "SEDEL.Common"
                                     "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'GHC.Maybe.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.ArithOp))
                                   GHC.Generics.:+: (GHC.Generics.M1
                                                       GHC.Generics.C
                                                       ('GHC.Generics.MetaCons
                                                          "Comp"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False)
                                                       (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             'GHC.Maybe.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R SEDEL.Common.CompOp))
                                                     GHC.Generics.:+: GHC.Generics.M1
                                                                        GHC.Generics.C
                                                                        ('GHC.Generics.MetaCons
                                                                           "Logical"
                                                                           'GHC.Generics.PrefixI
                                                                           'GHC.Types.False)
                                                                        (GHC.Generics.M1
                                                                           GHC.Generics.S
                                                                           ('GHC.Generics.MetaSel
                                                                              'GHC.Maybe.Nothing
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              SEDEL.Common.LogicalOp)))>_R) ; Sub (Sym (SEDEL.Common.Rep_Operation[0]))) <x>_N)
                  SEDEL.Common.$fAlphaOperation_$cto -}
2a0c91384ff6cefd07c7d1887666077f
  $fGenericOperation1 ::
    SEDEL.Common.Operation
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.ArithOp)))
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.CompOp))
          GHC.Generics.:+: GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.LogicalOp)))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: SEDEL.Common.Operation) ->
                 case x1 of wild {
                   SEDEL.Common.Arith g1
                   -> GHC.Generics.L1
                        @ *
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.ArithOp)))
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.CompOp))
                           GHC.Generics.:+: GHC.Generics.M1
                                              GHC.Generics.C
                                              ('GHC.Generics.MetaCons
                                                 "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                              (GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    'GHC.Maybe.Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R SEDEL.Common.LogicalOp)))
                        @ x
                        g1
                          `cast`
                        (Sym (GHC.Generics.N:K1[0]
                                  <*>_N
                                  <GHC.Generics.R>_P
                                  <SEDEL.Common.ArithOp>_R
                                  <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                     <*>_N
                                                     <GHC.Generics.S>_P
                                                     <'GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy>_P
                                                     <GHC.Generics.K1
                                                        GHC.Generics.R
                                                        SEDEL.Common.ArithOp>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                            <*>_N
                                                                                            <GHC.Generics.C>_P
                                                                                            <'GHC.Generics.MetaCons
                                                                                               "Arith"
                                                                                               'GHC.Generics.PrefixI
                                                                                               'GHC.Types.False>_P
                                                                                            <GHC.Generics.M1
                                                                                               GHC.Generics.S
                                                                                               ('GHC.Generics.MetaSel
                                                                                                  'GHC.Maybe.Nothing
                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                               (GHC.Generics.K1
                                                                                                  GHC.Generics.R
                                                                                                  SEDEL.Common.ArithOp)>_R)) <x>_N)
                   SEDEL.Common.Comp g1
                   -> GHC.Generics.R1
                        @ *
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.ArithOp)))
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.CompOp))
                           GHC.Generics.:+: GHC.Generics.M1
                                              GHC.Generics.C
                                              ('GHC.Generics.MetaCons
                                                 "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                              (GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    'GHC.Maybe.Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R SEDEL.Common.LogicalOp)))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.CompOp)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.LogicalOp)))
                           @ x
                           g1
                             `cast`
                           (Sym (GHC.Generics.N:K1[0]
                                     <*>_N
                                     <GHC.Generics.R>_P
                                     <SEDEL.Common.CompOp>_R
                                     <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                        <*>_N
                                                        <GHC.Generics.S>_P
                                                        <'GHC.Generics.MetaSel
                                                           'GHC.Maybe.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy>_P
                                                        <GHC.Generics.K1
                                                           GHC.Generics.R
                                                           SEDEL.Common.CompOp>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                              <*>_N
                                                                                              <GHC.Generics.C>_P
                                                                                              <'GHC.Generics.MetaCons
                                                                                                 "Comp"
                                                                                                 'GHC.Generics.PrefixI
                                                                                                 'GHC.Types.False>_P
                                                                                              <GHC.Generics.M1
                                                                                                 GHC.Generics.S
                                                                                                 ('GHC.Generics.MetaSel
                                                                                                    'GHC.Maybe.Nothing
                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                 (GHC.Generics.K1
                                                                                                    GHC.Generics.R
                                                                                                    SEDEL.Common.CompOp)>_R)) <x>_N))
                   SEDEL.Common.Logical g1
                   -> GHC.Generics.R1
                        @ *
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.ArithOp)))
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.CompOp))
                           GHC.Generics.:+: GHC.Generics.M1
                                              GHC.Generics.C
                                              ('GHC.Generics.MetaCons
                                                 "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                              (GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    'GHC.Maybe.Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R SEDEL.Common.LogicalOp)))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.CompOp)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "Logical" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R SEDEL.Common.LogicalOp)))
                           @ x
                           g1
                             `cast`
                           (Sym (GHC.Generics.N:K1[0]
                                     <*>_N
                                     <GHC.Generics.R>_P
                                     <SEDEL.Common.LogicalOp>_R
                                     <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                        <*>_N
                                                        <GHC.Generics.S>_P
                                                        <'GHC.Generics.MetaSel
                                                           'GHC.Maybe.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy>_P
                                                        <GHC.Generics.K1
                                                           GHC.Generics.R
                                                           SEDEL.Common.LogicalOp>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                 <*>_N
                                                                                                 <GHC.Generics.C>_P
                                                                                                 <'GHC.Generics.MetaCons
                                                                                                    "Logical"
                                                                                                    'GHC.Generics.PrefixI
                                                                                                    'GHC.Types.False>_P
                                                                                                 <GHC.Generics.M1
                                                                                                    GHC.Generics.S
                                                                                                    ('GHC.Generics.MetaSel
                                                                                                       'GHC.Maybe.Nothing
                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                    (GHC.Generics.K1
                                                                                                       GHC.Generics.R
                                                                                                       SEDEL.Common.LogicalOp)>_R)) <x>_N)) }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fShowArithOp :: GHC.Show.Show SEDEL.Common.ArithOp
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ SEDEL.Common.ArithOp
                  SEDEL.Common.$fShowArithOp_$cshowsPrec
                  SEDEL.Common.$fShowArithOp_$cshow
                  SEDEL.Common.$fShowArithOp_$cshowList -}
7f6d691056301ff209993be8ae8262bf
  $fShowArithOp1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   SEDEL.Common.$fShowArithOp2) -}
2879e42fffb7c60b8f7faf425dbdfa3c
  $fShowArithOp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Div"#) -}
2436279e8340b5582523990503ae1621
  $fShowArithOp3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   SEDEL.Common.$fShowArithOp4) -}
342afdaf1a3f5c257baf81326b00ca01
  $fShowArithOp4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Mul"#) -}
5f5eb429c91b50a98af37a302fa83061
  $fShowArithOp5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   SEDEL.Common.$fShowArithOp6) -}
f24970c92bb4d3a3de77065f2738eab2
  $fShowArithOp6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Sub"#) -}
a06e015df71d1be682e57e3f42323cea
  $fShowArithOp7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   SEDEL.Common.$fShowArithOp8) -}
29dc9d46547215ac3c490f2b06abdf6d
  $fShowArithOp8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Add"#) -}
2a0c91384ff6cefd07c7d1887666077f
  $fShowArithOp_$cshow :: SEDEL.Common.ArithOp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: SEDEL.Common.ArithOp) ->
                 case x of wild {
                   SEDEL.Common.Add -> SEDEL.Common.$fShowArithOp7
                   SEDEL.Common.Sub -> SEDEL.Common.$fShowArithOp5
                   SEDEL.Common.Mul -> SEDEL.Common.$fShowArithOp3
                   SEDEL.Common.Div -> SEDEL.Common.$fShowArithOp1 }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fShowArithOp_$cshowList ::
    [SEDEL.Common.ArithOp] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [SEDEL.Common.ArithOp]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ SEDEL.Common.ArithOp
                   SEDEL.Common.$w$cshowsPrec
                   ls
                   s) -}
2a0c91384ff6cefd07c7d1887666077f
  $fShowArithOp_$cshowsPrec ::
    GHC.Types.Int -> SEDEL.Common.ArithOp -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: SEDEL.Common.ArithOp)
                   (w2 :: GHC.Base.String) ->
                 SEDEL.Common.$w$cshowsPrec w1 w2) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fShowCompOp :: GHC.Show.Show SEDEL.Common.CompOp
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ SEDEL.Common.CompOp
                  SEDEL.Common.$fShowCompOp_$cshowsPrec
                  SEDEL.Common.$fShowCompOp_$cshow
                  SEDEL.Common.$fShowCompOp_$cshowList -}
f5691af61bbc34236ca42812643b520e
  $fShowCompOp1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   SEDEL.Common.$fShowCompOp2) -}
40cb2da10abcff4277a85392eea5d6d9
  $fShowCompOp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Neq"#) -}
12b8dcbc94b48d81363a31dd40a9cc15
  $fShowCompOp3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   SEDEL.Common.$fShowCompOp4) -}
fe8f3991792aabc99464745e180beb8c
  $fShowCompOp4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Equ"#) -}
11e2e78837d3cf8e06b7227fcce880a4
  $fShowCompOp5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   SEDEL.Common.$fShowCompOp6) -}
461c1d9a9b299832a26928b6f0f94dec
  $fShowCompOp6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Gt"#) -}
feb0778ea7fbc02c6ae148771ef3e9a9
  $fShowCompOp7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   SEDEL.Common.$fShowCompOp8) -}
97c710edea08c8a46d168ef29dc6f56b
  $fShowCompOp8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Lt"#) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fShowCompOp_$cshow :: SEDEL.Common.CompOp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: SEDEL.Common.CompOp) ->
                 case x of wild {
                   SEDEL.Common.Lt -> SEDEL.Common.$fShowCompOp7
                   SEDEL.Common.Gt -> SEDEL.Common.$fShowCompOp5
                   SEDEL.Common.Equ -> SEDEL.Common.$fShowCompOp3
                   SEDEL.Common.Neq -> SEDEL.Common.$fShowCompOp1 }) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fShowCompOp_$cshowList :: [SEDEL.Common.CompOp] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [SEDEL.Common.CompOp]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ SEDEL.Common.CompOp
                   SEDEL.Common.$w$cshowsPrec1
                   ls
                   s) -}
daa3f54736e3f81d2c049bbf6395f88d
  $fShowCompOp_$cshowsPrec ::
    GHC.Types.Int -> SEDEL.Common.CompOp -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: SEDEL.Common.CompOp)
                   (w2 :: GHC.Base.String) ->
                 SEDEL.Common.$w$cshowsPrec1 w1 w2) -}
d876d99f20cce7257c46364013f67fae
  $fShowLogicalOp :: GHC.Show.Show SEDEL.Common.LogicalOp
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ SEDEL.Common.LogicalOp
                  SEDEL.Common.$fShowLogicalOp_$cshowsPrec
                  SEDEL.Common.$fShowLogicalOp_$cshow
                  SEDEL.Common.$fShowLogicalOp_$cshowList -}
d876d99f20cce7257c46364013f67fae
  $fShowLogicalOp1 :: SEDEL.Common.LogicalOp -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: SEDEL.Common.LogicalOp) (eta :: GHC.Base.String) ->
                 case ds of wild {
                   SEDEL.Common.LAnd
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           SEDEL.Common.$fShowLogicalOp4)
                        eta
                   SEDEL.Common.LOr
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           SEDEL.Common.$fShowLogicalOp2)
                        eta }) -}
1fe266db745bd76f06a7842de8cb678b
  $fShowLogicalOp2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   SEDEL.Common.$fShowLogicalOp3) -}
1cd98ef6b6e54ca79b2e289483dfb834
  $fShowLogicalOp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LOr"#) -}
0e2e898e05fdeb66d3223b382479d507
  $fShowLogicalOp4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   SEDEL.Common.$fShowLogicalOp5) -}
8fc2256c45a4ac2a01ec50a0e83544ff
  $fShowLogicalOp5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LAnd"#) -}
d876d99f20cce7257c46364013f67fae
  $fShowLogicalOp_$cshow :: SEDEL.Common.LogicalOp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: SEDEL.Common.LogicalOp) ->
                 case x of wild {
                   SEDEL.Common.LAnd -> SEDEL.Common.$fShowLogicalOp4
                   SEDEL.Common.LOr -> SEDEL.Common.$fShowLogicalOp2 }) -}
d876d99f20cce7257c46364013f67fae
  $fShowLogicalOp_$cshowList ::
    [SEDEL.Common.LogicalOp] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [SEDEL.Common.LogicalOp]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ SEDEL.Common.LogicalOp
                   SEDEL.Common.$fShowLogicalOp1
                   ls
                   s) -}
d876d99f20cce7257c46364013f67fae
  $fShowLogicalOp_$cshowsPrec ::
    GHC.Types.Int -> SEDEL.Common.LogicalOp -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: SEDEL.Common.LogicalOp)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   SEDEL.Common.LAnd
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           SEDEL.Common.$fShowLogicalOp4)
                        eta
                   SEDEL.Common.LOr
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           SEDEL.Common.$fShowLogicalOp2)
                        eta }) -}
2a0c91384ff6cefd07c7d1887666077f
  $fShowOperation :: GHC.Show.Show SEDEL.Common.Operation
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ SEDEL.Common.Operation
                  SEDEL.Common.$fShowOperation_$cshowsPrec
                  SEDEL.Common.$fShowOperation_$cshow
                  SEDEL.Common.$fShowOperation_$cshowList -}
2a0c91384ff6cefd07c7d1887666077f
  $fShowOperation1 :: SEDEL.Common.Operation -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: SEDEL.Common.Operation)
                   (w1 :: GHC.Base.String) ->
                 SEDEL.Common.$w$cshowsPrec2 0# w w1) -}
980401ec7b41e60966701fe0205b1855
  $fShowOperation2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   SEDEL.Common.$fShowOperation3) -}
ae8b2c23746e50940e979f790d088941
  $fShowOperation3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Logical "#) -}
be197813afdf7d5f872b895aec086361
  $fShowOperation4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   SEDEL.Common.$fShowOperation5) -}
933f88e5a1634096af5bdd7b8676bf2f
  $fShowOperation5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Comp "#) -}
ce92ab46ab14c7525fcf1d1a5ee84c6c
  $fShowOperation6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   SEDEL.Common.$fShowOperation7) -}
7dc57de9f00b901346e811afc74c4c2f
  $fShowOperation7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Arith "#) -}
29404086343493848817c867215a5e84
  $fShowOperation8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
2a0c91384ff6cefd07c7d1887666077f
  $fShowOperation_$cshow :: SEDEL.Common.Operation -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: SEDEL.Common.Operation) ->
                 SEDEL.Common.$fShowOperation_$cshowsPrec
                   SEDEL.Common.$fShowOperation8
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2a0c91384ff6cefd07c7d1887666077f
  $fShowOperation_$cshowList ::
    [SEDEL.Common.Operation] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [SEDEL.Common.Operation]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ SEDEL.Common.Operation
                   SEDEL.Common.$fShowOperation1
                   ls
                   s) -}
2a0c91384ff6cefd07c7d1887666077f
  $fShowOperation_$cshowsPrec ::
    GHC.Types.Int -> SEDEL.Common.Operation -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: SEDEL.Common.Operation)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 SEDEL.Common.$w$cshowsPrec2 ww1 w1 w2 }) -}
486a2b650d6d954e45a2cd80f53dd716
  $tc'Add :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5668460203416507360##
                   11288674515942688584##
                   SEDEL.Common.$trModule
                   SEDEL.Common.$tc'Add2
                   0#
                   SEDEL.Common.$tc'Add1) -}
f2711d9da62f42c066babfd62928d3d8
  $tc'Add1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
d33457ec8f38ec3dea514c2e6f952a10
  $tc'Add2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.Common.$tc'Add3) -}
5e15f978f3275d72ebed90d9ccd43fe1
  $tc'Add3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Add"#) -}
ebb3f5b392af447db25108ebbdec3d9e
  $tc'Arith :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10359562426160679921##
                   16772912718769494497##
                   SEDEL.Common.$trModule
                   SEDEL.Common.$tc'Arith2
                   0#
                   SEDEL.Common.$tc'Arith1) -}
fff3f7f675aba7480adb5e10bba9d272
  $tc'Arith1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fa4ef42abeb207b9db8e79e4f5986ab3
  $tc'Arith2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.Common.$tc'Arith3) -}
d5937d09bfd4a7d607256e9cca7f625e
  $tc'Arith3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Arith"#) -}
ef4185e3669813a332a99856edb768fc
  $tc'Comp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6915803778501462716##
                   9824178038731824574##
                   SEDEL.Common.$trModule
                   SEDEL.Common.$tc'Comp2
                   0#
                   SEDEL.Common.$tc'Comp1) -}
67959b1cc66056f05e2dddea96a5515e
  $tc'Comp1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
94546f410939b0691f021650cfe508b4
  $tc'Comp2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.Common.$tc'Comp3) -}
ccfbdfff25fa3845582599a1ba4119d1
  $tc'Comp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Comp"#) -}
54dc3e27aa811c2d9b44ae99e2dfbbcf
  $tc'Div :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10264550359813065482##
                   12645329352477418245##
                   SEDEL.Common.$trModule
                   SEDEL.Common.$tc'Div1
                   0#
                   SEDEL.Common.$tc'Add1) -}
965508ba9df55ffd20897b1f81aabde7
  $tc'Div1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.Common.$tc'Div2) -}
b9656c0122dce0a42b6a9705e91debfa
  $tc'Div2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Div"#) -}
12cdc5cf7f61b986758d38b4c636d1b4
  $tc'Equ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18089605572332605906##
                   13562672517756990785##
                   SEDEL.Common.$trModule
                   SEDEL.Common.$tc'Equ2
                   0#
                   SEDEL.Common.$tc'Equ1) -}
1e6395d4e7f414b1403ca6d010e11d24
  $tc'Equ1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
0fd41f1dd6640ccc1d1b4232b4afb77d
  $tc'Equ2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.Common.$tc'Equ3) -}
7e8aa7419cdf82591cc336b6b9aa78d3
  $tc'Equ3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Equ"#) -}
a5ef87545978abf947ce05b29f015159
  $tc'Gt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11561347443895987125##
                   6471094624965708222##
                   SEDEL.Common.$trModule
                   SEDEL.Common.$tc'Gt1
                   0#
                   SEDEL.Common.$tc'Equ1) -}
711b0e59f4d094df5da6087bddb85b71
  $tc'Gt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.Common.$tc'Gt2) -}
f798500445b4fdb79d444fb61a8a043e
  $tc'Gt2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Gt"#) -}
fc66e14212066208435f6a7f830ac30a
  $tc'LAnd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16921774431510430301##
                   14221018627639053820##
                   SEDEL.Common.$trModule
                   SEDEL.Common.$tc'LAnd2
                   0#
                   SEDEL.Common.$tc'LAnd1) -}
7e2522e05ccff5cb45910886f389bb3b
  $tc'LAnd1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
89eda4b3a7129d03560d4e30b27e8d21
  $tc'LAnd2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.Common.$tc'LAnd3) -}
940d054e676633b45bec76d3ee5e9417
  $tc'LAnd3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LAnd"#) -}
14bbd53b85454a4556f18ccfd8af8dea
  $tc'LOr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8918673521579929330##
                   10285774313893309052##
                   SEDEL.Common.$trModule
                   SEDEL.Common.$tc'LOr1
                   0#
                   SEDEL.Common.$tc'LAnd1) -}
480b9229958cdace14c766a241b5f447
  $tc'LOr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.Common.$tc'LOr2) -}
f82c9deaf79a63da0ca527913222a5ff
  $tc'LOr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LOr"#) -}
40bfd51ac464587a52048c0d36daa31e
  $tc'Logical :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12954743922666903077##
                   7144082239266912484##
                   SEDEL.Common.$trModule
                   SEDEL.Common.$tc'Logical2
                   0#
                   SEDEL.Common.$tc'Logical1) -}
296ffcd77029ddb762d03c1c8f2bea26
  $tc'Logical1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
72becf68bf153053cdad1de83a748b45
  $tc'Logical2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.Common.$tc'Logical3) -}
de0c0d5bfb146b20ccc752671aec3c1d
  $tc'Logical3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Logical"#) -}
8e07bb74a271fc95bc293a24d710427c
  $tc'Lt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11566570194599337843##
                   8349169141949426782##
                   SEDEL.Common.$trModule
                   SEDEL.Common.$tc'Lt1
                   0#
                   SEDEL.Common.$tc'Equ1) -}
a12ac45a845789678ee6616bae2d21f2
  $tc'Lt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.Common.$tc'Lt2) -}
4791c4b8441ef4a2929c2cfe761aa339
  $tc'Lt2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Lt"#) -}
e609fa5866883ab57433b9ff22482258
  $tc'Mul :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   565474435563654466##
                   1719342612904852543##
                   SEDEL.Common.$trModule
                   SEDEL.Common.$tc'Mul1
                   0#
                   SEDEL.Common.$tc'Add1) -}
c90829a2e3ac34e1d92fd70984185c37
  $tc'Mul1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.Common.$tc'Mul2) -}
399134c6cf738e0a673791a2b595720e
  $tc'Mul2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Mul"#) -}
0125f94aa0d8df74f843f669bad2bdc8
  $tc'Neq :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   494586609380121350##
                   12754298110323310727##
                   SEDEL.Common.$trModule
                   SEDEL.Common.$tc'Neq1
                   0#
                   SEDEL.Common.$tc'Equ1) -}
97168845d044a58e0dc3f4ff9797e183
  $tc'Neq1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.Common.$tc'Neq2) -}
c662eda42b1c4608cc56915093382f09
  $tc'Neq2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Neq"#) -}
c36ecee0e863e1865502f181113e8f54
  $tc'Sub :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17248251470806302998##
                   3358750935403888742##
                   SEDEL.Common.$trModule
                   SEDEL.Common.$tc'Sub1
                   0#
                   SEDEL.Common.$tc'Add1) -}
041babde5cc5b61da22109c74d910cb5
  $tc'Sub1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.Common.$tc'Sub2) -}
7cfb2f7525a9139eee6acfffce469cb8
  $tc'Sub2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Sub"#) -}
e237e059fe55929406cc3112a1c5ac27
  $tcArithOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12638647313761316037##
                   3204292425830383263##
                   SEDEL.Common.$trModule
                   SEDEL.Common.$tcArithOp1
                   0#
                   GHC.Types.krep$*) -}
cfc5e4dbcb00800a90b14a3dc1b41768
  $tcArithOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.Common.$tcArithOp2) -}
256a87a0edff7704e3f04e44a52d98db
  $tcArithOp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ArithOp"#) -}
9bd1cd7390ccb4b842be59b17417b250
  $tcCompOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17137098896802763705##
                   3209620761662228598##
                   SEDEL.Common.$trModule
                   SEDEL.Common.$tcCompOp1
                   0#
                   GHC.Types.krep$*) -}
d6bacc0f6668600b7880e012e32a69b6
  $tcCompOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.Common.$tcCompOp2) -}
72bee3e9e5588c034712013951ab7384
  $tcCompOp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompOp"#) -}
3ec060ae7d2e5c1dd0ef585e87c392ed
  $tcLogicalOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14085355234290467832##
                   993651627646558759##
                   SEDEL.Common.$trModule
                   SEDEL.Common.$tcLogicalOp1
                   0#
                   GHC.Types.krep$*) -}
bf4a5f4345b70b92c0a3e32d523bebdb
  $tcLogicalOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.Common.$tcLogicalOp2) -}
12e4c35ef1e81796d504d0f95c5103f8
  $tcLogicalOp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LogicalOp"#) -}
6a56102af7ab9eea3f2c15be206b225c
  $tcOperation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4317393372527297197##
                   14895135010705845406##
                   SEDEL.Common.$trModule
                   SEDEL.Common.$tcOperation1
                   0#
                   GHC.Types.krep$*) -}
67d9e12f6cd1d235ff5ba686b0932044
  $tcOperation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.Common.$tcOperation2) -}
e19d7cb2b60878f6b5a4e9d5ac8cb2c8
  $tcOperation2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Operation"#) -}
998c077ac66c67ee21bf5a8e293ec0c8
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   SEDEL.Common.$trModule3
                   SEDEL.Common.$trModule1) -}
b4c39eba18fa2213f8a89f450cd8e1af
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.Common.$trModule2) -}
9871390e06fe7d302f3a29930229e36e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SEDEL.Common"#) -}
27c796d8608663ddaf72b01ca65207ab
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SEDEL.Common.$trModule4) -}
b4f5f2d7180c93992a4409b89c77329e
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"#) -}
2a0c91384ff6cefd07c7d1887666077f
  $w$cacompare' ::
    SEDEL.Common.ArithOp -> SEDEL.Common.ArithOp -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>, Inline: [2],
     Unfolding: (\ (w :: SEDEL.Common.ArithOp)
                   (w1 :: SEDEL.Common.ArithOp) ->
                 case w of wild {
                   SEDEL.Common.Add
                   -> case w1 of wild1 {
                        SEDEL.Common.Add -> GHC.Types.EQ
                        SEDEL.Common.Sub -> GHC.Types.LT
                        SEDEL.Common.Mul -> GHC.Types.LT
                        SEDEL.Common.Div -> GHC.Types.LT }
                   SEDEL.Common.Sub
                   -> case w1 of wild1 {
                        SEDEL.Common.Add -> GHC.Types.GT
                        SEDEL.Common.Sub -> GHC.Types.EQ
                        SEDEL.Common.Mul -> GHC.Types.LT
                        SEDEL.Common.Div -> GHC.Types.LT }
                   SEDEL.Common.Mul
                   -> case w1 of wild1 {
                        DEFAULT -> GHC.Types.GT
                        SEDEL.Common.Mul -> GHC.Types.EQ
                        SEDEL.Common.Div -> GHC.Types.LT }
                   SEDEL.Common.Div
                   -> case w1 of wild1 {
                        DEFAULT -> GHC.Types.GT SEDEL.Common.Div -> GHC.Types.EQ } }) -}
daa3f54736e3f81d2c049bbf6395f88d
  $w$cacompare'1 ::
    SEDEL.Common.CompOp -> SEDEL.Common.CompOp -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>, Inline: [2],
     Unfolding: (\ (w :: SEDEL.Common.CompOp)
                   (w1 :: SEDEL.Common.CompOp) ->
                 case w of wild {
                   SEDEL.Common.Lt
                   -> case w1 of wild1 {
                        SEDEL.Common.Lt -> GHC.Types.EQ
                        SEDEL.Common.Gt -> GHC.Types.LT
                        SEDEL.Common.Equ -> GHC.Types.LT
                        SEDEL.Common.Neq -> GHC.Types.LT }
                   SEDEL.Common.Gt
                   -> case w1 of wild1 {
                        SEDEL.Common.Lt -> GHC.Types.GT
                        SEDEL.Common.Gt -> GHC.Types.EQ
                        SEDEL.Common.Equ -> GHC.Types.LT
                        SEDEL.Common.Neq -> GHC.Types.LT }
                   SEDEL.Common.Equ
                   -> case w1 of wild1 {
                        DEFAULT -> GHC.Types.GT
                        SEDEL.Common.Equ -> GHC.Types.EQ
                        SEDEL.Common.Neq -> GHC.Types.LT }
                   SEDEL.Common.Neq
                   -> case w1 of wild1 {
                        DEFAULT -> GHC.Types.GT SEDEL.Common.Neq -> GHC.Types.EQ } }) -}
2a0c91384ff6cefd07c7d1887666077f
  $w$cacompare'2 ::
    SEDEL.Common.Operation
    -> SEDEL.Common.Operation -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>, Inline: [2],
     Unfolding: (\ (w :: SEDEL.Common.Operation)
                   (w1 :: SEDEL.Common.Operation) ->
                 case w of wild {
                   SEDEL.Common.Arith g1
                   -> case w1 of wild1 {
                        SEDEL.Common.Arith g2 -> SEDEL.Common.$w$cacompare' g1 g2
                        SEDEL.Common.Comp g2 -> GHC.Types.LT
                        SEDEL.Common.Logical g2 -> GHC.Types.LT }
                   SEDEL.Common.Comp g1
                   -> case w1 of wild1 {
                        SEDEL.Common.Arith g2 -> GHC.Types.GT
                        SEDEL.Common.Comp g2 -> SEDEL.Common.$w$cacompare'1 g1 g2
                        SEDEL.Common.Logical g2 -> GHC.Types.LT }
                   SEDEL.Common.Logical g1
                   -> case w1 of wild1 {
                        DEFAULT -> GHC.Types.GT
                        SEDEL.Common.Logical g2
                        -> case g1 of wild2 {
                             SEDEL.Common.LAnd
                             -> case g2 of wild3 {
                                  SEDEL.Common.LAnd -> GHC.Types.EQ
                                  SEDEL.Common.LOr -> GHC.Types.LT }
                             SEDEL.Common.LOr
                             -> case g2 of wild3 {
                                  SEDEL.Common.LAnd -> GHC.Types.GT
                                  SEDEL.Common.LOr -> GHC.Types.EQ } } } }) -}
2a0c91384ff6cefd07c7d1887666077f
  $w$cfreshen' ::
    (forall a. a -> m a)
    -> SEDEL.Common.ArithOp
    -> m (SEDEL.Common.ArithOp,
          Unbound.Generics.PermM.Perm
            Unbound.Generics.LocallyNameless.Name.AnyName)
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (ww :: forall a. a -> m a)
                   (w :: SEDEL.Common.ArithOp) ->
                 case w of wild {
                   SEDEL.Common.Add
                   -> ww
                        @ (SEDEL.Common.ArithOp,
                           Unbound.Generics.PermM.Perm
                             Unbound.Generics.LocallyNameless.Name.AnyName)
                        SEDEL.Common.$fAlphaArithOp4
                   SEDEL.Common.Sub
                   -> ww
                        @ (SEDEL.Common.ArithOp,
                           Unbound.Generics.PermM.Perm
                             Unbound.Generics.LocallyNameless.Name.AnyName)
                        SEDEL.Common.$fAlphaArithOp3
                   SEDEL.Common.Mul
                   -> ww
                        @ (SEDEL.Common.ArithOp,
                           Unbound.Generics.PermM.Perm
                             Unbound.Generics.LocallyNameless.Name.AnyName)
                        SEDEL.Common.$fAlphaArithOp2
                   SEDEL.Common.Div
                   -> ww
                        @ (SEDEL.Common.ArithOp,
                           Unbound.Generics.PermM.Perm
                             Unbound.Generics.LocallyNameless.Name.AnyName)
                        SEDEL.Common.$fAlphaArithOp1 }) -}
daa3f54736e3f81d2c049bbf6395f88d
  $w$cfreshen'1 ::
    (forall a. a -> m a)
    -> SEDEL.Common.CompOp
    -> m (SEDEL.Common.CompOp,
          Unbound.Generics.PermM.Perm
            Unbound.Generics.LocallyNameless.Name.AnyName)
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (ww :: forall a. a -> m a)
                   (w :: SEDEL.Common.CompOp) ->
                 case w of wild {
                   SEDEL.Common.Lt
                   -> ww
                        @ (SEDEL.Common.CompOp,
                           Unbound.Generics.PermM.Perm
                             Unbound.Generics.LocallyNameless.Name.AnyName)
                        SEDEL.Common.$fAlphaCompOp4
                   SEDEL.Common.Gt
                   -> ww
                        @ (SEDEL.Common.CompOp,
                           Unbound.Generics.PermM.Perm
                             Unbound.Generics.LocallyNameless.Name.AnyName)
                        SEDEL.Common.$fAlphaCompOp3
                   SEDEL.Common.Equ
                   -> ww
                        @ (SEDEL.Common.CompOp,
                           Unbound.Generics.PermM.Perm
                             Unbound.Generics.LocallyNameless.Name.AnyName)
                        SEDEL.Common.$fAlphaCompOp2
                   SEDEL.Common.Neq
                   -> ww
                        @ (SEDEL.Common.CompOp,
                           Unbound.Generics.PermM.Perm
                             Unbound.Generics.LocallyNameless.Name.AnyName)
                        SEDEL.Common.$fAlphaCompOp1 }) -}
d876d99f20cce7257c46364013f67fae
  $w$cfreshen'2 ::
    (forall a. a -> m a)
    -> SEDEL.Common.LogicalOp
    -> m (SEDEL.Common.LogicalOp,
          Unbound.Generics.PermM.Perm
            Unbound.Generics.LocallyNameless.Name.AnyName)
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (ww :: forall a. a -> m a)
                   (w :: SEDEL.Common.LogicalOp) ->
                 case w of wild {
                   SEDEL.Common.LAnd
                   -> ww
                        @ (SEDEL.Common.LogicalOp,
                           Unbound.Generics.PermM.Perm
                             Unbound.Generics.LocallyNameless.Name.AnyName)
                        SEDEL.Common.$fAlphaLogicalOp2
                   SEDEL.Common.LOr
                   -> ww
                        @ (SEDEL.Common.LogicalOp,
                           Unbound.Generics.PermM.Perm
                             Unbound.Generics.LocallyNameless.Name.AnyName)
                        SEDEL.Common.$fAlphaLogicalOp1 }) -}
2a0c91384ff6cefd07c7d1887666077f
  $w$cfreshen'3 ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. a -> m a)
    -> SEDEL.Common.Operation
    -> m (SEDEL.Common.Operation,
          Unbound.Generics.PermM.Perm
            Unbound.Generics.LocallyNameless.Name.AnyName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),C(C1(U))><L,C(U)><S,1*U>, Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a. a -> m a)
                   (w :: SEDEL.Common.Operation) ->
                 case w of wild {
                   SEDEL.Common.Arith g1
                   -> ww
                        @ (m (SEDEL.Common.Operation,
                              Unbound.Generics.PermM.Perm
                                Unbound.Generics.LocallyNameless.Name.AnyName))
                        @ (SEDEL.Common.Operation,
                           Unbound.Generics.PermM.Perm
                             Unbound.Generics.LocallyNameless.Name.AnyName)
                        (ww
                           @ (SEDEL.Common.ArithOp,
                              Unbound.Generics.PermM.Perm
                                Unbound.Generics.LocallyNameless.Name.AnyName)
                           @ (m (SEDEL.Common.Operation,
                                 Unbound.Generics.PermM.Perm
                                   Unbound.Generics.LocallyNameless.Name.AnyName))
                           (SEDEL.Common.$w$cfreshen' @ m ww1 g1)
                           (\ (x1 :: (SEDEL.Common.ArithOp,
                                      Unbound.Generics.PermM.Perm
                                        Unbound.Generics.LocallyNameless.Name.AnyName)) ->
                            ww1
                              @ (m (SEDEL.Common.Operation,
                                    Unbound.Generics.PermM.Perm
                                      Unbound.Generics.LocallyNameless.Name.AnyName))
                              (ww1
                                 @ (SEDEL.Common.Operation,
                                    Unbound.Generics.PermM.Perm
                                      Unbound.Generics.LocallyNameless.Name.AnyName)
                                 (SEDEL.Common.Arith (case x1 of wild1 { (,) x2 y -> x2 }),
                                  case x1 of wild1 { (,) x2 y -> y }))))
                        (SEDEL.Common.$fAlphaOperation1 @ m)
                   SEDEL.Common.Comp g1
                   -> ww
                        @ (m (SEDEL.Common.Operation,
                              Unbound.Generics.PermM.Perm
                                Unbound.Generics.LocallyNameless.Name.AnyName))
                        @ (SEDEL.Common.Operation,
                           Unbound.Generics.PermM.Perm
                             Unbound.Generics.LocallyNameless.Name.AnyName)
                        (ww
                           @ (SEDEL.Common.CompOp,
                              Unbound.Generics.PermM.Perm
                                Unbound.Generics.LocallyNameless.Name.AnyName)
                           @ (m (SEDEL.Common.Operation,
                                 Unbound.Generics.PermM.Perm
                                   Unbound.Generics.LocallyNameless.Name.AnyName))
                           (SEDEL.Common.$w$cfreshen'1 @ m ww1 g1)
                           (\ (x1 :: (SEDEL.Common.CompOp,
                                      Unbound.Generics.PermM.Perm
                                        Unbound.Generics.LocallyNameless.Name.AnyName)) ->
                            ww1
                              @ (m (SEDEL.Common.Operation,
                                    Unbound.Generics.PermM.Perm
                                      Unbound.Generics.LocallyNameless.Name.AnyName))
                              (ww1
                                 @ (SEDEL.Common.Operation,
                                    Unbound.Generics.PermM.Perm
                                      Unbound.Generics.LocallyNameless.Name.AnyName)
                                 (SEDEL.Common.Comp (case x1 of wild1 { (,) x2 y -> x2 }),
                                  case x1 of wild1 { (,) x2 y -> y }))))
                        (SEDEL.Common.$fAlphaOperation1 @ m)
                   SEDEL.Common.Logical g1
                   -> ww
                        @ (m (SEDEL.Common.Operation,
                              Unbound.Generics.PermM.Perm
                                Unbound.Generics.LocallyNameless.Name.AnyName))
                        @ (SEDEL.Common.Operation,
                           Unbound.Generics.PermM.Perm
                             Unbound.Generics.LocallyNameless.Name.AnyName)
                        (ww
                           @ (SEDEL.Common.LogicalOp,
                              Unbound.Generics.PermM.Perm
                                Unbound.Generics.LocallyNameless.Name.AnyName)
                           @ (m (SEDEL.Common.Operation,
                                 Unbound.Generics.PermM.Perm
                                   Unbound.Generics.LocallyNameless.Name.AnyName))
                           (SEDEL.Common.$w$cfreshen'2 @ m ww1 g1)
                           (\ (x1 :: (SEDEL.Common.LogicalOp,
                                      Unbound.Generics.PermM.Perm
                                        Unbound.Generics.LocallyNameless.Name.AnyName)) ->
                            ww1
                              @ (m (SEDEL.Common.Operation,
                                    Unbound.Generics.PermM.Perm
                                      Unbound.Generics.LocallyNameless.Name.AnyName))
                              (ww1
                                 @ (SEDEL.Common.Operation,
                                    Unbound.Generics.PermM.Perm
                                      Unbound.Generics.LocallyNameless.Name.AnyName)
                                 (SEDEL.Common.Logical (case x1 of wild1 { (,) x2 y -> x2 }),
                                  case x1 of wild1 { (,) x2 y -> y }))))
                        (SEDEL.Common.$fAlphaOperation1 @ m) }) -}
2a0c91384ff6cefd07c7d1887666077f
  $w$cshowsPrec ::
    SEDEL.Common.ArithOp -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [2],
     Unfolding: (\ (w :: SEDEL.Common.ArithOp)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   SEDEL.Common.Add
                   -> GHC.Base.++ @ GHC.Types.Char SEDEL.Common.$fShowArithOp7 w1
                   SEDEL.Common.Sub
                   -> GHC.Base.++ @ GHC.Types.Char SEDEL.Common.$fShowArithOp5 w1
                   SEDEL.Common.Mul
                   -> GHC.Base.++ @ GHC.Types.Char SEDEL.Common.$fShowArithOp3 w1
                   SEDEL.Common.Div
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        SEDEL.Common.$fShowArithOp1
                        w1 }) -}
daa3f54736e3f81d2c049bbf6395f88d
  $w$cshowsPrec1 ::
    SEDEL.Common.CompOp -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [2],
     Unfolding: (\ (w :: SEDEL.Common.CompOp) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   SEDEL.Common.Lt
                   -> GHC.Base.++ @ GHC.Types.Char SEDEL.Common.$fShowCompOp7 w1
                   SEDEL.Common.Gt
                   -> GHC.Base.++ @ GHC.Types.Char SEDEL.Common.$fShowCompOp5 w1
                   SEDEL.Common.Equ
                   -> GHC.Base.++ @ GHC.Types.Char SEDEL.Common.$fShowCompOp3 w1
                   SEDEL.Common.Neq
                   -> GHC.Base.++ @ GHC.Types.Char SEDEL.Common.$fShowCompOp1 w1 }) -}
2a0c91384ff6cefd07c7d1887666077f
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> SEDEL.Common.Operation -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: SEDEL.Common.Operation)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   SEDEL.Common.Arith b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             SEDEL.Common.$fShowOperation6
                             (SEDEL.Common.$w$cshowsPrec b1 w1)
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                SEDEL.Common.$fShowOperation6
                                (SEDEL.Common.$w$cshowsPrec
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1))) }
                   SEDEL.Common.Comp b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             SEDEL.Common.$fShowOperation4
                             (SEDEL.Common.$w$cshowsPrec1 b1 w1)
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                SEDEL.Common.$fShowOperation4
                                (SEDEL.Common.$w$cshowsPrec1
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1))) }
                   SEDEL.Common.Logical b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             SEDEL.Common.$fShowOperation2
                             (case b1 of wild1 {
                                SEDEL.Common.LAnd
                                -> GHC.Base.++ @ GHC.Types.Char SEDEL.Common.$fShowLogicalOp4 w1
                                SEDEL.Common.LOr
                                -> GHC.Base.++ @ GHC.Types.Char SEDEL.Common.$fShowLogicalOp2 w1 })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                SEDEL.Common.$fShowOperation2
                                (case b1 of wild1 {
                                   SEDEL.Common.LAnd
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        SEDEL.Common.$fShowLogicalOp4
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1)
                                   SEDEL.Common.LOr
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        SEDEL.Common.$fShowLogicalOp2
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           w1) })) } }) -}
2a0c91384ff6cefd07c7d1887666077f
  data ArithOp = Add | Sub | Mul | Div
daa3f54736e3f81d2c049bbf6395f88d
  data CompOp = Lt | Gt | Equ | Neq
d876d99f20cce7257c46364013f67fae
  data LogicalOp = LAnd | LOr
2a0c91384ff6cefd07c7d1887666077f
  data Operation
    = Arith SEDEL.Common.ArithOp
    | Comp SEDEL.Common.CompOp
    | Logical SEDEL.Common.LogicalOp
2a0c91384ff6cefd07c7d1887666077f
  axiom SEDEL.Common.Rep_ArithOp::
      GHC.Generics.Rep SEDEL.Common.ArithOp
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "ArithOp"
               "SEDEL.Common"
               "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
               'GHC.Types.False)
            ((GHC.Generics.C1
                ('GHC.Generics.MetaCons
                   "Add" 'GHC.Generics.PrefixI 'GHC.Types.False)
                GHC.Generics.U1
              GHC.Generics.:+: GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "Sub" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1)
             GHC.Generics.:+: (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "Mul" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1
                               GHC.Generics.:+: GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "Div" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                  GHC.Generics.U1))
daa3f54736e3f81d2c049bbf6395f88d
  axiom SEDEL.Common.Rep_CompOp::
      GHC.Generics.Rep SEDEL.Common.CompOp
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "CompOp"
               "SEDEL.Common"
               "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
               'GHC.Types.False)
            ((GHC.Generics.C1
                ('GHC.Generics.MetaCons
                   "Lt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                GHC.Generics.U1
              GHC.Generics.:+: GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "Gt" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1)
             GHC.Generics.:+: (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "Equ" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1
                               GHC.Generics.:+: GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "Neq" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                  GHC.Generics.U1))
d876d99f20cce7257c46364013f67fae
  axiom SEDEL.Common.Rep_LogicalOp::
      GHC.Generics.Rep SEDEL.Common.LogicalOp
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "LogicalOp"
               "SEDEL.Common"
               "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "LAnd" 'GHC.Generics.PrefixI 'GHC.Types.False)
               GHC.Generics.U1
             GHC.Generics.:+: GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "LOr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1)
2a0c91384ff6cefd07c7d1887666077f
  axiom SEDEL.Common.Rep_Operation::
      GHC.Generics.Rep SEDEL.Common.Operation
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Operation"
               "SEDEL.Common"
               "sedel-0.1.0.0-CGdrjkISkKsB7AvhzRMuoJ"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Arith" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Maybe.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 SEDEL.Common.ArithOp))
             GHC.Generics.:+: (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "Comp" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 SEDEL.Common.CompOp))
                               GHC.Generics.:+: GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "Logical"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  (GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0 SEDEL.Common.LogicalOp))))
instance Unbound.Generics.LocallyNameless.Alpha.Alpha [SEDEL.Common.ArithOp]
  = SEDEL.Common.$fAlphaArithOp
instance Unbound.Generics.LocallyNameless.Alpha.Alpha [SEDEL.Common.CompOp]
  = SEDEL.Common.$fAlphaCompOp
instance Unbound.Generics.LocallyNameless.Alpha.Alpha [SEDEL.Common.LogicalOp]
  = SEDEL.Common.$fAlphaLogicalOp
instance Unbound.Generics.LocallyNameless.Alpha.Alpha [SEDEL.Common.Operation]
  = SEDEL.Common.$fAlphaOperation
instance GHC.Classes.Eq [SEDEL.Common.ArithOp]
  = SEDEL.Common.$fEqArithOp
instance GHC.Classes.Eq [SEDEL.Common.CompOp]
  = SEDEL.Common.$fEqCompOp
instance GHC.Classes.Eq [SEDEL.Common.LogicalOp]
  = SEDEL.Common.$fEqLogicalOp
instance GHC.Classes.Eq [SEDEL.Common.Operation]
  = SEDEL.Common.$fEqOperation
instance GHC.Generics.Generic [SEDEL.Common.ArithOp]
  = SEDEL.Common.$fGenericArithOp
instance GHC.Generics.Generic [SEDEL.Common.CompOp]
  = SEDEL.Common.$fGenericCompOp
instance GHC.Generics.Generic [SEDEL.Common.LogicalOp]
  = SEDEL.Common.$fGenericLogicalOp
instance GHC.Generics.Generic [SEDEL.Common.Operation]
  = SEDEL.Common.$fGenericOperation
instance GHC.Show.Show [SEDEL.Common.ArithOp]
  = SEDEL.Common.$fShowArithOp
instance GHC.Show.Show [SEDEL.Common.CompOp]
  = SEDEL.Common.$fShowCompOp
instance GHC.Show.Show [SEDEL.Common.LogicalOp]
  = SEDEL.Common.$fShowLogicalOp
instance GHC.Show.Show [SEDEL.Common.Operation]
  = SEDEL.Common.$fShowOperation
family instance GHC.Generics.Rep [SEDEL.Common.Operation]
  = SEDEL.Common.Rep_Operation
family instance GHC.Generics.Rep [SEDEL.Common.LogicalOp]
  = SEDEL.Common.Rep_LogicalOp
family instance GHC.Generics.Rep [SEDEL.Common.CompOp]
  = SEDEL.Common.Rep_CompOp
family instance GHC.Generics.Rep [SEDEL.Common.ArithOp]
  = SEDEL.Common.Rep_ArithOp
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

